import{_ as s,o as a,c as n,V as l}from"./chunks/framework.ced88878.js";const u=JSON.parse('{"title":"TypeScript 4.5","description":"","frontmatter":{},"headers":[],"relativePath":"zh/release-notes/TypeScript[4.5].md","lastUpdated":1682668835000}'),p={name:"zh/release-notes/TypeScript[4.5].md"},o=l(`<h1 id="typescript-4-5" tabindex="-1">TypeScript 4.5 <a class="header-anchor" href="#typescript-4-5" aria-label="Permalink to &quot;TypeScript 4.5&quot;">​</a></h1><h3 id="支持从-node-modules-里读取-lib" tabindex="-1">支持从 <code>node_modules</code> 里读取 <code>lib</code> <a class="header-anchor" href="#支持从-node-modules-里读取-lib" aria-label="Permalink to &quot;支持从 \`node_modules\` 里读取 \`lib\`&quot;">​</a></h3><p>为确保对 TypeScript 和 JavaScript 的支持可以开箱即用，TypeScript 内置了一些声明文件（<code>.d.ts</code>）。 这些声明文件描述了 JavaScript 语言中可用的 API，以及标准的浏览器 DOM API。 虽说 TypeScript 会根据工程中 <a href="/tsdoc-vitepress/tsconfig#target"><code>target</code></a> 的设置来提供默认值，但你仍然可以通过在 <code>tsconfig.json</code> 文件中设置 <a href="https://www.typescriptlang.org/tsconfig#lib" target="_blank" rel="noreferrer"><code>lib</code></a> 来指定包含哪些声明文件。</p><p>TypeScript 包含的声明文件偶尔也会成为缺点：</p><ul><li>在升级 TypeScript 时，你必须要处理 TypeScript 内置声明文件的升级带来的改变，这可能成为一项挑战，因为 DOM API 的变动十分频繁。</li><li>难以根据你的需求以及工程依赖的需求去定制声明文件（例如，工程依赖声明了需要使用 DOM API，那么你可能也必须要使用 DOM API）。</li></ul><p>TypeScript 4.5 引入了覆盖特定内置 <code>lib</code> 的方式，它与 <code>@types/</code> 的工作方式类似。 在决定应包含哪些 <code>lib</code> 文件时，TypeScript 会先去检查 <code>node_modules</code> 下面的 <code>@typescript/lib-*</code> 包。 例如，若将 <code>dom</code> 作为 <code>lib</code> 中的一项，那么 TypeScript 会尝试使用 <code>node_modules/@typescript/lib-dom</code>。</p><p>然后，你就可以使用包管理器去安装特定的包作为 <code>lib</code> 中的某一项。 例如，现在 TypeScript 会将 DOM API 发布到 <code>@types/web</code>。 如果你想要给工程指定一个固定版本的 DOM API，你可以在 <code>package.json</code> 文件中添加如下代码：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">dependencies</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">@typescript/lib-dom</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">npm:@types/web</span><span style="color:#DEE492;">&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;dependencies&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;@typescript/lib-dom&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;npm:@types/web&quot;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>从 4.5 版本开始，你可以更新 TypeScript 和依赖管理工具生成的锁文件来确保使用固定版本的 DOM API。 你可以根据自己的情况来逐步更新类型声明。</p><p>十分感谢 <a href="https://github.com/saschanaz" target="_blank" rel="noreferrer">saschanaz</a> 提供的帮助。</p><p>更多详情，请参考 <a href="https://github.com/microsoft/TypeScript/pull/45771" target="_blank" rel="noreferrer">PR</a>。</p><h3 id="改进-awaited-类型和-promise" tabindex="-1">改进 <code>Awaited</code> 类型和 <code>Promise</code> <a class="header-anchor" href="#改进-awaited-类型和-promise" aria-label="Permalink to &quot;改进 \`Awaited\` 类型和 \`Promise\`&quot;">​</a></h3><p>TypeScript 4.5 引入了一个新的 <code>Awaited</code> 类型。 该类型用于描述 <code>async</code> 函数中的 <code>await</code> 操作，或者 <code>Promise</code> 上的 <code>.then()</code> 方法 - 尤其是递归地解开 <code>Promise</code> 的行为。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// A = string</span></span>
<span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">A</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Awaited</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">Promise</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">&gt;&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// B = number</span></span>
<span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">B</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Awaited</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">Promise</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">Promise</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">&gt;&gt;&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// C = boolean | number</span></span>
<span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">C</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Awaited</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">Promise</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">&gt;&gt;;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// A = string</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">A</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Awaited</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Promise</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">&gt;&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// B = number</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">B</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Awaited</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Promise</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Promise</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">number</span><span style="color:#24292E;">&gt;&gt;&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// C = boolean | number</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">C</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Awaited</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">boolean</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Promise</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">number</span><span style="color:#24292E;">&gt;&gt;;</span></span></code></pre></div><p><code>Awaited</code> 有助于描述现有 API，比如 JavaScript 内置的 <code>Promise.all</code>，<code>Promise.race</code> 等等。 实际上，正是涉及 <code>Promise.all</code> 的类型推断问题促进了 <code>Awaited</code> 类型的产生。 例如，下例中的代码在 TypeScript 4.4 及之前的版本中会失败。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">declare</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">MaybePromise</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F6F6F4;">&gt;(</span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;">)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Promise</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F6F6F4;">&gt; </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">PromiseLike</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F6F6F4;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">async</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">doSomething</span><span style="color:#F6F6F4;">()</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Promise</span><span style="color:#F6F6F4;">&lt;[</span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">]&gt; {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> result </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">await</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Promise</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">all</span><span style="color:#F6F6F4;">([</span><span style="color:#62E884;">MaybePromise</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">100</span><span style="color:#F6F6F4;">), </span><span style="color:#62E884;">MaybePromise</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">200</span><span style="color:#F6F6F4;">)]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// 错误！</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">//</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">//    [number | Promise&lt;100&gt;, number | Promise&lt;200&gt;]</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">//</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// 不能赋值给类型</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">//</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">//    [number, number]</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> result;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">declare</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MaybePromise</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">&gt;(</span><span style="color:#E36209;">value</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Promise</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PromiseLike</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doSomething</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Promise</span><span style="color:#24292E;">&lt;[</span><span style="color:#005CC5;">number</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">]&gt; {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">result</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">all</span><span style="color:#24292E;">([</span><span style="color:#6F42C1;">MaybePromise</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">), </span><span style="color:#6F42C1;">MaybePromise</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">200</span><span style="color:#24292E;">)]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 错误！</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//    [number | Promise&lt;100&gt;, number | Promise&lt;200&gt;]</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 不能赋值给类型</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//    [number, number]</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>现在，<code>Promise.all</code> 结合并利用 <code>Awaited</code> 来提供更好的类型推断结果，同时上例中的代码也不再有错误。</p><p>更多详情，请参考 <a href="https://github.com/microsoft/TypeScript/pull/45350" target="_blank" rel="noreferrer">PR</a>。</p><h3 id="模版字符串类型作为判别式属性" tabindex="-1">模版字符串类型作为判别式属性 <a class="header-anchor" href="#模版字符串类型作为判别式属性" aria-label="Permalink to &quot;模版字符串类型作为判别式属性&quot;">​</a></h3><p>TypeScript 4.5 可以对模版字符串类型的值进行细化，同时可以识别模版字符串类型的判别式属性。</p><p>例如，下面的代码在以前会出错，但在 TypeScript 4.5 里没有错误。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Success</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  type</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">\`</span><span style="color:#F286C4;">\${</span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F286C4;">}</span><span style="color:#E7EE98;">Success\`</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  body</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Error</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  type</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">\`</span><span style="color:#F286C4;">\${</span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F286C4;">}</span><span style="color:#E7EE98;">Error\`</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  message</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">handler</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">r</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Success</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Error</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (r.type </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">HttpSuccess</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// &#39;r&#39; 的类型为 &#39;Success&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> token </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> r.body;</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Success</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">type</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`\${</span><span style="color:#005CC5;">string</span><span style="color:#032F62;">}Success\`</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">body</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">type</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`\${</span><span style="color:#005CC5;">string</span><span style="color:#032F62;">}Error\`</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">message</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handler</span><span style="color:#24292E;">(</span><span style="color:#E36209;">r</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Success</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (r.type </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;HttpSuccess&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &#39;r&#39; 的类型为 &#39;Success&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> token </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> r.body;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>更多详情，请参考 <a href="https://github.com/microsoft/TypeScript/pull/46137" target="_blank" rel="noreferrer">PR</a>。</p><h3 id="module-es2022" tabindex="-1"><code>module es2022</code> <a class="header-anchor" href="#module-es2022" aria-label="Permalink to &quot;\`module es2022\`&quot;">​</a></h3><p>感谢 <a href="https://github.com/saschanaz" target="_blank" rel="noreferrer">Kagami S. Rosylight</a>，TypeScript 现在支持了一个新的 <code>module</code> 设置：<code>es2022</code>。 <a href="/tsdoc-vitepress/tsconfig#module"><code>module es2022</code></a> 的主要功能是支持顶层的 <code>await</code>，即可以在 <code>async</code> 函数外部使用 <code>await</code>。 该功能在 <code>--module esnext</code> 里已经被支持了（现在又增加了 <a href="/tsdoc-vitepress/tsconfig#target"><code>--module nodenext</code></a>），但 <code>es2022</code> 是支持该功能的首个稳定版本。</p><p>更多详情，请参考 <a href="https://github.com/microsoft/TypeScript/pull/44656" target="_blank" rel="noreferrer">PR</a>。</p><h3 id="在条件类型上消除尾递归" tabindex="-1">在条件类型上消除尾递归 <a class="header-anchor" href="#在条件类型上消除尾递归" aria-label="Permalink to &quot;在条件类型上消除尾递归&quot;">​</a></h3><p>当 TypeScript 检测到了以下情况时通常需要优雅地失败，比如无限递归、极其耗时以至影响编辑器使用体验的类型展开操作。 因此，TypeScript 会使用试探式的方法来确保它在试图拆分一个无限层级的类型时或操作将生成大量中间结果的类型时不会偏离轨道。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">InfiniteBox</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F6F6F4;">&gt; </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> { item</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">InfiniteBox</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F6F6F4;">&gt; };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Unpack</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F6F6F4;">&gt; </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> { item</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">infer</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">U</span><span style="color:#F6F6F4;"> } </span><span style="color:#F286C4;">?</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Unpack</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">U</span><span style="color:#F6F6F4;">&gt; </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// error: Type instantiation is excessively deep and possibly infinite.</span></span>
<span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Test</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Unpack</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">InfiniteBox</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">&gt;&gt;;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InfiniteBox</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { </span><span style="color:#E36209;">item</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InfiniteBox</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">&gt; };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Unpack</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> { </span><span style="color:#E36209;">item</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">infer</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">U</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Unpack</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">U</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// error: Type instantiation is excessively deep and possibly infinite.</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Test</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Unpack</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">InfiniteBox</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">number</span><span style="color:#24292E;">&gt;&gt;;</span></span></code></pre></div><p>上例是有意写成简单且没用的类型，但是存在大量有用的类型恰巧会触发试探。 作为示例，下面的 <code>TrimLeft</code> 类型会从字符串类型的开头删除空白。 若给定一个在开头位置有一个空格的字符串类型，它会直接将空格后面的字符串再传入 <code>TrimLeft</code>。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">TrimLeft</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">&gt; </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">\` </span><span style="color:#F286C4;">\${</span><span style="color:#F286C4;">infer</span><span style="color:#E7EE98;"> </span><span style="color:#97E1F1;font-style:italic;">Rest</span><span style="color:#F286C4;">}</span><span style="color:#E7EE98;">\`</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">?</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">TrimLeft</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">Rest</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// Test = &quot;hello&quot; | &quot;world&quot;</span></span>
<span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Test</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">TrimLeft</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">   hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;"> world</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TrimLeft</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\` \${</span><span style="color:#D73A49;">infer</span><span style="color:#032F62;"> </span><span style="color:#6F42C1;">Rest</span><span style="color:#032F62;">}\`</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TrimLeft</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Rest</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Test = &quot;hello&quot; | &quot;world&quot;</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Test</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TrimLeft</span><span style="color:#24292E;">&lt;</span><span style="color:#032F62;">&quot;   hello&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; world&quot;</span><span style="color:#24292E;">&gt;;</span></span></code></pre></div><p>这个类型也许有用，但如果字符串起始位置有 50 个空格，就会产生错误。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">TrimLeft</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">&gt; </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">\` </span><span style="color:#F286C4;">\${</span><span style="color:#F286C4;">infer</span><span style="color:#E7EE98;"> </span><span style="color:#97E1F1;font-style:italic;">Rest</span><span style="color:#F286C4;">}</span><span style="color:#E7EE98;">\`</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">?</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">TrimLeft</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">Rest</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// error: Type instantiation is excessively deep and possibly infinite.</span></span>
<span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Test</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">TrimLeft</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">                                                oops</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TrimLeft</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\` \${</span><span style="color:#D73A49;">infer</span><span style="color:#032F62;"> </span><span style="color:#6F42C1;">Rest</span><span style="color:#032F62;">}\`</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TrimLeft</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Rest</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// error: Type instantiation is excessively deep and possibly infinite.</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Test</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TrimLeft</span><span style="color:#24292E;">&lt;</span><span style="color:#032F62;">&quot;                                                oops&quot;</span><span style="color:#24292E;">&gt;;</span></span></code></pre></div><p>这很讨厌，因为这种类型在表示字符串操作时很有用 - 例如，URL 路由解析器。 更差的是，越有用的类型越会创建更多的实例化类型，结果就是对输入参数会有限制。</p><p>但也有一个可取之处：<code>TrimLeft</code> 在一个分支中使用了<em>尾递归</em>的方式编写。 当它再次调用自己时，是直接返回了结果并且不存在后续操作。 由于这些类型不需要创建中间结果，因此可以被更快地实现并且可以避免触发 TypeScript 内置的类型递归试探。</p><p>这就是 TypeScript 4.5 在条件类型上删除尾递归的原因。 只要是条件类型的某个分支为另一个条件类型，TypeScript 就不会去生成中间类型。 虽说仍然会进行一些试探来确保类型没有偏离方向，但已无伤大雅。</p><p>注意，下面的类型<em>不会</em>被优化，因为它使用了包含条件类型的联合类型。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">GetChars</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">S</span><span style="color:#F6F6F4;">&gt; </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">S</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">\`</span><span style="color:#F286C4;">\${</span><span style="color:#F286C4;">infer</span><span style="color:#E7EE98;"> </span><span style="color:#97E1F1;font-style:italic;">Char</span><span style="color:#F286C4;">}\${</span><span style="color:#F286C4;">infer</span><span style="color:#E7EE98;"> </span><span style="color:#97E1F1;font-style:italic;">Rest</span><span style="color:#F286C4;">}</span><span style="color:#E7EE98;">\`</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">?</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Char</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">GetChars</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">Rest</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">never</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GetChars</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">S</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">S</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`\${</span><span style="color:#D73A49;">infer</span><span style="color:#032F62;"> </span><span style="color:#6F42C1;">Char</span><span style="color:#032F62;">}\${</span><span style="color:#D73A49;">infer</span><span style="color:#032F62;"> </span><span style="color:#6F42C1;">Rest</span><span style="color:#032F62;">}\`</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GetChars</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Rest</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">never</span><span style="color:#24292E;">;</span></span></code></pre></div><p>如果你想将它改成尾递归，可以引入帮助类型来接收一个累加类型的参数，就如同尾递归函数一样。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">GetChars</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">S</span><span style="color:#F6F6F4;">&gt; </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">GetCharsHelper</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">S</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">never</span><span style="color:#F6F6F4;">&gt;;</span></span>
<span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">GetCharsHelper</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">S</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">Acc</span><span style="color:#F6F6F4;">&gt; </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">S</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">\`</span><span style="color:#F286C4;">\${</span><span style="color:#F286C4;">infer</span><span style="color:#E7EE98;"> </span><span style="color:#97E1F1;font-style:italic;">Char</span><span style="color:#F286C4;">}\${</span><span style="color:#F286C4;">infer</span><span style="color:#E7EE98;"> </span><span style="color:#97E1F1;font-style:italic;">Rest</span><span style="color:#F286C4;">}</span><span style="color:#E7EE98;">\`</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">?</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">GetCharsHelper</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">Rest</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">Char</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">Acc</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Acc</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GetChars</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">S</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GetCharsHelper</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">S</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">never</span><span style="color:#24292E;">&gt;;</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GetCharsHelper</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">S</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Acc</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">S</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`\${</span><span style="color:#D73A49;">infer</span><span style="color:#032F62;"> </span><span style="color:#6F42C1;">Char</span><span style="color:#032F62;">}\${</span><span style="color:#D73A49;">infer</span><span style="color:#032F62;"> </span><span style="color:#6F42C1;">Rest</span><span style="color:#032F62;">}\`</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GetCharsHelper</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Rest</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Acc</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Acc</span><span style="color:#24292E;">;</span></span></code></pre></div><p>更多详情，请参考 <a href="https://github.com/microsoft/TypeScript/pull/45711" target="_blank" rel="noreferrer">PR</a>。</p><h3 id="禁用导入省略" tabindex="-1">禁用导入省略 <a class="header-anchor" href="#禁用导入省略" aria-label="Permalink to &quot;禁用导入省略&quot;">​</a></h3><p>在某些情况下，TypeScript 无法检测导入是否被使用。 例如，考虑下面的代码：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { Animal } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">./animal.js</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">eval</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">console.log(new Animal().isDangerous())</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { Animal } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./animal.js&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">eval</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;console.log(new Animal().isDangerous())&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>默认情况下，TypeScript 会删除上面的导入语句，因为它看上去没有被使用。 在 TypeScript 4.5 里，你可以启用新的标记 <a href="/tsdoc-vitepress/tsconfig#preserveValueImports"><code>preserveValueImports</code></a> 来阻止 TypeScript 从生成的 JavaScript 代码里删除导入的值。 虽说应该使用 <code>eval</code> 的理由不多，但在 Svelte 框架里有相似的情况：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">&lt;!-- A .svelte File --&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">script</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { someFunc } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">./some-module.js</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">script</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">button</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">on:click</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">{someFunc}</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;Click me!&lt;/</span><span style="color:#F286C4;">button</span><span style="color:#F6F6F4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!-- A .svelte File --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { someFunc } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./some-module.js&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">on:click</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;{someFunc}&quot;</span><span style="color:#24292E;">&gt;Click me!&lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>同样在 Vue.js 中，使用 <code>&lt;script setup&gt;</code> 功能：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">&lt;!-- A .vue File --&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">script</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">setup</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { someFunc } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">./some-module.js</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">script</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">button</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">@click</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">someFunc</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;Click me!&lt;/</span><span style="color:#F286C4;">button</span><span style="color:#F6F6F4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!-- A .vue File --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setup</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { someFunc } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./some-module.js&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">@click</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;someFunc&quot;</span><span style="color:#24292E;">&gt;Click me!&lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>这些框架会根据 <code>&lt;script&gt;</code> 标签外的标记来生成代码，但 TypeScript <em>仅仅</em>会考虑 <code>&lt;script&gt;</code> 标签内的代码。 也就是说 TypeScript 会自动删除对 <code>someFunc</code> 的导入，因此上面的代码无法运行！ 使用 TypeScript 4.5，你可以通过 <a href="/tsdoc-vitepress/tsconfig#preserveValueImports"><code>preserveValueImports</code></a> 来避免发生这种情况。</p><p>当该标记和 <a href="/tsdoc-vitepress/tsconfig#isolatedModules">--isolatedModules\`</a> 一起使用时有个额外要求：导入的类型<em>必须</em>被标记为 type-only，因为编译器一次处理一个文件，无法知道是否导入了未被使用的值，或是导入了必须要被删除的类型以防运行时崩溃。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// Which of these is a value that should be preserved? tsc knows, but \`ts.transpileModule\`,</span></span>
<span class="line"><span style="color:#7B7F8B;">// ts-loader, esbuild, etc. don&#39;t, so \`isolatedModules\` gives an error.</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { someFunc, BaseType } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">./some-module.js</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#7B7F8B;">//                 ^^^^^^^^</span></span>
<span class="line"><span style="color:#7B7F8B;">// Error: &#39;BaseType&#39; is a type and must be imported using a type-only import</span></span>
<span class="line"><span style="color:#7B7F8B;">// when &#39;preserveValueImports&#39; and &#39;isolatedModules&#39; are both enabled.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Which of these is a value that should be preserved? tsc knows, but \`ts.transpileModule\`,</span></span>
<span class="line"><span style="color:#6A737D;">// ts-loader, esbuild, etc. don&#39;t, so \`isolatedModules\` gives an error.</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { someFunc, BaseType } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./some-module.js&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">//                 ^^^^^^^^</span></span>
<span class="line"><span style="color:#6A737D;">// Error: &#39;BaseType&#39; is a type and must be imported using a type-only import</span></span>
<span class="line"><span style="color:#6A737D;">// when &#39;preserveValueImports&#39; and &#39;isolatedModules&#39; are both enabled.</span></span></code></pre></div><p>这催生了另一个 TypeScript 4.5 的功能，<a href="#type-on-import-names">导入语句中的 <code>type</code> 修饰符</a>，它尤其重要。</p><p>更多详情，请参考 <a href="https://github.com/microsoft/TypeScript/pull/44619" target="_blank" rel="noreferrer">PR</a>。</p><h3 id="在导入名称前使用-type-修饰符" tabindex="-1">在导入名称前使用 <code>type</code> 修饰符 <a class="header-anchor" href="#在导入名称前使用-type-修饰符" aria-label="Permalink to &quot;在导入名称前使用 \`type\` 修饰符&quot;">​</a></h3><p>上面提到，<a href="/tsdoc-vitepress/tsconfig#preserveValueImports"><code>preserveValueImports</code></a> 和 <a href="/tsdoc-vitepress/tsconfig#isolatedModules"><code>isolatedModules</code></a> 结合使用时有额外的要求，这是为了让构建工具能够明确知道是否可以省略导入语句。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// Which of these is a value that should be preserved? tsc knows, but \`ts.transpileModule\`,</span></span>
<span class="line"><span style="color:#7B7F8B;">// ts-loader, esbuild, etc. don&#39;t, so \`isolatedModules\` issues an error.</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { someFunc, BaseType } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">./some-module.js</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#7B7F8B;">//                 ^^^^^^^^</span></span>
<span class="line"><span style="color:#7B7F8B;">// Error: &#39;BaseType&#39; is a type and must be imported using a type-only import</span></span>
<span class="line"><span style="color:#7B7F8B;">// when &#39;preserveValueImports&#39; and &#39;isolatedModules&#39; are both enabled.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Which of these is a value that should be preserved? tsc knows, but \`ts.transpileModule\`,</span></span>
<span class="line"><span style="color:#6A737D;">// ts-loader, esbuild, etc. don&#39;t, so \`isolatedModules\` issues an error.</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { someFunc, BaseType } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./some-module.js&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">//                 ^^^^^^^^</span></span>
<span class="line"><span style="color:#6A737D;">// Error: &#39;BaseType&#39; is a type and must be imported using a type-only import</span></span>
<span class="line"><span style="color:#6A737D;">// when &#39;preserveValueImports&#39; and &#39;isolatedModules&#39; are both enabled.</span></span></code></pre></div><p>当同时使用了这些选项时，需要有一种方式来表示导入语句是否可以被合法地丢弃。 TypeScript 已经有类似的功能，即 <code>import type</code>：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> { BaseType } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">./some-module.js</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { someFunc } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">./some-module.js</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Thing</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">implements</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">BaseType</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// ...</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">type</span><span style="color:#24292E;"> { BaseType } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./some-module.js&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { someFunc } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./some-module.js&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Thing</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BaseType</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这是有效的，但还可以提供更好的方式来避免使用两条导入语句从相同的模块中导入。 因此，TypeScript 4.5 允许在每个命名导入前使用 <code>type</code> 修饰符，你可以按需混合使用它们。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { someFunc, </span><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> BaseType } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">./some-module.js</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Thing</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">implements</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">BaseType</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">someMethod</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">someFunc</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { someFunc, </span><span style="color:#D73A49;">type</span><span style="color:#24292E;"> BaseType } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./some-module.js&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Thing</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BaseType</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">someMethod</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">someFunc</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上例中，在 <a href="/tsdoc-vitepress/tsconfig#preserveValueImports"><code>preserveValueImports</code></a> 模式下，能够确定 <code>BaseType</code> 可以被删除，同时 <code>someFunc</code> 应该被保留，于是就会生成如下代码：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { someFunc } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">./some-module.js</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Thing</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">someMethod</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">someFunc</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { someFunc } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./some-module.js&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Thing</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">someMethod</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">someFunc</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>更多详情，请参考 <a href="https://github.com/microsoft/TypeScript/pull/45998" target="_blank" rel="noreferrer">PR</a>。</p><h3 id="私有字段存在性检查" tabindex="-1">私有字段存在性检查 <a class="header-anchor" href="#私有字段存在性检查" aria-label="Permalink to &quot;私有字段存在性检查&quot;">​</a></h3><p>TypeScript 4.5 支持了检查对象上是否存在某私有字段的 ECMAScript Proposal。 现在，你可以编写带有 <code>#private</code> 字段成员的类，然后使用 <code>in</code> 运算符检查另一个对象是否包含相同的字段。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Person</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    #name</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">constructor</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.#name </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> name;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">equals</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">other</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">unknown</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> other </span><span style="color:#F286C4;">&amp;&amp;</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">typeof</span><span style="color:#F6F6F4;"> other </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">object</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&amp;&amp;</span></span>
<span class="line"><span style="color:#F6F6F4;">            #name </span><span style="color:#F286C4;">in</span><span style="color:#F6F6F4;"> other </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> </span><span style="color:#7B7F8B;">// &lt;- this is new!</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.#name </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;"> other.#name;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">#name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">constructor</span><span style="color:#24292E;">(</span><span style="color:#E36209;">name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.#name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> name;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(</span><span style="color:#E36209;">other</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">unknown</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> other </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> other </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;object&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">            #name </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> other </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// &lt;- this is new!</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.#name </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> other.#name;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>该功能一个有趣的地方是，<code>#name in other</code> 隐含了 <code>other</code> 必须是使用 <code>Person</code> 构造的，因为只有在这种情况下才可能存在该字段。 这是该提议中关键的功能之一，同时也是为什么这项提议叫作 “ergonomic brand checks” 的原因 - 因为私有字段通常作为一种“商标”来区分不同类的实例。 因此，TypeScript 能够在每次检查中细化 <code>other</code>类型，直到细化为 <code>Person</code> 类型。</p><p>感谢来自 Bloomberg 的朋友提交的 <a href="https://github.com/microsoft/TypeScript/pull/44648" target="_blank" rel="noreferrer">PR</a>：<a href="https://github.com/acutmore" target="_blank" rel="noreferrer">Ashley Claymore</a>，<a href="https://github.com/dragomirtitian" target="_blank" rel="noreferrer">Titian Cernicova-Dragomir</a>，<a href="https://github.com/mkubilayk" target="_blank" rel="noreferrer">Kubilay Kahveci</a>，和 <a href="https://github.com/robpalme" target="_blank" rel="noreferrer">Rob Palmer</a>！</p><h3 id="导入断言" tabindex="-1">导入断言 <a class="header-anchor" href="#导入断言" aria-label="Permalink to &quot;导入断言&quot;">​</a></h3><p>TypeScript 4.5 支持了 ECMAScript Proposal 中的 <em>导入断言</em>。 该语法会被运行时所使用来检查导入是否为期望的格式。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> obj </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">./something.json</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">assert</span><span style="color:#F6F6F4;"> { type</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">json</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> };</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> obj </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./something.json&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> { type: </span><span style="color:#032F62;">&quot;json&quot;</span><span style="color:#24292E;"> };</span></span></code></pre></div><p>TypeScript 不会检查这些断言，因为它们依赖于宿主环境。 TypeScript 会保留原样，稍后让浏览器或者运行时来处理它们（也可能会出错）。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// TypeScript 允许</span></span>
<span class="line"><span style="color:#7B7F8B;">// 但浏览器可能不允许</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> obj </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">./something.json</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">assert</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    type</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">fluffy bunny</span><span style="color:#DEE492;">&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// TypeScript 允许</span></span>
<span class="line"><span style="color:#6A737D;">// 但浏览器可能不允许</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> obj </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./something.json&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    type: </span><span style="color:#032F62;">&quot;fluffy bunny&quot;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>动态的 <code>import()</code> 调用可以通过第二个参数来使用导入断言。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> obj </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">await</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">./something.json</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, {</span></span>
<span class="line"><span style="color:#F6F6F4;">  assert</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> { type</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">json</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> },</span></span>
<span class="line"><span style="color:#F6F6F4;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">obj</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./something.json&quot;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">  assert: { type: </span><span style="color:#032F62;">&quot;json&quot;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>第二个参数的类型为 <code>ImportCallOptions</code>，并且目前它只接受一个 <code>assert</code> 属性。</p><p>感谢 <a href="https://github.com/Kingwl/" target="_blank" rel="noreferrer">Wenlu Wang</a> 实现了 <a href="https://github.com/microsoft/TypeScript/pull/40698" target="_blank" rel="noreferrer">这个功能</a>！</p><h3 id="使用-realpathsync-native-获得更快的加载速度" tabindex="-1">使用 <code>realPathSync.native</code> 获得更快的加载速度 <a class="header-anchor" href="#使用-realpathsync-native-获得更快的加载速度" aria-label="Permalink to &quot;使用 \`realPathSync.native\` 获得更快的加载速度&quot;">​</a></h3><p>TypeScript 在所有操作系统上使用了 Node.js <code>realPathSync</code> 函数的系统原生实现。</p><p>以前，这个函数只在 Linux 上使用了，但在 TypeScript 4.5 中，在大小写不敏感的操作系统上，如 Windows 和 MacOS，也被采用了。 对于一些代码库来讲这个改动会提升 5 ~ 13% 的加载速度（和操作系统有关）。</p><p>更多详情请参考 <a href="https://github.com/microsoft/TypeScript/pull/44966" target="_blank" rel="noreferrer">PR</a>。</p><h3 id="jsx-attributes-的代码片段自动补全" tabindex="-1">JSX Attributes 的代码片段自动补全 <a class="header-anchor" href="#jsx-attributes-的代码片段自动补全" aria-label="Permalink to &quot;JSX Attributes 的代码片段自动补全&quot;">​</a></h3><p>TypeScript 4.5 为 JSX 属性提供了<em>代码片段自动补全</em>功能。 当在 JSX 标签上输入属性时，TypeScript 已经能够提供提供建议； 但对于代码片段自动补全来讲，它们会删除部分已经输入的字符来添加一个初始化器并将光标放到正确的位置。</p><p><img src="https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2021/10/jsx-attributes-snippets-4-5.gif" alt="Snippet completions for JSX attributes. For a string property, quotes are automatically added. For a numeric properties, braces are added."></p><p>TypeScript 通常会使用属性的类型来判断插入哪种初始化器，但你可以在 Visual Studio Code 中自定义该行为。</p><p><img src="https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2021/10/jsx-snippet-settings-4-5.png" alt="Settings in VS Code for JSX attribute completions"></p><p>注意，该功能只在新版本的 Visual Studio Code 中支持，因此你可能需要使用 Insiders 版本。 更多详情，请参考 <a href="https://github.com/microsoft/TypeScript/pull/45903" target="_blank" rel="noreferrer">PR</a>。</p><h3 id="为未解决类型提供更好的编辑器支持" tabindex="-1">为未解决类型提供更好的编辑器支持 <a class="header-anchor" href="#为未解决类型提供更好的编辑器支持" aria-label="Permalink to &quot;为未解决类型提供更好的编辑器支持&quot;">​</a></h3><p>在某些情况下，编辑器会使用一个轻量级的“部分”语义模式 - 比如编辑器正在等待加载完整的工程，又或者是 <a href="https://docs.github.com/en/codespaces/developing-in-codespaces/web-based-editor" target="_blank" rel="noreferrer">GitHub 的基于 web 的编辑器</a>。</p><p>在旧版本 TypeScript 中，如果语言服务无法找到一个类型，它会输出 <code>any</code>。</p><p><img src="https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2021/10/quick-info-unresolved-4-4.png" alt="Hovering over a signature where  isn&#39;t found, TypeScript replaces it with ."></p><p>上例中，没有找到 <code>Buffer</code>，因此 TypeScript 在 <em>quick info</em> 里显示了 <code>any</code>。 在 TypeScript 4.5 中，TypeScript 会尽可能保留你编写的代码。</p><p><img src="https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2021/10/quick-info-unresolved-4-5.png" alt="Hovering over a signature where  isn&#39;t found, it continues to use the name ."></p><p>然而，当你将鼠标停在 <code>Buffer</code> 上时，你会看到 TypeScript 无法找到 <code>Buffer</code> 的提示。</p><p><img src="https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2021/10/quick-info-unresolved-on-type-4-5.png" alt="TypeScript displays "></p><p>总之，在 TypeScript 还没有读取整个工程的时候，它提供了更加平滑的体验。 注意，在其它正常情况下，当无法找到某个类型时总会产生错误。</p><p>更多详情，请参考 <a href="https://github.com/microsoft/TypeScript/pull/45976" target="_blank" rel="noreferrer">PR</a>。</p>`,97),e=[o];function t(c,r,y,F,i,E){return a(),n("div",null,e)}const C=s(p,[["render",t]]);export{u as __pageData,C as default};
