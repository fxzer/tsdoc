import{_ as s,o as a,c as n,V as p}from"./chunks/framework.ced88878.js";const u=JSON.parse('{"title":"React与webpack","description":"","frontmatter":{},"headers":[],"relativePath":"zh/tutorials/Migrating from JavaScript.md","lastUpdated":1682670826000}'),l={name:"zh/tutorials/Migrating from JavaScript.md"},o=p(`<h1 id="react与webpack" tabindex="-1">React与webpack <a class="header-anchor" href="#react与webpack" aria-label="Permalink to &quot;React与webpack&quot;">​</a></h1><p>这篇指南将会教你如何将TypeScript和<a href="https://reactjs.org/" target="_blank" rel="noreferrer">React</a>还有<a href="http://webpack.github.io/" target="_blank" rel="noreferrer">webpack</a>结合在一起使用。</p><p>如果你正在做一个全新的工程，可以先阅读这篇<a href="./react">React快速上手指南</a>。</p><p>否则，我们假设已经在使用<a href="https://nodejs.org/" target="_blank" rel="noreferrer">Node.js</a>和<a href="https://www.npmjs.com/" target="_blank" rel="noreferrer">npm</a>。</p><h2 id="初始化项目结构" tabindex="-1">初始化项目结构 <a class="header-anchor" href="#初始化项目结构" aria-label="Permalink to &quot;初始化项目结构&quot;">​</a></h2><p>让我们新建一个目录。 将会命名为<code>proj</code>，但是你可以改成任何你喜欢的名字。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">mkdir proj</span></span>
<span class="line"><span style="color:#f6f6f4;">cd proj</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">mkdir proj</span></span>
<span class="line"><span style="color:#24292e;">cd proj</span></span></code></pre></div><p>我们会像下面的结构组织我们的工程：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">proj/</span></span>
<span class="line"><span style="color:#f6f6f4;">├─ dist/</span></span>
<span class="line"><span style="color:#f6f6f4;">└─ src/</span></span>
<span class="line"><span style="color:#f6f6f4;">   └─ components/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">proj/</span></span>
<span class="line"><span style="color:#24292e;">├─ dist/</span></span>
<span class="line"><span style="color:#24292e;">└─ src/</span></span>
<span class="line"><span style="color:#24292e;">   └─ components/</span></span></code></pre></div><p>TypeScript文件会放在<code>src</code>文件夹里，通过TypeScript编译器编译，然后经webpack处理，最后生成一个<code>main.js</code>文件放在<code>dist</code>目录下。 我们自定义的组件将会放在<code>src/components</code>文件夹下。</p><p>下面来创建基本结构：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">mkdir src</span></span>
<span class="line"><span style="color:#f6f6f4;">cd src</span></span>
<span class="line"><span style="color:#f6f6f4;">mkdir components</span></span>
<span class="line"><span style="color:#f6f6f4;">cd ..</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">mkdir src</span></span>
<span class="line"><span style="color:#24292e;">cd src</span></span>
<span class="line"><span style="color:#24292e;">mkdir components</span></span>
<span class="line"><span style="color:#24292e;">cd ..</span></span></code></pre></div><p>Webpack会帮助我们生成<code>dist</code>目录。</p><h2 id="初始化工程" tabindex="-1">初始化工程 <a class="header-anchor" href="#初始化工程" aria-label="Permalink to &quot;初始化工程&quot;">​</a></h2><p>现在把这个目录变成npm包。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">npm init -y</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">npm init -y</span></span></code></pre></div><p>它会使用默认值生成一个<code>package.json</code>文件。</p><h2 id="安装依赖" tabindex="-1">安装依赖 <a class="header-anchor" href="#安装依赖" aria-label="Permalink to &quot;安装依赖&quot;">​</a></h2><p>首先确保已经全局安装了Webpack。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">npm install --save-dev webpack webpack-cli</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">npm install --save-dev webpack webpack-cli</span></span></code></pre></div><p>Webpack这个工具可以将你的所有代码和可选择地将依赖捆绑成一个单独的<code>.js</code>文件。</p><p>现在我们添加React和React-DOM以及它们的声明文件到<code>package.json</code>文件里做为依赖：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">npm install --save react react-dom</span></span>
<span class="line"><span style="color:#f6f6f4;">npm install --save-dev @types/react @types/react-dom</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">npm install --save react react-dom</span></span>
<span class="line"><span style="color:#24292e;">npm install --save-dev @types/react @types/react-dom</span></span></code></pre></div><p>使用<code>@types/</code>前缀表示我们额外要获取React和React-DOM的声明文件。 通常当你导入像<code>&quot;react&quot;</code>这样的路径，它会查看<code>react</code>包； 然而，并不是所有的包都包含了声明文件，所以TypeScript还会查看<code>@types/react</code>包。 你会发现我们以后将不必在意这些。</p><p>接下来，我们要添加开发时依赖<a href="https://www.npmjs.com/package/ts-loader" target="_blank" rel="noreferrer">ts-loader</a>和<a href="https://www.npmjs.com/package/source-map-loader" target="_blank" rel="noreferrer">source-map-loader</a>。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">npm install --save-dev typescript ts-loader source-map-loader</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">npm install --save-dev typescript ts-loader source-map-loader</span></span></code></pre></div><p>这些依赖会让TypeScript和webpack在一起良好地工作。 <code>ts-loader</code>可以让Webpack使用TypeScript的标准配置文件<code>tsconfig.json</code>编译TypeScript代码。 source-map-loader使用TypeScript输出的sourcemap文件来告诉webpack何时生成_自己的_sourcemaps。 这就允许你在调试最终生成的文件时就好像在调试TypeScript源码一样。</p><p>请注意，<code>ts-loader</code>并不是唯一的<code>TypeScript</code>加载器。</p><p>你还可以选择<a href="https://www.npmjs.com/package/awesome-typescript-loader" target="_blank" rel="noreferrer">awesome-typescript-loader</a>。 可以到<a href="https://github.com/s-panferov/awesome-typescript-loader#differences-between-ts-loader" target="_blank" rel="noreferrer">这里</a>查看它们之间的区别。</p><p>注意我们安装TypeScript为一个开发依赖。 我们还可以使用<code>npm link typescript</code>来链接TypeScript到一个全局拷贝，但这不是常见用法。</p><h2 id="添加typescript配置文件" tabindex="-1">添加TypeScript配置文件 <a class="header-anchor" href="#添加typescript配置文件" aria-label="Permalink to &quot;添加TypeScript配置文件&quot;">​</a></h2><p>我们想将TypeScript文件整合到一起 - 这包括我们写的源码和必要的声明文件。</p><p>我们需要创建一个<code>tsconfig.json</code>文件，它包含了输入文件列表以及编译选项。 在工程根目录下新建文件<code>tsconfig.json</code>文件，添加以下内容：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">compilerOptions</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">: {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">outDir</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">./dist/</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">sourceMap</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">noImplicitAny</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">module</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">commonjs</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">target</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">es6</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">jsx</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">react</span><span style="color:#DEE492;">&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;outDir&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./dist/&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;sourceMap&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;noImplicitAny&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;module&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;commonjs&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;target&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;es6&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;jsx&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;react&quot;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>你可以在<a href="./../project-config/tsconfig.json">这里</a>了解更多关于<code>tsconfig.json</code>文件的说明。</p><h2 id="写些代码" tabindex="-1">写些代码 <a class="header-anchor" href="#写些代码" aria-label="Permalink to &quot;写些代码&quot;">​</a></h2><p>下面使用React写一段TypeScript代码。 首先，在<code>src/components</code>目录下创建一个名为<code>Hello.tsx</code>的文件，代码如下：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">as</span><span style="color:#F6F6F4;"> React </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">react</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">HelloProps</span><span style="color:#F6F6F4;"> { compiler</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">; framework</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Hello</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">props</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">HelloProps</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> &lt;</span><span style="color:#97E1F1;font-style:italic;">h1</span><span style="color:#F6F6F4;">&gt;Hello from {props.compiler} and {props.framework}</span><span style="color:#F286C4;">!&lt;/</span><span style="color:#F6F6F4;">h1</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> React </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;react&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HelloProps</span><span style="color:#24292E;"> { </span><span style="color:#E36209;">compiler</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">; </span><span style="color:#E36209;">framework</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Hello</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">props</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HelloProps</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> &lt;</span><span style="color:#6F42C1;">h1</span><span style="color:#24292E;">&gt;Hello from {props.compiler} and {props.framework}</span><span style="color:#D73A49;">!&lt;/</span><span style="color:#24292E;">h1</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">;</span></span></code></pre></div><p>注意这个例子使用了<a href="https://reactjs.org/docs/components-and-props.html#functional-and-class-components" target="_blank" rel="noreferrer">函数组件</a>，我们可以让它更像一点_类_。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">as</span><span style="color:#F6F6F4;"> React </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">react</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">HelloProps</span><span style="color:#F6F6F4;"> { compiler</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">; framework</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// &#39;HelloProps&#39; describes the shape of props.</span></span>
<span class="line"><span style="color:#7B7F8B;">// State is never set so we use the &#39;{}&#39; type.</span></span>
<span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Hello</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">React</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">Component</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">HelloProps</span><span style="color:#F6F6F4;">, {}&gt; {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">render</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> &lt;</span><span style="color:#97E1F1;font-style:italic;">h1</span><span style="color:#F6F6F4;">&gt;Hello from {this.props.compiler} and {this.props.framework}</span><span style="color:#F286C4;">!&lt;/</span><span style="color:#F6F6F4;">h1</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> React </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;react&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HelloProps</span><span style="color:#24292E;"> { </span><span style="color:#E36209;">compiler</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">; </span><span style="color:#E36209;">framework</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// &#39;HelloProps&#39; describes the shape of props.</span></span>
<span class="line"><span style="color:#6A737D;">// State is never set so we use the &#39;{}&#39; type.</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Hello</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">React</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Component</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">HelloProps</span><span style="color:#24292E;">, {}&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> &lt;</span><span style="color:#6F42C1;">h1</span><span style="color:#24292E;">&gt;Hello from {this.props.compiler} and {this.props.framework}</span><span style="color:#D73A49;">!&lt;/</span><span style="color:#24292E;">h1</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>接下来，在<code>src</code>下创建<code>index.tsx</code>文件，源码如下：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">as</span><span style="color:#F6F6F4;"> React </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">react</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">as</span><span style="color:#F6F6F4;"> ReactDOM </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">react-dom</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { Hello } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">./components/Hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">ReactDOM.</span><span style="color:#62E884;">render</span><span style="color:#F6F6F4;">(</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">Hello compiler</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">TypeScript</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> framework</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">React</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">/&gt;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">    document.</span><span style="color:#62E884;">getElementById</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">example</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> React </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;react&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> ReactDOM </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;react-dom&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { Hello } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./components/Hello&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">ReactDOM.</span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Hello compiler</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;TypeScript&quot;</span><span style="color:#24292E;"> framework</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;React&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/&gt;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;example&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><p>我们仅仅将<code>Hello</code>组件导入<code>index.tsx</code>。 注意，不同于<code>&quot;react&quot;</code>或<code>&quot;react-dom&quot;</code>，我们使用<code>Hello.tsx</code>的_相对路径_ - 这很重要。 如果不这样做，TypeScript只会尝试在<code>node_modules</code>文件夹里查找。</p><p>我们还需要一个页面来显示<code>Hello</code>组件。 在根目录<code>proj</code>创建一个名为<code>index.html</code>的文件，如下：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">&lt;!DOCTYPE html&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">&lt;html&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;head&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">        &lt;meta charset=&quot;UTF-8&quot; /&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">        &lt;title&gt;Hello React!&lt;/title&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;/head&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;body&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">        &lt;div id=&quot;example&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">        &lt;!-- Dependencies --&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">        &lt;script src=&quot;./node_modules/react/umd/react.development.js&quot;&gt;&lt;/script&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">        &lt;script src=&quot;./node_modules/react-dom/umd/react-dom.development.js&quot;&gt;&lt;/script&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">        &lt;!-- Main --&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">        &lt;script src=&quot;./dist/main.js&quot;&gt;&lt;/script&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;/body&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">&lt;/html&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;!DOCTYPE html&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;html&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;head&gt;</span></span>
<span class="line"><span style="color:#24292e;">        &lt;meta charset=&quot;UTF-8&quot; /&gt;</span></span>
<span class="line"><span style="color:#24292e;">        &lt;title&gt;Hello React!&lt;/title&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;/head&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;body&gt;</span></span>
<span class="line"><span style="color:#24292e;">        &lt;div id=&quot;example&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">        &lt;!-- Dependencies --&gt;</span></span>
<span class="line"><span style="color:#24292e;">        &lt;script src=&quot;./node_modules/react/umd/react.development.js&quot;&gt;&lt;/script&gt;</span></span>
<span class="line"><span style="color:#24292e;">        &lt;script src=&quot;./node_modules/react-dom/umd/react-dom.development.js&quot;&gt;&lt;/script&gt;</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">        &lt;!-- Main --&gt;</span></span>
<span class="line"><span style="color:#24292e;">        &lt;script src=&quot;./dist/main.js&quot;&gt;&lt;/script&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;/body&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;/html&gt;</span></span></code></pre></div><p>需要注意一点我们是从<code>node_modules</code>引入的文件。 React和React-DOM的npm包里包含了独立的<code>.js</code>文件，你可以在页面上引入它们，这里我们为了快捷就直接引用了。 可以随意地将它们拷贝到其它目录下，或者从CDN上引用。 Facebook在CND上提供了一系列可用的React版本，你可以在这里查看<a href="http://facebook.github.io/react/downloads.html#development-vs.-production-builds" target="_blank" rel="noreferrer">更多内容</a>。</p><h2 id="创建一个webpack配置文件" tabindex="-1">创建一个webpack配置文件 <a class="header-anchor" href="#创建一个webpack配置文件" aria-label="Permalink to &quot;创建一个webpack配置文件&quot;">​</a></h2><p>在工程根目录下创建一个<code>webpack.config.js</code>文件。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">module</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">exports</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    mode</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">production</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// Enable sourcemaps for debugging webpack&#39;s output.</span></span>
<span class="line"><span style="color:#F6F6F4;">    devtool</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">source-map</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    resolve</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// Add &#39;.ts&#39; and &#39;.tsx&#39; as resolvable extensions.</span></span>
<span class="line"><span style="color:#F6F6F4;">        extensions</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">.ts</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">.tsx</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">]</span></span>
<span class="line"><span style="color:#F6F6F4;">    },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    module</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        rules</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span></span>
<span class="line"><span style="color:#F6F6F4;">            {</span></span>
<span class="line"><span style="color:#F6F6F4;">                test</span><span style="color:#F286C4;">:</span><span style="color:#E7EE98;"> </span><span style="color:#EE6666;">/</span><span style="color:#E7EE98;">\\.ts</span><span style="color:#FFB86C;">(</span><span style="color:#E7EE98;">x</span><span style="color:#F286C4;">?</span><span style="color:#FFB86C;">)</span><span style="color:#F286C4;">$</span><span style="color:#EE6666;">/</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">                exclude</span><span style="color:#F286C4;">:</span><span style="color:#E7EE98;"> </span><span style="color:#EE6666;">/</span><span style="color:#E7EE98;">node_modules</span><span style="color:#EE6666;">/</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">                use</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span></span>
<span class="line"><span style="color:#F6F6F4;">                    {</span></span>
<span class="line"><span style="color:#F6F6F4;">                        loader</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">ts-loader</span><span style="color:#DEE492;">&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">                    }</span></span>
<span class="line"><span style="color:#F6F6F4;">                ]</span></span>
<span class="line"><span style="color:#F6F6F4;">            },</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// All output &#39;.js&#39; files will have any sourcemaps re-processed by &#39;source-map-loader&#39;.</span></span>
<span class="line"><span style="color:#F6F6F4;">            {</span></span>
<span class="line"><span style="color:#F6F6F4;">                enforce</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">pre</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">                test</span><span style="color:#F286C4;">:</span><span style="color:#E7EE98;"> </span><span style="color:#EE6666;">/</span><span style="color:#E7EE98;">\\.js</span><span style="color:#F286C4;">$</span><span style="color:#EE6666;">/</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">                loader</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">source-map-loader</span><span style="color:#DEE492;">&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        ]</span></span>
<span class="line"><span style="color:#F6F6F4;">    },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// When importing a module whose path matches one of the following, just</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// assume a corresponding global variable exists and use that instead.</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// This is important because it allows us to avoid bundling all of our</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// dependencies, which allows browsers to cache those libraries between builds.</span></span>
<span class="line"><span style="color:#F6F6F4;">    externals</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">react</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">React</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">react-dom</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">ReactDOM</span><span style="color:#DEE492;">&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    mode: </span><span style="color:#032F62;">&quot;production&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Enable sourcemaps for debugging webpack&#39;s output.</span></span>
<span class="line"><span style="color:#24292E;">    devtool: </span><span style="color:#032F62;">&quot;source-map&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    resolve: {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Add &#39;.ts&#39; and &#39;.tsx&#39; as resolvable extensions.</span></span>
<span class="line"><span style="color:#24292E;">        extensions: [</span><span style="color:#032F62;">&quot;.ts&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;.tsx&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    module: {</span></span>
<span class="line"><span style="color:#24292E;">        rules: [</span></span>
<span class="line"><span style="color:#24292E;">            {</span></span>
<span class="line"><span style="color:#24292E;">                test:</span><span style="color:#032F62;"> /</span><span style="color:#22863A;font-weight:bold;">\\.</span><span style="color:#032F62;">ts(x</span><span style="color:#D73A49;">?</span><span style="color:#032F62;">)</span><span style="color:#D73A49;">$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                exclude:</span><span style="color:#032F62;"> /node_modules/</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                use: [</span></span>
<span class="line"><span style="color:#24292E;">                    {</span></span>
<span class="line"><span style="color:#24292E;">                        loader: </span><span style="color:#032F62;">&quot;ts-loader&quot;</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                ]</span></span>
<span class="line"><span style="color:#24292E;">            },</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// All output &#39;.js&#39; files will have any sourcemaps re-processed by &#39;source-map-loader&#39;.</span></span>
<span class="line"><span style="color:#24292E;">            {</span></span>
<span class="line"><span style="color:#24292E;">                enforce: </span><span style="color:#032F62;">&quot;pre&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                test:</span><span style="color:#032F62;"> /</span><span style="color:#22863A;font-weight:bold;">\\.</span><span style="color:#032F62;">js</span><span style="color:#D73A49;">$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                loader: </span><span style="color:#032F62;">&quot;source-map-loader&quot;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        ]</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// When importing a module whose path matches one of the following, just</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// assume a corresponding global variable exists and use that instead.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// This is important because it allows us to avoid bundling all of our</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// dependencies, which allows browsers to cache those libraries between builds.</span></span>
<span class="line"><span style="color:#24292E;">    externals: {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;react&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;React&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;react-dom&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;ReactDOM&quot;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>大家可能对<code>externals</code>字段有所疑惑。 我们想要避免把所有的React都放到一个文件里，因为会增加编译时间并且浏览器还能够缓存没有发生改变的库文件。</p><p>理想情况下，我们只需要在浏览器里引入React模块，但是大部分浏览器还没有支持模块。 因此大部分代码库会把自己包裹在一个单独的全局变量内，比如：<code>jQuery</code>或<code>_</code>。 这叫做“命名空间”模式，webpack也允许我们继续使用通过这种方式写的代码库。 通过我们的设置<code>&quot;react&quot;: &quot;React&quot;</code>，webpack会神奇地将所有对<code>&quot;react&quot;</code>的导入转换成从<code>React</code>全局变量中加载。</p><p>你可以在<a href="https://webpack.js.org/concepts" target="_blank" rel="noreferrer">这里</a>了解更多如何配置webpack。</p><h2 id="整合在一起" tabindex="-1">整合在一起 <a class="header-anchor" href="#整合在一起" aria-label="Permalink to &quot;整合在一起&quot;">​</a></h2><p>执行：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">npx webpack</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">npx webpack</span></span></code></pre></div><p>在浏览器里打开<code>index.html</code>，工程应该已经可以用了！ 你可以看到页面上显示着“Hello from TypeScript and React!”</p>`,56),e=[o];function t(c,r,y,i,F,d){return a(),n("div",null,e)}const f=s(l,[["render",t]]);export{u as __pageData,f as default};
