import{_ as s,o,c as e,V as l}from"./chunks/framework.ced88878.js";const f=JSON.parse('{"title":"模块解析","description":"","frontmatter":{},"headers":[],"relativePath":"zh/reference/Module Resolution.md","lastUpdated":1682670826000}'),a={name:"zh/reference/Module Resolution.md"},n=l(`<h1 id="模块解析" tabindex="-1">模块解析 <a class="header-anchor" href="#模块解析" aria-label="Permalink to &quot;模块解析&quot;">​</a></h1><blockquote><p>这节假设你已经了解了模块的一些基本知识 请阅读<a href="./modules">模块</a>文档了解更多信息。</p></blockquote><p>_模块解析_是指编译器在查找导入模块内容时所遵循的流程。 假设有一个导入语句<code>import { a } from &quot;moduleA&quot;</code>; 为了去检查任何对<code>a</code>的使用，编译器需要准确的知道它表示什么，并且需要检查它的定义<code>moduleA</code>。</p><p>这时候，编译器会有个疑问“<code>moduleA</code>的结构是怎样的？” 这听上去很简单，但<code>moduleA</code>可能在你写的某个<code>.ts</code>/<code>.tsx</code>文件里或者在你的代码所依赖的<code>.d.ts</code>里。</p><p>首先，编译器会尝试定位表示导入模块的文件。 编译器会遵循以下二种策略之一：<a href="./module-resolution#classic">Classic</a>或<a href="./module-resolution#node">Node</a>。 这些策略会告诉编译器到_哪里_去查找<code>moduleA</code>。</p><p>如果上面的解析失败了并且模块名是非相对的（且是在<code>&quot;moduleA&quot;</code>的情况下），编译器会尝试定位一个<a href="./modules#ambient-modules">外部模块声明</a>。 我们接下来会讲到非相对导入。</p><p>最后，如果编译器还是不能解析这个模块，它会记录一个错误。 在这种情况下，错误可能为<code>error TS2307: Cannot find module &#39;moduleA&#39;.</code></p><h2 id="相对-vs-非相对模块导入" tabindex="-1">相对 vs. 非相对模块导入 <a class="header-anchor" href="#相对-vs-非相对模块导入" aria-label="Permalink to &quot;相对 vs. 非相对模块导入&quot;">​</a></h2><p>根据模块引用是相对的还是非相对的，模块导入会以不同的方式解析。</p><p>_相对导入_是以<code>/</code>，<code>./</code>或<code>../</code>开头的。 下面是一些例子：</p><ul><li><code>import Entry from &quot;./components/Entry&quot;;</code></li><li><code>import { DefaultHeaders } from &quot;../constants/http&quot;;</code></li><li><code>import &quot;/mod&quot;;</code></li></ul><p>所有其它形式的导入被当作_非相对_的。 下面是一些例子：</p><ul><li><code>import * as $ from &quot;jQuery&quot;;</code></li><li><code>import { Component } from &quot;@angular/core&quot;;</code></li></ul><p>相对导入在解析时是相对于导入它的文件，并且_不能_解析为一个外部模块声明。 你应该为你自己写的模块使用相对导入，这样能确保它们在运行时的相对位置。</p><p>非相对模块的导入可以相对于<code>baseUrl</code>或通过下文会讲到的路径映射来进行解析。 它们还可以被解析成<a href="./modules#ambient-modules">外部模块声明</a>。 使用非相对路径来导入你的外部依赖。</p><h2 id="模块解析策略" tabindex="-1">模块解析策略 <a class="header-anchor" href="#模块解析策略" aria-label="Permalink to &quot;模块解析策略&quot;">​</a></h2><p>共有两种可用的模块解析策略：<a href="./module-resolution#node">Node</a>和<a href="./module-resolution#classic">Classic</a>。 你可以使用<code>--moduleResolution</code>标记来指定使用哪种模块解析策略。 若未指定，那么在使用了<code>--module AMD | System | ES2015</code>时的默认值为<a href="./module-resolution#classic">Classic</a>，其它情况时则为<a href="./module-resolution#node">Node</a>。</p><h3 id="classic" tabindex="-1">Classic <a class="header-anchor" href="#classic" aria-label="Permalink to &quot;Classic&quot;">​</a></h3><p>这种策略在以前是TypeScript默认的解析策略。 现在，它存在的理由主要是为了向后兼容。</p><p>相对导入的模块是相对于导入它的文件进行解析的。 因此<code>/root/src/folder/A.ts</code>文件里的<code>import { b } from &quot;./moduleB&quot;</code>会使用下面的查找流程：</p><ol><li><code>/root/src/folder/moduleB.ts</code></li><li><code>/root/src/folder/moduleB.d.ts</code></li></ol><p>对于非相对模块的导入，编译器则会从包含导入文件的目录开始依次向上级目录遍历，尝试定位匹配的声明文件。</p><p>比如：</p><p>有一个对<code>moduleB</code>的非相对导入<code>import { b } from &quot;moduleB&quot;</code>，它是在<code>/root/src/folder/A.ts</code>文件里，会以如下的方式来定位<code>&quot;moduleB&quot;</code>：</p><ol><li><code>/root/src/folder/moduleB.ts</code></li><li><code>/root/src/folder/moduleB.d.ts</code></li><li><code>/root/src/moduleB.ts</code></li><li><code>/root/src/moduleB.d.ts</code></li><li><code>/root/moduleB.ts</code></li><li><code>/root/moduleB.d.ts</code></li><li><code>/moduleB.ts</code></li><li><code>/moduleB.d.ts</code></li></ol><h3 id="node" tabindex="-1">Node <a class="header-anchor" href="#node" aria-label="Permalink to &quot;Node&quot;">​</a></h3><p>这个解析策略试图在运行时模仿<a href="https://nodejs.org/" target="_blank" rel="noreferrer">Node.js</a>模块解析机制。 完整的Node.js解析算法可以在<a href="https://nodejs.org/api/modules.html#modules_all_together" target="_blank" rel="noreferrer">Node.js module documentation</a>找到。</p><h4 id="node-js如何解析模块" tabindex="-1">Node.js如何解析模块 <a class="header-anchor" href="#node-js如何解析模块" aria-label="Permalink to &quot;Node.js如何解析模块&quot;">​</a></h4><p>为了理解TypeScript编译依照的解析步骤，先弄明白Node.js模块是非常重要的。 通常，在Node.js里导入是通过<code>require</code>函数调用进行的。 Node.js会根据<code>require</code>的是相对路径还是非相对路径做出不同的行为。</p><p>相对路径很简单。 例如，假设有一个文件路径为<code>/root/src/moduleA.js</code>，包含了一个导入<code>var x = require(&quot;./moduleB&quot;);</code> Node.js以下面的顺序解析这个导入：</p><ol><li>检查<code>/root/src/moduleB.js</code>文件是否存在。</li><li>检查<code>/root/src/moduleB</code>目录是否包含一个<code>package.json</code>文件，且<code>package.json</code>文件指定了一个<code>&quot;main&quot;</code>模块。 在我们的例子里，如果Node.js发现文件<code>/root/src/moduleB/package.json</code>包含了<code>{ &quot;main&quot;: &quot;lib/mainModule.js&quot; }</code>，那么Node.js会引用<code>/root/src/moduleB/lib/mainModule.js</code>。</li><li>检查<code>/root/src/moduleB</code>目录是否包含一个<code>index.js</code>文件。 这个文件会被隐式地当作那个文件夹下的&quot;main&quot;模块。</li></ol><p>你可以阅读Node.js文档了解更多详细信息：<a href="https://nodejs.org/api/modules.html#modules_file_modules" target="_blank" rel="noreferrer">file modules</a> 和 <a href="https://nodejs.org/api/modules.html#modules_folders_as_modules" target="_blank" rel="noreferrer">folder modules</a>。</p><p>但是，<a href="./module-resolution#relative-vs-non-relative-module-imports">非相对模块名</a>的解析是个完全不同的过程。 Node会在一个特殊的文件夹<code>node_modules</code>里查找你的模块。 <code>node_modules</code>可能与当前文件在同一级目录下，或者在上层目录里。 Node会向上级目录遍历，查找每个<code>node_modules</code>直到它找到要加载的模块。</p><p>还是用上面例子，但假设<code>/root/src/moduleA.js</code>里使用的是非相对路径导入<code>var x = require(&quot;moduleB&quot;);</code>。 Node则会以下面的顺序去解析<code>moduleB</code>，直到有一个匹配上。</p><ol><li><code>/root/src/node_modules/moduleB.js</code></li><li><code>/root/src/node_modules/moduleB/package.json</code> (如果指定了<code>&quot;main&quot;</code>属性)</li><li><code>/root/src/node_modules/moduleB/index.js</code></li><li><code>/root/node_modules/moduleB.js</code></li><li><code>/root/node_modules/moduleB/package.json</code> (如果指定了<code>&quot;main&quot;</code>属性)</li><li><code>/root/node_modules/moduleB/index.js</code></li><li><code>/node_modules/moduleB.js</code></li><li><code>/node_modules/moduleB/package.json</code> (如果指定了<code>&quot;main&quot;</code>属性)</li><li><code>/node_modules/moduleB/index.js</code></li></ol><p>注意Node.js在步骤（4）和（7）会向上跳一级目录。</p><p>你可以阅读Node.js文档了解更多详细信息：<a href="https://nodejs.org/api/modules.html#modules_loading_from_node_modules_folders" target="_blank" rel="noreferrer">loading modules from <code>node_modules</code></a>。</p><h4 id="typescript如何解析模块" tabindex="-1">TypeScript如何解析模块 <a class="header-anchor" href="#typescript如何解析模块" aria-label="Permalink to &quot;TypeScript如何解析模块&quot;">​</a></h4><p>TypeScript是模仿Node.js运行时的解析策略来在编译阶段定位模块定义文件。 因此，TypeScript在Node解析逻辑基础上增加了TypeScript源文件的扩展名（<code>.ts</code>，<code>.tsx</code>和<code>.d.ts</code>）。 同时，TypeScript在<code>package.json</code>里使用字段<code>&quot;types&quot;</code>来表示类似<code>&quot;main&quot;</code>的意义 - 编译器会使用它来找到要使用的&quot;main&quot;定义文件。</p><p>比如，有一个导入语句<code>import { b } from &quot;./moduleB&quot;</code>在<code>/root/src/moduleA.ts</code>里，会以下面的流程来定位<code>&quot;./moduleB&quot;</code>：</p><ol><li><code>/root/src/moduleB.ts</code></li><li><code>/root/src/moduleB.tsx</code></li><li><code>/root/src/moduleB.d.ts</code></li><li><code>/root/src/moduleB/package.json</code> (如果指定了<code>&quot;types&quot;</code>属性)</li><li><code>/root/src/moduleB/index.ts</code></li><li><code>/root/src/moduleB/index.tsx</code></li><li><code>/root/src/moduleB/index.d.ts</code></li></ol><p>回想一下Node.js先查找<code>moduleB.js</code>文件，然后是合适的<code>package.json</code>，再之后是<code>index.js</code>。</p><p>类似地，非相对的导入会遵循Node.js的解析逻辑，首先查找文件，然后是合适的文件夹。 因此<code>/root/src/moduleA.ts</code>文件里的<code>import { b } from &quot;moduleB&quot;</code>会以下面的查找顺序解析：</p><ol><li><code>/root/src/node_modules/moduleB.ts</code></li><li><code>/root/src/node_modules/moduleB.tsx</code></li><li><code>/root/src/node_modules/moduleB.d.ts</code></li><li><code>/root/src/node_modules/moduleB/package.json</code> (如果指定了<code>&quot;types&quot;</code>属性)</li><li><code>/root/src/node_modules/@types/moduleB.d.ts</code></li><li><code>/root/src/node_modules/moduleB/index.ts</code></li><li><code>/root/src/node_modules/moduleB/index.tsx</code></li><li><code>/root/src/node_modules/moduleB/index.d.ts</code></li><li><code>/root/node_modules/moduleB.ts</code></li><li><code>/root/node_modules/moduleB.tsx</code></li><li><code>/root/node_modules/moduleB.d.ts</code></li><li><code>/root/node_modules/moduleB/package.json</code> (如果指定了<code>&quot;types&quot;</code>属性)</li><li><code>/root/node_modules/@types/moduleB.d.ts</code></li><li><code>/root/node_modules/moduleB/index.ts</code></li><li><code>/root/node_modules/moduleB/index.tsx</code></li><li><code>/root/node_modules/moduleB/index.d.ts</code></li><li><code>/node_modules/moduleB.ts</code></li><li><code>/node_modules/moduleB.tsx</code></li><li><code>/node_modules/moduleB.d.ts</code></li><li><code>/node_modules/moduleB/package.json</code> (如果指定了<code>&quot;types&quot;</code>属性)</li><li><code>/node_modules/@types/moduleB.d.ts</code></li><li><code>/node_modules/moduleB/index.ts</code></li><li><code>/node_modules/moduleB/index.tsx</code></li><li><code>/node_modules/moduleB/index.d.ts</code></li></ol><p>不要被这里步骤的数量吓到 - TypeScript只是在步骤（9）和（17）向上跳了两次目录。 这并不比Node.js里的流程复杂。</p><h2 id="附加的模块解析标记" tabindex="-1">附加的模块解析标记 <a class="header-anchor" href="#附加的模块解析标记" aria-label="Permalink to &quot;附加的模块解析标记&quot;">​</a></h2><p>有时工程源码结构与输出结构不同。 通常是要经过一系统的构建步骤最后生成输出。 它们包括将<code>.ts</code>编译成<code>.js</code>，将不同位置的依赖拷贝至一个输出位置。 最终结果就是运行时的模块名与包含它们声明的源文件里的模块名不同。 或者最终输出文件里的模块路径与编译时的源文件路径不同了。</p><p>TypeScript编译器有一些额外的标记用来_通知_编译器在源码编译成最终输出的过程中都发生了哪个转换。</p><p>有一点要特别注意的是编译器_不会_进行这些转换操作； 它只是利用这些信息来指导模块的导入。</p><h3 id="base-url" tabindex="-1">Base URL <a class="header-anchor" href="#base-url" aria-label="Permalink to &quot;Base URL&quot;">​</a></h3><p>在利用AMD模块加载器的应用里使用<code>baseUrl</code>是常见做法，它要求在运行时模块都被放到了一个文件夹里。 这些模块的源码可以在不同的目录下，但是构建脚本会将它们集中到一起。</p><p>设置<code>baseUrl</code>来告诉编译器到哪里去查找模块。 所有非相对模块导入都会被当做相对于<code>baseUrl</code>。</p><p>_baseUrl_的值由以下两者之一决定：</p><ul><li>命令行中_baseUrl_的值（如果给定的路径是相对的，那么将相对于当前路径进行计算）</li><li>‘tsconfig.json’里的_baseUrl_属性（如果给定的路径是相对的，那么将相对于‘tsconfig.json’路径进行计算）</li></ul><p>注意相对模块的导入不会被设置的<code>baseUrl</code>所影响，因为它们总是相对于导入它们的文件。</p><p>阅读更多关于<code>baseUrl</code>的信息<a href="http://requirejs.org/docs/api.html#config-baseUrl" target="_blank" rel="noreferrer">RequireJS</a>和<a href="https://github.com/systemjs/systemjs/blob/master/docs/config-api.md#baseurl" target="_blank" rel="noreferrer">SystemJS</a>。</p><h3 id="路径映射" tabindex="-1">路径映射 <a class="header-anchor" href="#路径映射" aria-label="Permalink to &quot;路径映射&quot;">​</a></h3><p>有时模块不是直接放在_baseUrl_下面。 比如，充分<code>&quot;jquery&quot;</code>模块地导入，在运行时可能被解释为<code>&quot;node_modules/jquery/dist/jquery.slim.min.js&quot;</code>。 加载器使用映射配置来将模块名映射到运行时的文件，查看<a href="http://requirejs.org/docs/api.html#config-paths" target="_blank" rel="noreferrer">RequireJs documentation</a>和<a href="https://github.com/systemjs/systemjs/blob/master/docs/config-api.md#paths" target="_blank" rel="noreferrer">SystemJS documentation</a>。</p><p>TypeScript编译器通过使用<code>tsconfig.json</code>文件里的<code>&quot;paths&quot;</code>来支持这样的声明映射。 下面是一个如何指定<code>jquery</code>的<code>&quot;paths&quot;</code>的例子。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">compilerOptions</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">: {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">baseUrl</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">.</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#7B7F8B;">// This must be specified if &quot;paths&quot; is.</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">paths</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">jquery</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">node_modules/jquery/dist/jquery</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">] </span><span style="color:#7B7F8B;">// 此处映射是相对于&quot;baseUrl&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;baseUrl&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;.&quot;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// This must be specified if &quot;paths&quot; is.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;paths&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;jquery&quot;</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;node_modules/jquery/dist/jquery&quot;</span><span style="color:#24292E;">] </span><span style="color:#6A737D;">// 此处映射是相对于&quot;baseUrl&quot;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>请注意<code>&quot;paths&quot;</code>是相对于<code>&quot;baseUrl&quot;</code>进行解析。 如果<code>&quot;baseUrl&quot;</code>被设置成了除<code>&quot;.&quot;</code>外的其它值，比如<code>tsconfig.json</code>所在的目录，那么映射必须要做相应的改变。 如果你在上例中设置了<code>&quot;baseUrl&quot;: &quot;./src&quot;</code>，那么jquery应该映射到<code>&quot;../node_modules/jquery/dist/jquery&quot;</code>。</p><p>通过<code>&quot;paths&quot;</code>我们还可以指定复杂的映射，包括指定多个回退位置。 假设在一个工程配置里，有一些模块位于一处，而其它的则在另个的位置。 构建过程会将它们集中至一处。 工程结构可能如下：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">projectRoot</span></span>
<span class="line"><span style="color:#f6f6f4;">├── folder1</span></span>
<span class="line"><span style="color:#f6f6f4;">│   ├── file1.ts (imports &#39;folder1/file2&#39; and &#39;folder2/file3&#39;)</span></span>
<span class="line"><span style="color:#f6f6f4;">│   └── file2.ts</span></span>
<span class="line"><span style="color:#f6f6f4;">├── generated</span></span>
<span class="line"><span style="color:#f6f6f4;">│   ├── folder1</span></span>
<span class="line"><span style="color:#f6f6f4;">│   └── folder2</span></span>
<span class="line"><span style="color:#f6f6f4;">│       └── file3.ts</span></span>
<span class="line"><span style="color:#f6f6f4;">└── tsconfig.json</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">projectRoot</span></span>
<span class="line"><span style="color:#24292e;">├── folder1</span></span>
<span class="line"><span style="color:#24292e;">│   ├── file1.ts (imports &#39;folder1/file2&#39; and &#39;folder2/file3&#39;)</span></span>
<span class="line"><span style="color:#24292e;">│   └── file2.ts</span></span>
<span class="line"><span style="color:#24292e;">├── generated</span></span>
<span class="line"><span style="color:#24292e;">│   ├── folder1</span></span>
<span class="line"><span style="color:#24292e;">│   └── folder2</span></span>
<span class="line"><span style="color:#24292e;">│       └── file3.ts</span></span>
<span class="line"><span style="color:#24292e;">└── tsconfig.json</span></span></code></pre></div><p>相应的<code>tsconfig.json</code>文件如下：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">compilerOptions</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">: {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">baseUrl</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">.</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">paths</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">*</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">*</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">generated/*</span><span style="color:#DEE492;">&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">      ]</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;baseUrl&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;.&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;paths&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;*&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;*&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;generated/*&quot;</span></span>
<span class="line"><span style="color:#24292E;">      ]</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>它告诉编译器所有匹配<code>&quot;*&quot;</code>（所有的值）模式的模块导入会在以下两个位置查找：</p><ol><li><code>&quot;*&quot;</code>： 表示名字不发生改变，所以映射为<code>&lt;moduleName&gt;</code> =&gt; <code>&lt;baseUrl&gt;/&lt;moduleName&gt;</code></li><li><code>&quot;generated/*&quot;</code>表示模块名添加了“generated”前缀，所以映射为<code>&lt;moduleName&gt;</code> =&gt; <code>&lt;baseUrl&gt;/generated/&lt;moduleName&gt;</code></li></ol><p>按照这个逻辑，编译器将会如下尝试解析这两个导入：</p><ul><li>导入&#39;folder1/file2&#39; <ol><li>匹配&#39;*&#39;模式且通配符捕获到整个名字。</li><li>尝试列表里的第一个替换：&#39;*&#39; -&gt; <code>folder1/file2</code>。</li><li>替换结果为非相对名 - 与_baseUrl_合并 -&gt; <code>projectRoot/folder1/file2.ts</code>。</li><li>文件存在。完成。</li></ol></li><li>导入&#39;folder2/file3&#39; <ol><li>匹配&#39;*&#39;模式且通配符捕获到整个名字。</li><li>尝试列表里的第一个替换：&#39;*&#39; -&gt; <code>folder2/file3</code>。</li><li>替换结果为非相对名 - 与_baseUrl_合并 -&gt; <code>projectRoot/folder2/file3.ts</code>。</li><li>文件不存在，跳到第二个替换。</li><li>第二个替换：&#39;generated/*&#39; -&gt; <code>generated/folder2/file3</code>。</li><li>替换结果为非相对名 - 与_baseUrl_合并 -&gt; <code>projectRoot/generated/folder2/file3.ts</code>。</li><li>文件存在。完成。</li></ol></li></ul><h3 id="利用rootdirs指定虚拟目录" tabindex="-1">利用<code>rootDirs</code>指定虚拟目录 <a class="header-anchor" href="#利用rootdirs指定虚拟目录" aria-label="Permalink to &quot;利用\`rootDirs\`指定虚拟目录&quot;">​</a></h3><p>有时多个目录下的工程源文件在编译时会进行合并放在某个输出目录下。 这可以看做一些源目录创建了一个“虚拟”目录。</p><p>利用<code>rootDirs</code>，可以告诉编译器生成这个虚拟目录的_roots_； 因此编译器可以在“虚拟”目录下解析相对模块导入，就_好像_它们被合并在了一起一样。</p><p>比如，有下面的工程结构：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">src</span></span>
<span class="line"><span style="color:#f6f6f4;"> └── views</span></span>
<span class="line"><span style="color:#f6f6f4;">     └── view1.ts (imports &#39;./template1&#39;)</span></span>
<span class="line"><span style="color:#f6f6f4;">     └── view2.ts</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;"> generated</span></span>
<span class="line"><span style="color:#f6f6f4;"> └── templates</span></span>
<span class="line"><span style="color:#f6f6f4;">         └── views</span></span>
<span class="line"><span style="color:#f6f6f4;">             └── template1.ts (imports &#39;./view2&#39;)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">src</span></span>
<span class="line"><span style="color:#24292e;"> └── views</span></span>
<span class="line"><span style="color:#24292e;">     └── view1.ts (imports &#39;./template1&#39;)</span></span>
<span class="line"><span style="color:#24292e;">     └── view2.ts</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;"> generated</span></span>
<span class="line"><span style="color:#24292e;"> └── templates</span></span>
<span class="line"><span style="color:#24292e;">         └── views</span></span>
<span class="line"><span style="color:#24292e;">             └── template1.ts (imports &#39;./view2&#39;)</span></span></code></pre></div><p><code>src/views</code>里的文件是用于控制UI的用户代码。 <code>generated/templates</code>是UI模版，在构建时通过模版生成器自动生成。 构建中的一步会将<code>/src/views</code>和<code>/generated/templates/views</code>的输出拷贝到同一个目录下。 在运行时，视图可以假设它的模版与它同在一个目录下，因此可以使用相对导入<code>&quot;./template&quot;</code>。</p><p>可以使用<code>&quot;rootDirs&quot;</code>来告诉编译器。 <code>&quot;rootDirs&quot;</code>指定了一个_roots_列表，列表里的内容会在运行时被合并。 因此，针对这个例子，<code>tsconfig.json</code>如下：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">compilerOptions</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">: {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">rootDirs</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">src/views</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">generated/templates/views</span><span style="color:#DEE492;">&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">    ]</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;rootDirs&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;src/views&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;generated/templates/views&quot;</span></span>
<span class="line"><span style="color:#24292E;">    ]</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>每当编译器在某一<code>rootDirs</code>的子目录下发现了相对模块导入，它就会尝试从每一个<code>rootDirs</code>中导入。</p><p><code>rootDirs</code>的灵活性不仅仅局限于其指定了要在逻辑上合并的物理目录列表。它提供的数组可以包含任意数量的任何名字的目录，不论它们是否存在。这允许编译器以类型安全的方式处理复杂捆绑(bundles)和运行时的特性，比如条件引入和工程特定的加载器插件。</p><p>设想这样一个国际化的场景，构建工具自动插入特定的路径记号来生成针对不同区域的捆绑，比如将<code>#{locale}</code>做为相对模块路径<code>./#{locale}/messages</code>的一部分。在这个假定的设置下，工具会枚举支持的区域，将抽像的路径映射成<code>./zh/messages</code>，<code>./de/messages</code>等。</p><p>假设每个模块都会导出一个字符串的数组。比如<code>./zh/messages</code>可能包含：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">default</span><span style="color:#F6F6F4;"> [</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">您好吗</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">很高兴认识你</span><span style="color:#DEE492;">&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">];</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;您好吗&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;很高兴认识你&quot;</span></span>
<span class="line"><span style="color:#24292E;">];</span></span></code></pre></div><p>利用<code>rootDirs</code>我们可以让编译器了解这个映射关系，从而也允许编译器能够安全地解析<code>./#{locale}/messages</code>，就算这个目录永远都不存在。比如，使用下面的<code>tsconfig.json</code>：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">compilerOptions</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">: {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">rootDirs</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">src/zh</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">src/de</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">src/#{locale}</span><span style="color:#DEE492;">&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">    ]</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;rootDirs&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;src/zh&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;src/de&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;src/#{locale}&quot;</span></span>
<span class="line"><span style="color:#24292E;">    ]</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>编译器现在可以将<code>import messages from &#39;./#{locale}/messages&#39;</code>解析为<code>import messages from &#39;./zh/messages&#39;</code>用做工具支持的目的，并允许在开发时不必了解区域信息。</p><h2 id="跟踪模块解析" tabindex="-1">跟踪模块解析 <a class="header-anchor" href="#跟踪模块解析" aria-label="Permalink to &quot;跟踪模块解析&quot;">​</a></h2><p>如之前讨论，编译器在解析模块时可能访问当前文件夹外的文件。 这会导致很难诊断模块为什么没有被解析，或解析到了错误的位置。 通过<code>--traceResolution</code>启用编译器的模块解析跟踪，它会告诉我们在模块解析过程中发生了什么。</p><p>假设我们有一个使用了<code>typescript</code>模块的简单应用。 <code>app.ts</code>里有一个这样的导入<code>import * as ts from &quot;typescript&quot;</code>。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">│   tsconfig.json</span></span>
<span class="line"><span style="color:#f6f6f4;">├───node_modules</span></span>
<span class="line"><span style="color:#f6f6f4;">│   └───typescript</span></span>
<span class="line"><span style="color:#f6f6f4;">│       └───lib</span></span>
<span class="line"><span style="color:#f6f6f4;">│               typescript.d.ts</span></span>
<span class="line"><span style="color:#f6f6f4;">└───src</span></span>
<span class="line"><span style="color:#f6f6f4;">        app.ts</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">│   tsconfig.json</span></span>
<span class="line"><span style="color:#24292e;">├───node_modules</span></span>
<span class="line"><span style="color:#24292e;">│   └───typescript</span></span>
<span class="line"><span style="color:#24292e;">│       └───lib</span></span>
<span class="line"><span style="color:#24292e;">│               typescript.d.ts</span></span>
<span class="line"><span style="color:#24292e;">└───src</span></span>
<span class="line"><span style="color:#24292e;">        app.ts</span></span></code></pre></div><p>使用<code>--traceResolution</code>调用编译器。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">tsc --traceResolution</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">tsc --traceResolution</span></span></code></pre></div><p>输出结果如下：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">======== Resolving module &#39;typescript&#39; from &#39;src/app.ts&#39;. ========</span></span>
<span class="line"><span style="color:#f6f6f4;">Module resolution kind is not specified, using &#39;NodeJs&#39;.</span></span>
<span class="line"><span style="color:#f6f6f4;">Loading module &#39;typescript&#39; from &#39;node_modules&#39; folder.</span></span>
<span class="line"><span style="color:#f6f6f4;">File &#39;src/node_modules/typescript.ts&#39; does not exist.</span></span>
<span class="line"><span style="color:#f6f6f4;">File &#39;src/node_modules/typescript.tsx&#39; does not exist.</span></span>
<span class="line"><span style="color:#f6f6f4;">File &#39;src/node_modules/typescript.d.ts&#39; does not exist.</span></span>
<span class="line"><span style="color:#f6f6f4;">File &#39;src/node_modules/typescript/package.json&#39; does not exist.</span></span>
<span class="line"><span style="color:#f6f6f4;">File &#39;node_modules/typescript.ts&#39; does not exist.</span></span>
<span class="line"><span style="color:#f6f6f4;">File &#39;node_modules/typescript.tsx&#39; does not exist.</span></span>
<span class="line"><span style="color:#f6f6f4;">File &#39;node_modules/typescript.d.ts&#39; does not exist.</span></span>
<span class="line"><span style="color:#f6f6f4;">Found &#39;package.json&#39; at &#39;node_modules/typescript/package.json&#39;.</span></span>
<span class="line"><span style="color:#f6f6f4;">&#39;package.json&#39; has &#39;types&#39; field &#39;./lib/typescript.d.ts&#39; that references &#39;node_modules/typescript/lib/typescript.d.ts&#39;.</span></span>
<span class="line"><span style="color:#f6f6f4;">File &#39;node_modules/typescript/lib/typescript.d.ts&#39; exist - use it as a module resolution result.</span></span>
<span class="line"><span style="color:#f6f6f4;">======== Module name &#39;typescript&#39; was successfully resolved to &#39;node_modules/typescript/lib/typescript.d.ts&#39;. ========</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">======== Resolving module &#39;typescript&#39; from &#39;src/app.ts&#39;. ========</span></span>
<span class="line"><span style="color:#24292e;">Module resolution kind is not specified, using &#39;NodeJs&#39;.</span></span>
<span class="line"><span style="color:#24292e;">Loading module &#39;typescript&#39; from &#39;node_modules&#39; folder.</span></span>
<span class="line"><span style="color:#24292e;">File &#39;src/node_modules/typescript.ts&#39; does not exist.</span></span>
<span class="line"><span style="color:#24292e;">File &#39;src/node_modules/typescript.tsx&#39; does not exist.</span></span>
<span class="line"><span style="color:#24292e;">File &#39;src/node_modules/typescript.d.ts&#39; does not exist.</span></span>
<span class="line"><span style="color:#24292e;">File &#39;src/node_modules/typescript/package.json&#39; does not exist.</span></span>
<span class="line"><span style="color:#24292e;">File &#39;node_modules/typescript.ts&#39; does not exist.</span></span>
<span class="line"><span style="color:#24292e;">File &#39;node_modules/typescript.tsx&#39; does not exist.</span></span>
<span class="line"><span style="color:#24292e;">File &#39;node_modules/typescript.d.ts&#39; does not exist.</span></span>
<span class="line"><span style="color:#24292e;">Found &#39;package.json&#39; at &#39;node_modules/typescript/package.json&#39;.</span></span>
<span class="line"><span style="color:#24292e;">&#39;package.json&#39; has &#39;types&#39; field &#39;./lib/typescript.d.ts&#39; that references &#39;node_modules/typescript/lib/typescript.d.ts&#39;.</span></span>
<span class="line"><span style="color:#24292e;">File &#39;node_modules/typescript/lib/typescript.d.ts&#39; exist - use it as a module resolution result.</span></span>
<span class="line"><span style="color:#24292e;">======== Module name &#39;typescript&#39; was successfully resolved to &#39;node_modules/typescript/lib/typescript.d.ts&#39;. ========</span></span></code></pre></div><h4 id="需要留意的地方" tabindex="-1">需要留意的地方 <a class="header-anchor" href="#需要留意的地方" aria-label="Permalink to &quot;需要留意的地方&quot;">​</a></h4><ul><li><p>导入的名字及位置</p><blockquote><p>======== Resolving module <strong>&#39;typescript&#39;</strong> from <strong>&#39;src/app.ts&#39;</strong>. ========</p></blockquote></li><li><p>编译器使用的策略</p><blockquote><p>Module resolution kind is not specified, using <strong>&#39;NodeJs&#39;</strong>.</p></blockquote></li><li><p>从npm加载types</p><blockquote><p>&#39;package.json&#39; has <strong>&#39;types&#39;</strong> field &#39;./lib/typescript.d.ts&#39; that references &#39;node_modules/typescript/lib/typescript.d.ts&#39;.</p></blockquote></li><li><p>最终结果</p><blockquote><p>======== Module name &#39;typescript&#39; was <strong>successfully resolved</strong> to &#39;node_modules/typescript/lib/typescript.d.ts&#39;. ========</p></blockquote></li></ul><h2 id="使用-noresolve" tabindex="-1">使用<code>--noResolve</code> <a class="header-anchor" href="#使用-noresolve" aria-label="Permalink to &quot;使用\`--noResolve\`&quot;">​</a></h2><p>正常来讲编译器会在开始编译之前解析模块导入。 每当它成功地解析了对一个文件<code>import</code>，这个文件被会加到一个文件列表里，以供编译器稍后处理。</p><p><code>--noResolve</code>编译选项告诉编译器不要添加任何不是在命令行上传入的文件到编译列表。 编译器仍然会尝试解析模块，但是只要没有指定这个文件，那么它就不会被包含在内。</p><p>比如</p><h4 id="app-ts" tabindex="-1">app.ts <a class="header-anchor" href="#app-ts" aria-label="Permalink to &quot;app.ts&quot;">​</a></h4><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">as</span><span style="color:#F6F6F4;"> A </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">moduleA</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#7B7F8B;">// OK, moduleA passed on the command-line</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">as</span><span style="color:#F6F6F4;"> B </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">moduleB</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#7B7F8B;">// Error TS2307: Cannot find module &#39;moduleB&#39;.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> A </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;moduleA&quot;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// OK, moduleA passed on the command-line</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> B </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;moduleB&quot;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// Error TS2307: Cannot find module &#39;moduleB&#39;.</span></span></code></pre></div><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">tsc app.ts moduleA.ts --noResolve</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">tsc app.ts moduleA.ts --noResolve</span></span></code></pre></div><p>使用<code>--noResolve</code>编译<code>app.ts</code>：</p><ul><li>可能正确找到<code>moduleA</code>，因为它在命令行上指定了。</li><li>找不到<code>moduleB</code>，因为没有在命令行上传递。</li></ul><h2 id="常见问题" tabindex="-1">常见问题 <a class="header-anchor" href="#常见问题" aria-label="Permalink to &quot;常见问题&quot;">​</a></h2><h3 id="为什么在exclude列表里的模块还会被编译器使用" tabindex="-1">为什么在<code>exclude</code>列表里的模块还会被编译器使用 <a class="header-anchor" href="#为什么在exclude列表里的模块还会被编译器使用" aria-label="Permalink to &quot;为什么在\`exclude\`列表里的模块还会被编译器使用&quot;">​</a></h3><p><code>tsconfig.json</code>将文件夹转变一个“工程” 如果不指定任何<code>“exclude”</code>或<code>“files”</code>，文件夹里的所有文件包括<code>tsconfig.json</code>和所有的子目录都会在编译列表里。 如果你想利用<code>“exclude”</code>排除某些文件，甚至你想指定所有要编译的文件列表，请使用<code>“files”</code>。</p><p>有些是被<code>tsconfig.json</code>自动加入的。 它不会涉及到上面讨论的模块解析。 如果编译器识别出一个文件是模块导入目标，它就会加到编译列表里，不管它是否被排除了。</p><p>因此，要从编译列表中排除一个文件，你需要在排除它的同时，还要排除所有对它进行<code>import</code>或使用了<code>/// &lt;reference path=&quot;...&quot; /&gt;</code>指令的文件。</p>`,109),p=[n];function t(c,d,r,i,u,y){return o(),e("div",null,p)}const F=s(a,[["render",t]]);export{f as __pageData,F as default};
