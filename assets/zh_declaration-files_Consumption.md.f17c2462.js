import{_ as s,o as a,c as o,V as p}from"./chunks/framework.ced88878.js";const h=JSON.parse('{"title":"使用","description":"","frontmatter":{},"headers":[],"relativePath":"zh/declaration-files/Consumption.md","lastUpdated":1682670826000}'),l={name:"zh/declaration-files/Consumption.md"},n=p(`<h1 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h1><h2 id="下载" tabindex="-1">下载 <a class="header-anchor" href="#下载" aria-label="Permalink to &quot;下载&quot;">​</a></h2><p>想要获取声明文件只需要用到 npm。</p><p>比如，想要获取 lodash 库的声明文件，只需使用下面的命令：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">npm install --save @types/lodash</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">npm install --save @types/lodash</span></span></code></pre></div><p>如果一个 npm 包像<a href="./publishing">Publishing</a>里介绍的一样已经包含其声明文件，那就不必再去下载相应的<code>@types</code>包了。</p><h2 id="使用-1" tabindex="-1">使用 <a class="header-anchor" href="#使用-1" aria-label="Permalink to &quot;使用&quot;">​</a></h2><p>下载完后，就可以直接在 TypeScript 里使用 lodash 了。 不论是在模块里还是全局代码里使用。</p><p>比如，你已经<code>npm install</code>安装了声明文件，你可以使用导入：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">as</span><span style="color:#F6F6F4;"> _ </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">lodash</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">_.</span><span style="color:#62E884;">padStart</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Hello TypeScript!</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">20</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> _ </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;lodash&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">_.</span><span style="color:#6F42C1;">padStart</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Hello TypeScript!&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39; &#39;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>或者如果你没有使用模块，那么你只需使用全局的变量<code>_</code>。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">_.</span><span style="color:#62E884;">padStart</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Hello TypeScript!</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">20</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">_.</span><span style="color:#6F42C1;">padStart</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Hello TypeScript!&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39; &#39;</span><span style="color:#24292E;">);</span></span></code></pre></div><h2 id="查找" tabindex="-1">查找 <a class="header-anchor" href="#查找" aria-label="Permalink to &quot;查找&quot;">​</a></h2><p>大多数情况下，类型声明包的名字总是与其在<code>npm</code>上的包的名字相同，但是有<code>@types/</code>前缀。 但如果你需要的话，你可以在<a href="https://aka.ms/types" target="_blank" rel="noreferrer">https://aka.ms/types</a>上查找你喜欢的库。</p><blockquote><p>注意：如果你要找的声明文件不存在，你可以贡献一份，这样就方便了下一位开发者。 查看 DefinitelyTyped <a href="http://definitelytyped.org/guides/contributing.html" target="_blank" rel="noreferrer">贡献指南页</a>了解详情。</p></blockquote>`,15),e=[n];function t(c,r,i,y,d,E){return a(),o("div",null,e)}const u=s(l,[["render",t]]);export{h as __pageData,u as default};
