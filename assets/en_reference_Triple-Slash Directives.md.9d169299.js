import{_ as s,o as e,c as a,V as o}from"./chunks/framework.ced88878.js";const F=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"en/reference/Triple-Slash Directives.md","lastUpdated":1682670826000}'),n={name:"en/reference/Triple-Slash Directives.md"},l=o(`<p>Triple-slash directives are single-line comments containing a single XML tag. The contents of the comment are used as compiler directives.</p><p>Triple-slash directives are <strong>only</strong> valid at the top of their containing file. A triple-slash directive can only be preceded by single or multi-line comments, including other triple-slash directives. If they are encountered following a statement or a declaration they are treated as regular single-line comments, and hold no special meaning.</p><h2 id="reference-path" tabindex="-1"><code>/// &lt;reference path=&quot;...&quot; /&gt;</code> <a class="header-anchor" href="#reference-path" aria-label="Permalink to &quot;\`/// &lt;reference path=&quot;...&quot; /&gt;\`&quot;">​</a></h2><p>The <code>/// &lt;reference path=&quot;...&quot; /&gt;</code> directive is the most common of this group. It serves as a declaration of <em>dependency</em> between files.</p><p>Triple-slash references instruct the compiler to include additional files in the compilation process.</p><p>They also serve as a method to order the output when using <a href="/tsdoc-vitepress/tsconfig#out"><code>out</code></a> or <a href="/tsdoc-vitepress/tsconfig#outFile"><code>outFile</code></a>. Files are emitted to the output file location in the same order as the input after preprocessing pass.</p><h3 id="preprocessing-input-files" tabindex="-1">Preprocessing input files <a class="header-anchor" href="#preprocessing-input-files" aria-label="Permalink to &quot;Preprocessing input files&quot;">​</a></h3><p>The compiler performs a preprocessing pass on input files to resolve all triple-slash reference directives. During this process, additional files are added to the compilation.</p><p>The process starts with a set of <em>root files</em>; these are the file names specified on the command-line or in the <a href="/tsdoc-vitepress/tsconfig#files"><code>files</code></a> list in the <code>tsconfig.json</code> file. These root files are preprocessed in the same order they are specified. Before a file is added to the list, all triple-slash references in it are processed, and their targets included. Triple-slash references are resolved in a depth-first manner, in the order they have been seen in the file.</p><p>A triple-slash reference path is resolved relative to the containing file, if a relative path is used.</p><h3 id="errors" tabindex="-1">Errors <a class="header-anchor" href="#errors" aria-label="Permalink to &quot;Errors&quot;">​</a></h3><p>It is an error to reference a file that does not exist. It is an error for a file to have a triple-slash reference to itself.</p><h3 id="using-noresolve" tabindex="-1">Using <code>--noResolve</code> <a class="header-anchor" href="#using-noresolve" aria-label="Permalink to &quot;Using \`--noResolve\`&quot;">​</a></h3><p>If the compiler flag <a href="/tsdoc-vitepress/tsconfig#noResolve"><code>noResolve</code></a> is specified, triple-slash references are ignored; they neither result in adding new files, nor change the order of the files provided.</p><h2 id="reference-types" tabindex="-1"><code>/// &lt;reference types=&quot;...&quot; /&gt;</code> <a class="header-anchor" href="#reference-types" aria-label="Permalink to &quot;\`/// &lt;reference types=&quot;...&quot; /&gt;\`&quot;">​</a></h2><p>Similar to a <code>/// &lt;reference path=&quot;...&quot; /&gt;</code> directive, which serves as a declaration of <em>dependency</em>, a <code>/// &lt;reference types=&quot;...&quot; /&gt;</code> directive declares a dependency on a package.</p><p>The process of resolving these package names is similar to the process of resolving module names in an <code>import</code> statement. An easy way to think of triple-slash-reference-types directives are as an <code>import</code> for declaration packages.</p><p>For example, including <code>/// &lt;reference types=&quot;node&quot; /&gt;</code> in a declaration file declares that this file uses names declared in <code>@types/node/index.d.ts</code>; and thus, this package needs to be included in the compilation along with the declaration file.</p><p>Use these directives only when you&#39;re authoring a <code>d.ts</code> file by hand.</p><p>For declaration files generated during compilation, the compiler will automatically add <code>/// &lt;reference types=&quot;...&quot; /&gt;</code> for you; A <code>/// &lt;reference types=&quot;...&quot; /&gt;</code> in a generated declaration file is added <em>if and only if</em> the resulting file uses any declarations from the referenced package.</p><p>For declaring a dependency on an <code>@types</code> package in a <code>.ts</code> file, use <a href="/tsdoc-vitepress/tsconfig#types"><code>types</code></a> on the command line or in your <code>tsconfig.json</code> instead. See <a href="/tsdoc-vitepress/project-config/tsconfig#types-typeroots-and-types">using <code>@types</code>, <code>typeRoots</code> and <code>types</code> in <code>tsconfig.json</code> files</a> for more details.</p><h2 id="reference-lib" tabindex="-1"><code>/// &lt;reference lib=&quot;...&quot; /&gt;</code> <a class="header-anchor" href="#reference-lib" aria-label="Permalink to &quot;\`/// &lt;reference lib=&quot;...&quot; /&gt;\`&quot;">​</a></h2><p>This directive allows a file to explicitly include an existing built-in <em>lib</em> file.</p><p>Built-in <em>lib</em> files are referenced in the same fashion as the <a href="/tsdoc-vitepress/tsconfig#lib"><code>lib</code></a> compiler option in <em>tsconfig.json</em> (e.g. use <code>lib=&quot;es2015&quot;</code> and not <code>lib=&quot;lib.es2015.d.ts&quot;</code>, etc.).</p><p>For declaration file authors who rely on built-in types, e.g. DOM APIs or built-in JS run-time constructors like <code>Symbol</code> or <code>Iterable</code>, triple-slash-reference lib directives are recommended. Previously these .d.ts files had to add forward/duplicate declarations of such types.</p><p>For example, adding <code>/// &lt;reference lib=&quot;es2017.string&quot; /&gt;</code> to one of the files in a compilation is equivalent to compiling with <code>--lib es2017.string</code>.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/// &lt;</span><span style="color:#F286C4;">reference</span><span style="color:#7B7F8B;"> </span><span style="color:#62E884;font-style:italic;">lib</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">es2017.string</span><span style="color:#DEE492;">&quot;</span><span style="color:#7B7F8B;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">foo</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">padStart</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/// &lt;</span><span style="color:#22863A;">reference</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">lib</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;es2017.string&quot;</span><span style="color:#6A737D;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">padStart</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">);</span></span></code></pre></div><h2 id="reference-no-default-lib-true" tabindex="-1"><code>/// &lt;reference no-default-lib=&quot;true&quot;/&gt;</code> <a class="header-anchor" href="#reference-no-default-lib-true" aria-label="Permalink to &quot;\`/// &lt;reference no-default-lib=&quot;true&quot;/&gt;\`&quot;">​</a></h2><p>This directive marks a file as a <em>default library</em>. You will see this comment at the top of <code>lib.d.ts</code> and its different variants.</p><p>This directive instructs the compiler to <em>not</em> include the default library (i.e. <code>lib.d.ts</code>) in the compilation. The impact here is similar to passing <a href="/tsdoc-vitepress/tsconfig#noLib"><code>noLib</code></a> on the command line.</p><p>Also note that when passing <a href="/tsdoc-vitepress/tsconfig#skipDefaultLibCheck"><code>skipDefaultLibCheck</code></a>, the compiler will only skip checking files with <code>/// &lt;reference no-default-lib=&quot;true&quot;/&gt;</code>.</p><h2 id="amd-module" tabindex="-1"><code>/// &lt;amd-module /&gt;</code> <a class="header-anchor" href="#amd-module" aria-label="Permalink to &quot;\`/// &lt;amd-module /&gt;\`&quot;">​</a></h2><p>By default AMD modules are generated anonymous. This can lead to problems when other tools are used to process the resulting modules, such as bundlers (e.g. <code>r.js</code>).</p><p>The <code>amd-module</code> directive allows passing an optional module name to the compiler:</p><h5 id="amdmodule-ts" tabindex="-1">amdModule.ts <a class="header-anchor" href="#amdmodule-ts" aria-label="Permalink to &quot;amdModule.ts&quot;">​</a></h5><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">///&lt;</span><span style="color:#F286C4;">amd-module</span><span style="color:#7B7F8B;"> </span><span style="color:#62E884;font-style:italic;">name</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">NamedModule</span><span style="color:#DEE492;">&quot;</span><span style="color:#7B7F8B;">/&gt;</span></span>
<span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">C</span><span style="color:#F6F6F4;"> {}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">///&lt;</span><span style="color:#22863A;">amd-module</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;NamedModule&quot;</span><span style="color:#6A737D;">/&gt;</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">C</span><span style="color:#24292E;"> {}</span></span></code></pre></div><p>Will result in assigning the name <code>NamedModule</code> to the module as part of calling the AMD <code>define</code>:</p><h5 id="amdmodule-js" tabindex="-1">amdModule.js <a class="header-anchor" href="#amdmodule-js" aria-label="Permalink to &quot;amdModule.js&quot;">​</a></h5><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">define</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">NamedModule</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, [</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">require</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">exports</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">], </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">require</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">exports</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> C </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> () {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">C</span><span style="color:#F6F6F4;">() {}</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> C;</span></span>
<span class="line"><span style="color:#F6F6F4;">  })();</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#97E1F1;font-style:italic;">exports</span><span style="color:#F6F6F4;">.</span><span style="color:#BF9EEE;">C</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> C;</span></span>
<span class="line"><span style="color:#F6F6F4;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">define</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;NamedModule&quot;</span><span style="color:#24292E;">, [</span><span style="color:#032F62;">&quot;require&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;exports&quot;</span><span style="color:#24292E;">], </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">require</span><span style="color:#24292E;">, </span><span style="color:#E36209;">exports</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">C</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">C</span><span style="color:#24292E;">() {}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">C</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  })();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">exports</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">C</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">C</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><h2 id="amd-dependency" tabindex="-1"><code>/// &lt;amd-dependency /&gt;</code> <a class="header-anchor" href="#amd-dependency" aria-label="Permalink to &quot;\`/// &lt;amd-dependency /&gt;\`&quot;">​</a></h2><blockquote><p><strong>Note</strong>: this directive has been deprecated. Use <code>import &quot;moduleName&quot;;</code> statements instead.</p></blockquote><p><code>/// &lt;amd-dependency path=&quot;x&quot; /&gt;</code> informs the compiler about a non-TS module dependency that needs to be injected in the resulting module&#39;s require call.</p><p>The <code>amd-dependency</code> directive can also have an optional <code>name</code> property; this allows passing an optional name for an amd-dependency:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/// &lt;</span><span style="color:#F286C4;">amd-dependency</span><span style="color:#7B7F8B;"> </span><span style="color:#62E884;font-style:italic;">path</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">legacy/moduleA</span><span style="color:#DEE492;">&quot;</span><span style="color:#7B7F8B;"> </span><span style="color:#62E884;font-style:italic;">name</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">moduleA</span><span style="color:#DEE492;">&quot;</span><span style="color:#7B7F8B;">/&gt;</span></span>
<span class="line"><span style="color:#F286C4;">declare</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> moduleA</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">MyType</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">moduleA.</span><span style="color:#62E884;">callStuff</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/// &lt;</span><span style="color:#22863A;">amd-dependency</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">path</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;legacy/moduleA&quot;</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;moduleA&quot;</span><span style="color:#6A737D;">/&gt;</span></span>
<span class="line"><span style="color:#D73A49;">declare</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> moduleA</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyType</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">moduleA.</span><span style="color:#6F42C1;">callStuff</span><span style="color:#24292E;">();</span></span></code></pre></div><p>Generated JS code:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">define</span><span style="color:#F6F6F4;">([</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">require</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">exports</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">legacy/moduleA</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">], </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#FFB86C;font-style:italic;">require</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#FFB86C;font-style:italic;">exports</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#FFB86C;font-style:italic;">moduleA</span></span>
<span class="line"><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  moduleA.</span><span style="color:#62E884;">callStuff</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">define</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&quot;require&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;exports&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;legacy/moduleA&quot;</span><span style="color:#24292E;">], </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">require</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">exports</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">moduleA</span></span>
<span class="line"><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  moduleA.</span><span style="color:#6F42C1;">callStuff</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div>`,46),t=[l];function p(r,c,i,d,y,u){return e(),a("div",null,t)}const f=s(n,[["render",p]]);export{F as __pageData,f as default};
