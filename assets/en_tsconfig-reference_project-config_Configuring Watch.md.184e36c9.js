import{_ as s,o as n,c as e,V as o}from"./chunks/framework.ced88878.js";const F=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"en/tsconfig-reference/project-config/Configuring Watch.md","lastUpdated":1682670826000}'),a={name:"en/tsconfig-reference/project-config/Configuring Watch.md"},t=o(`<p>Compiler supports configuring how to watch files and directories using compiler flags in TypeScript 3.8+, and environment variables before that.</p><h2 id="background" tabindex="-1">Background <a class="header-anchor" href="#background" aria-label="Permalink to &quot;Background&quot;">​</a></h2><p>The <code>--watch</code> implementation of the compiler relies on using <code>fs.watch</code> and <code>fs.watchFile</code> which are provided by node, both of these methods have pros and cons.</p><p><code>fs.watch</code> uses file system events to notify the changes in the file/directory. But this is OS dependent and the notification is not completely reliable and does not work as expected on many OS. Also there could be limit on number of watches that can be created, e.g. linux and we could exhaust it pretty quickly with programs that include large number of files. But because this uses file system events, there is not much CPU cycle involved. Compiler typically uses <code>fs.watch</code> to watch directories (e.g. source directories included by config file, directories in which module resolution failed etc) These can handle the missing precision in notifying about the changes. But recursive watching is supported on only Windows and OSX. That means we need something to replace the recursive nature on other OS.</p><p><code>fs.watchFile</code> uses polling and thus involves CPU cycles. However, <code>fs.watchFile</code> is the most reliable mechanism to get the update on the status of file/directory. The compiler typically uses <code>fs.watchFile</code> to watch source files, config files and missing files (missing file references). This means the CPU usage when using <code>fs.watchFile</code> depends on number of files in the program.</p><h2 id="configuring-file-watching-using-a-tsconfig-json" tabindex="-1">Configuring file watching using a <code>tsconfig.json</code> <a class="header-anchor" href="#configuring-file-watching-using-a-tsconfig-json" aria-label="Permalink to &quot;Configuring file watching using a \`tsconfig.json\`&quot;">​</a></h2><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// Some typical compiler options</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">compilerOptions</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">target</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">es2020</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">moduleResolution</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">node</span><span style="color:#DEE492;">&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// ...</span></span>
<span class="line"><span style="color:#F6F6F4;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// NEW: Options for file/directory watching</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">watchOptions</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// Use native file system events for files and directories</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">watchFile</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">useFsEvents</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">watchDirectory</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">useFsEvents</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// Poll files for updates more frequently</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// when they&#39;re updated a lot.</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">fallbackPolling</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">dynamicPriority</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// Don&#39;t coalesce watch notification</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">synchronousWatchDirectory</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// Finally, two additional settings for reducing the amount of possible</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// files to track  work from these directories</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">excludeDirectories</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">**/node_modules</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">_build</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">],</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">excludeFiles</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">build/fileWhichChangesOften.ts</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">]</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Some typical compiler options</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;target&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;es2020&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;moduleResolution&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;node&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// NEW: Options for file/directory watching</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;watchOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Use native file system events for files and directories</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;watchFile&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;useFsEvents&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;watchDirectory&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;useFsEvents&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Poll files for updates more frequently</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// when they&#39;re updated a lot.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;fallbackPolling&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;dynamicPriority&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Don&#39;t coalesce watch notification</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;synchronousWatchDirectory&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Finally, two additional settings for reducing the amount of possible</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// files to track  work from these directories</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;excludeDirectories&quot;</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;**/node_modules&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;_build&quot;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;excludeFiles&quot;</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;build/fileWhichChangesOften.ts&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>You can read more about this in <a href="/tsdoc-vitepress/release-notes/TypeScript[3.8]#better-directory-watching-on-linux-and-watchoptions">the release notes</a>.</p><h2 id="configuring-file-watching-using-environment-variable-tsc-watchfile" tabindex="-1">Configuring file watching using environment variable <code>TSC_WATCHFILE</code> <a class="header-anchor" href="#configuring-file-watching-using-environment-variable-tsc-watchfile" aria-label="Permalink to &quot;Configuring file watching using environment variable \`TSC_WATCHFILE\`&quot;">​</a></h2><table><thead><tr><th>Option</th><th>Description</th></tr></thead><tbody><tr><td><code>PriorityPollingInterval</code></td><td>Use <code>fs.watchFile</code> but use different polling intervals for source files, config files and missing files</td></tr><tr><td><code>DynamicPriorityPolling</code></td><td>Use a dynamic queue where in the frequently modified files will be polled at shorter interval and the files unchanged will be polled less frequently</td></tr><tr><td><code>UseFsEvents</code></td><td>Use <code>fs.watch</code> which uses file system events (but might not be accurate on different OS) to get the notifications for the file changes/creation/deletion. Note that few OS e.g. linux has limit on number of watches and failing to create watcher using <code>fs.watch</code> will result it in creating using <code>fs.watchFile</code></td></tr><tr><td><code>UseFsEventsWithFallbackDynamicPolling</code></td><td>This option is similar to <code>UseFsEvents</code> except on failing to create watch using <code>fs.watch</code>, the fallback watching happens through dynamic polling queues (as explained in <code>DynamicPriorityPolling</code>)</td></tr><tr><td><code>UseFsEventsOnParentDirectory</code></td><td>This option watches parent directory of the file with <code>fs.watch</code> (using file system events) thus being low on CPU but can compromise accuracy.</td></tr><tr><td>default (no value specified)</td><td>If environment variable <code>TSC_NONPOLLING_WATCHER</code> is set to true, watches parent directory of files (just like <code>UseFsEventsOnParentDirectory</code>). Otherwise watch files using <code>fs.watchFile</code> with <code>250ms</code> as the timeout for any file</td></tr></tbody></table><h2 id="configuring-directory-watching-using-environment-variable-tsc-watchdirectory" tabindex="-1">Configuring directory watching using environment variable <code>TSC_WATCHDIRECTORY</code> <a class="header-anchor" href="#configuring-directory-watching-using-environment-variable-tsc-watchdirectory" aria-label="Permalink to &quot;Configuring directory watching using environment variable \`TSC_WATCHDIRECTORY\`&quot;">​</a></h2><p>The watching of directory on platforms that don&#39;t support recursive directory watching natively in node, is supported through recursively creating directory watcher for the child directories using different options selected by <code>TSC_WATCHDIRECTORY</code>. Note that on platforms that support native recursive directory watching (e.g windows) the value of this environment variable is ignored.</p><table><thead><tr><th>Option</th><th>Description</th></tr></thead><tbody><tr><td><code>RecursiveDirectoryUsingFsWatchFile</code></td><td>Use <code>fs.watchFile</code> to watch the directories and child directories which is a polling watch (consuming CPU cycles)</td></tr><tr><td><code>RecursiveDirectoryUsingDynamicPriorityPolling</code></td><td>Use dynamic polling queue to poll changes to the directory and child directories.</td></tr><tr><td>default (no value specified)</td><td>Use <code>fs.watch</code> to watch directories and child directories</td></tr></tbody></table>`,13),l=[t];function c(p,i,r,d,y,u){return n(),e("div",null,l)}const f=s(a,[["render",c]]);export{F as __pageData,f as default};
