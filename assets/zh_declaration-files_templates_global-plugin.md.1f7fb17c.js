import{_ as s,o as a,c as n,V as l}from"./chunks/framework.ced88878.js";const u=JSON.parse('{"title":"global-plugin.d.ts","description":"","frontmatter":{},"headers":[],"relativePath":"zh/declaration-files/templates/global-plugin.md","lastUpdated":1682668835000}'),p={name:"zh/declaration-files/templates/global-plugin.md"},o=l(`<h1 id="global-plugin-d-ts" tabindex="-1">global-plugin.d.ts <a class="header-anchor" href="#global-plugin-d-ts" aria-label="Permalink to &quot;global-plugin.d.ts&quot;">​</a></h1><h2 id="umd" tabindex="-1">UMD <a class="header-anchor" href="#umd" aria-label="Permalink to &quot;UMD&quot;">​</a></h2><p>一个 UMD 模块既可以用作 ES 模块（使用导入语句），也可以用作全局变量（在缺少模块加载器的环境中使用）。 许多流行的代码库，如<a href="http://momentjs.com/" target="_blank" rel="noreferrer">Moment.js</a>，都是使用这模式发布的。 例如，在 Node.js 中或使用了 RequireJS 时，你可以这样使用：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> moment </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">require</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">moment</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(moment.</span><span style="color:#62E884;">format</span><span style="color:#F6F6F4;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> moment </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;moment&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(moment.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">());</span></span></code></pre></div><p>在纯浏览器环境中，你可以这样使用：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(moment.</span><span style="color:#62E884;">format</span><span style="color:#F6F6F4;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(moment.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">());</span></span></code></pre></div><h3 id="识别-umd-代码库" tabindex="-1">识别 UMD 代码库 <a class="header-anchor" href="#识别-umd-代码库" aria-label="Permalink to &quot;识别 UMD 代码库&quot;">​</a></h3><p><a href="https://github.com/umdjs/umd" target="_blank" rel="noreferrer">UMD 模块</a>会检查运行环境中是否存在模块加载器。 这是一种常见模式，示例如下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">root</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">factory</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">typeof</span><span style="color:#F6F6F4;"> define </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">function</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> define.amd) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">define</span><span style="color:#F6F6F4;">([</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">libName</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">], factory);</span></span>
<span class="line"><span style="color:#F6F6F4;">    } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">typeof</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">module</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">object</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">module</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">exports</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">module</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">exports</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">factory</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">require</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">libName</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"><span style="color:#F6F6F4;">    } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        root.returnExports </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">factory</span><span style="color:#F6F6F4;">(root.libName);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">, </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">b</span><span style="color:#F6F6F4;">) {</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">root</span><span style="color:#24292E;">, </span><span style="color:#E36209;">factory</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> define </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;function&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> define.amd) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">define</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&quot;libName&quot;</span><span style="color:#24292E;">], factory);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">module</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;object&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">factory</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;libName&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        root.returnExports </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">factory</span><span style="color:#24292E;">(root.libName);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">b</span><span style="color:#24292E;">) {</span></span></code></pre></div><p>如果你看到代码库中存在类如<code>typeof define</code>，<code>typeof window</code>或<code>typeof module</code>的检测代码，尤其是在文件的顶端，那么它大概率是 UMD 代码库。</p><p>在 UMD 模块的文档中经常会提供在 Node.js 中结合<code>require</code>使用的示例，以及在浏览器中结合<code>&lt;script&gt;</code>标签使用的示例。</p><h3 id="umd-代码库的示例" tabindex="-1">UMD 代码库的示例 <a class="header-anchor" href="#umd-代码库的示例" aria-label="Permalink to &quot;UMD 代码库的示例&quot;">​</a></h3><p>大多数流行的代码库均提供了 UMD 格式的包。 例如，<a href="https://jquery.com/" target="_blank" rel="noreferrer">jQuery</a>，<a href="http://momentjs.com/" target="_blank" rel="noreferrer">Moment.js</a>和<a href="https://lodash.com/" target="_blank" rel="noreferrer">lodash</a>等。</p><h3 id="模版" tabindex="-1">模版 <a class="header-anchor" href="#模版" aria-label="Permalink to &quot;模版&quot;">​</a></h3><p>针对模块，共存在三个模版。它们是：</p><ul><li><a href="./templates/module.d.ts"><code>module.d.ts</code></a></li><li><a href="./templates/module-class.d.ts"><code>module-class.d.ts</code></a></li><li><a href="./templates/module-function.d.ts"><code>module-function.d.ts</code></a></li></ul><p>若一个模块可以当作函数调用，则使用<a href="./templates/module-function.d.ts"><code>module-function.d.ts</code></a>。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">require</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">foo</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#7B7F8B;">// Note: calling &#39;x&#39; as a function</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> y </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">x</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">42</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// Note: calling &#39;x&#39; as a function</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> y </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">x</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">42</span><span style="color:#24292E;">);</span></span></code></pre></div><p>请务必阅读<a href="#es6-对模块调用签名的影响">脚注：&quot;ES6 对模块调用签名的影响&quot;</a>。</p><p>如果一个模块可以使用<code>new</code>来构造，则使用<a href="./templates/module-class.d.ts"><code>module-class.d.ts</code></a>。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">require</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">bar</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#7B7F8B;">// Note: using &#39;new&#39; operator on the imported variable</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> y </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">x</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">hello</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;bar&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// Note: using &#39;new&#39; operator on the imported variable</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> y </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">x</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>请务必阅读<a href="#es6-对模块调用签名的影响">脚注：&quot;ES6 对模块调用签名的影响&quot;</a>，它同样适用于这类模块。</p><p>如果一个模块既不可以调用，又不可以构造，那么就使用<a href="./templates/module.d.ts"><code>module.d.ts</code></a>。</p><h2 id="模块插件或-umd-插件" tabindex="-1">模块插件或 UMD 插件 <a class="header-anchor" href="#模块插件或-umd-插件" aria-label="Permalink to &quot;模块插件或 UMD 插件&quot;">​</a></h2><p>模块插件会改变其它模块的结构（包含 UMD 或 ES 模块）。 例如，在 Moment.js 中，<code>moment-range</code>会将<code>range</code>方法添加到<code>moment</code>对象上。</p><p>对于编写声明文件而言，无论是 ES 模块还是 UMD 模块，你都可以使用相同的代码。</p><h3 id="模版-1" tabindex="-1">模版 <a class="header-anchor" href="#模版-1" aria-label="Permalink to &quot;模版&quot;">​</a></h3><p>使用<a href="./templates/module-plugin.d.ts"><code>module-plugin.d.ts</code></a>模版。</p><h2 id="全局插件" tabindex="-1">全局插件 <a class="header-anchor" href="#全局插件" aria-label="Permalink to &quot;全局插件&quot;">​</a></h2><p>全局插件是一段全局代码，它会改变某个全局变量。 对于修改了全局作用域的模块，它会增加出现运行时冲突的可能性。</p><p>例如，有些库会向<code>Array.prototype</code>或<code>String.prototype</code>中增加新的函数。</p><h3 id="识别全局插件" tabindex="-1">识别全局插件 <a class="header-anchor" href="#识别全局插件" aria-label="Permalink to &quot;识别全局插件&quot;">​</a></h3><p>全局插件通常可以根据其文档来识别。</p><p>你会看到如下示例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">hello, world</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#7B7F8B;">// Creates new methods on built-in types</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(x.</span><span style="color:#62E884;">startsWithHello</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> y </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#7B7F8B;">// Creates new methods on built-in types</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(y.</span><span style="color:#62E884;">reverseAndSort</span><span style="color:#F6F6F4;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;hello, world&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// Creates new methods on built-in types</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(x.</span><span style="color:#6F42C1;">startsWithHello</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> y </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#6A737D;">// Creates new methods on built-in types</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(y.</span><span style="color:#6F42C1;">reverseAndSort</span><span style="color:#24292E;">());</span></span></code></pre></div><h3 id="模版-2" tabindex="-1">模版 <a class="header-anchor" href="#模版-2" aria-label="Permalink to &quot;模版&quot;">​</a></h3><p>使用<a href="./templates/global-plugin.d.ts"><code>global-plugin.d.ts</code></a>模版。</p><h2 id="修改了全局作用域的模块" tabindex="-1">修改了全局作用域的模块 <a class="header-anchor" href="#修改了全局作用域的模块" aria-label="Permalink to &quot;修改了全局作用域的模块&quot;">​</a></h2><p>对于修改了全局作用域的模块来讲，在导入它们时，会对全局作用域中的值进行修改。 比如存在某个代码库，当导入它时，它会向<code>String.prototype</code>上添加新的成员。 该模式存在危险，因为它有导致运行时冲突的可能性， 但我们仍然可以为其编写声明文件。</p><h3 id="识别出修改了全局作用域的模块" tabindex="-1">识别出修改了全局作用域的模块 <a class="header-anchor" href="#识别出修改了全局作用域的模块" aria-label="Permalink to &quot;识别出修改了全局作用域的模块&quot;">​</a></h3><p>我们可以通过文档来识别修改了全局作用域的模块。 通常来讲，它们与全局插件类似，但是需要<code>require</code>语句来激活对全局作用域的修改。</p><p>你可能看到过如下的文档：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// &#39;require&#39; call that doesn&#39;t use its return value</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> unused </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">require</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">magic-string-time</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#7B7F8B;">/* or */</span></span>
<span class="line"><span style="color:#62E884;">require</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">magic-string-time</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">hello, world</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#7B7F8B;">// Creates new methods on built-in types</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(x.</span><span style="color:#62E884;">startsWithHello</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> y </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#7B7F8B;">// Creates new methods on built-in types</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(y.</span><span style="color:#62E884;">reverseAndSort</span><span style="color:#F6F6F4;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// &#39;require&#39; call that doesn&#39;t use its return value</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> unused </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;magic-string-time&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">/* or */</span></span>
<span class="line"><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;magic-string-time&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;hello, world&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// Creates new methods on built-in types</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(x.</span><span style="color:#6F42C1;">startsWithHello</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> y </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#6A737D;">// Creates new methods on built-in types</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(y.</span><span style="color:#6F42C1;">reverseAndSort</span><span style="color:#24292E;">());</span></span></code></pre></div><h3 id="模版-3" tabindex="-1">模版 <a class="header-anchor" href="#模版-3" aria-label="Permalink to &quot;模版&quot;">​</a></h3><p>使用<a href="./templates/global-modifying-module.d.ts"><code>global-modifying-module.d.ts</code></a>模版。</p><h2 id="利用依赖" tabindex="-1">利用依赖 <a class="header-anchor" href="#利用依赖" aria-label="Permalink to &quot;利用依赖&quot;">​</a></h2><p>你的代码库可能会有若干种依赖。 本节会介绍如何在声明文件中导入它们。</p><h3 id="对全局库的依赖" tabindex="-1">对全局库的依赖 <a class="header-anchor" href="#对全局库的依赖" aria-label="Permalink to &quot;对全局库的依赖&quot;">​</a></h3><p>如果你的代码库依赖于某个全局代码库，则使用<code>/// &lt;reference types=&quot;...&quot; /&gt;</code>指令：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/// &lt;</span><span style="color:#F286C4;">reference</span><span style="color:#7B7F8B;"> </span><span style="color:#62E884;font-style:italic;">types</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">someLib</span><span style="color:#DEE492;">&quot;</span><span style="color:#7B7F8B;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getThing</span><span style="color:#F6F6F4;">()</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">someLib</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">thing</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/// &lt;</span><span style="color:#22863A;">reference</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">types</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;someLib&quot;</span><span style="color:#6A737D;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getThing</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">someLib</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">thing</span><span style="color:#24292E;">;</span></span></code></pre></div><h3 id="对模块的依赖" tabindex="-1">对模块的依赖 <a class="header-anchor" href="#对模块的依赖" aria-label="Permalink to &quot;对模块的依赖&quot;">​</a></h3><p>如果你的代码库依赖于某个模块，则使用<code>import</code>语句：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">as</span><span style="color:#F6F6F4;"> moment </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">moment</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getThing</span><span style="color:#F6F6F4;">()</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">moment</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> moment </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;moment&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getThing</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">moment</span><span style="color:#24292E;">;</span></span></code></pre></div><h3 id="对-umd-模块的依赖" tabindex="-1">对 UMD 模块的依赖 <a class="header-anchor" href="#对-umd-模块的依赖" aria-label="Permalink to &quot;对 UMD 模块的依赖&quot;">​</a></h3><h4 id="全局代码库" tabindex="-1">全局代码库 <a class="header-anchor" href="#全局代码库" aria-label="Permalink to &quot;全局代码库&quot;">​</a></h4><p>如果你的全局代码库依赖于某个 UMD 模块，则使用<code>/// &lt;reference types</code>指令：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/// &lt;</span><span style="color:#F286C4;">reference</span><span style="color:#7B7F8B;"> </span><span style="color:#62E884;font-style:italic;">types</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">moment</span><span style="color:#DEE492;">&quot;</span><span style="color:#7B7F8B;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getThing</span><span style="color:#F6F6F4;">()</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">moment</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/// &lt;</span><span style="color:#22863A;">reference</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">types</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;moment&quot;</span><span style="color:#6A737D;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getThing</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">moment</span><span style="color:#24292E;">;</span></span></code></pre></div><h4 id="es-模块或-umd-模块代码库" tabindex="-1">ES 模块或 UMD 模块代码库 <a class="header-anchor" href="#es-模块或-umd-模块代码库" aria-label="Permalink to &quot;ES 模块或 UMD 模块代码库&quot;">​</a></h4><p>如果你的模块或 UMD 代码库依赖于某个 UMD 代码库，则使用<code>import</code>语句：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">as</span><span style="color:#F6F6F4;"> someLib </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">someLib</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> someLib </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;someLib&#39;</span><span style="color:#24292E;">;</span></span></code></pre></div><p>不要使用<code>/// &lt;reference</code>指令来声明对 UMD 代码库的依赖。</p><h2 id="脚注" tabindex="-1">脚注 <a class="header-anchor" href="#脚注" aria-label="Permalink to &quot;脚注&quot;">​</a></h2><h3 id="防止命名冲突" tabindex="-1">防止命名冲突 <a class="header-anchor" href="#防止命名冲突" aria-label="Permalink to &quot;防止命名冲突&quot;">​</a></h3><p>注意，虽说可以在全局作用域内定义许多类型。 但我们强烈建议不要这样做，因为当一个工程中存在多个声明文件时，它可能会导致难以解决的命名冲突。</p><p>可以遵循的一个简单规则是使用代码库提供的某个全局变量来声明拥有命名空间的类型。 例如，如果代码库提供了全局变量<code>cats</code>，那么可以这样写：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">declare</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">namespace</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">cats</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">KittySettings</span><span style="color:#F6F6F4;"> {}</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">declare</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">namespace</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cats</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">KittySettings</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>而不是：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// at top-level</span></span>
<span class="line"><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">CatsKittySettings</span><span style="color:#F6F6F4;"> {}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// at top-level</span></span>
<span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CatsKittySettings</span><span style="color:#24292E;"> {}</span></span></code></pre></div><p>这样做会保证代码库可以被转换成 UMD 模块，且不会影响声明文件的使用者。</p><h3 id="es6-对模块插件的影响" tabindex="-1">ES6 对模块插件的影响 <a class="header-anchor" href="#es6-对模块插件的影响" aria-label="Permalink to &quot;ES6 对模块插件的影响&quot;">​</a></h3><p>一些插件会对已有模块的顶层导出进行添加或修改。 这在 CommonJS 以及其它模块加载器里是合法的，但 ES6 模块是不可改变的，因此该模式是不可行的。 因为，TypeScript 是模块加载器无关的，所以在编译时不会对该行为加以限制，但是开发者若想要转换到 ES6 模块加载器则需要注意这一点。</p><h3 id="es6-对模块调用签名的影响" tabindex="-1">ES6 对模块调用签名的影响 <a class="header-anchor" href="#es6-对模块调用签名的影响" aria-label="Permalink to &quot;ES6 对模块调用签名的影响&quot;">​</a></h3><p>许多代码库，如 Express，将自身导出为可调用的函数。 例如，Express 的典型用法如下：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> exp </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">require</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">express</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> app </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">exp</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> exp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;express&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> app </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">exp</span><span style="color:#24292E;">();</span></span></code></pre></div><p>在 ES6 模块加载器中，顶层对象（此例中就<code>exp</code>）只能拥有属性； 顶层的模块对象永远不能够被调用。 最常见的解决方案是为可调用的/可构造的对象定义一个<code>default</code>导出； 有些模块加载器会自动检测这种情况并且将顶层对象替换为<code>default</code>导出。</p><h2 id="代码库文件结构" tabindex="-1">代码库文件结构 <a class="header-anchor" href="#代码库文件结构" aria-label="Permalink to &quot;代码库文件结构&quot;">​</a></h2><p>声明文件的结构应该反映代码库源码的结构。</p><p>一个代码库可以包含多个模块，比如：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">myLib</span></span>
<span class="line"><span style="color:#f6f6f4;">  +---- index.js</span></span>
<span class="line"><span style="color:#f6f6f4;">  +---- foo.js</span></span>
<span class="line"><span style="color:#f6f6f4;">  +---- bar</span></span>
<span class="line"><span style="color:#f6f6f4;">         +---- index.js</span></span>
<span class="line"><span style="color:#f6f6f4;">         +---- baz.js</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">myLib</span></span>
<span class="line"><span style="color:#24292e;">  +---- index.js</span></span>
<span class="line"><span style="color:#24292e;">  +---- foo.js</span></span>
<span class="line"><span style="color:#24292e;">  +---- bar</span></span>
<span class="line"><span style="color:#24292e;">         +---- index.js</span></span>
<span class="line"><span style="color:#24292e;">         +---- baz.js</span></span></code></pre></div><p>它们可以通过如下方式导入：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> a </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">require</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">myLib</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> b </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">require</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">myLib/foo</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> c </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">require</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">myLib/bar</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> d </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">require</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">myLib/bar/baz</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;myLib&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;myLib/foo&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;myLib/bar&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> d </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;myLib/bar/baz&#39;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>声明文件如下：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">@types/myLib</span></span>
<span class="line"><span style="color:#f6f6f4;">  +---- index.d.ts</span></span>
<span class="line"><span style="color:#f6f6f4;">  +---- foo.d.ts</span></span>
<span class="line"><span style="color:#f6f6f4;">  +---- bar</span></span>
<span class="line"><span style="color:#f6f6f4;">         +---- index.d.ts</span></span>
<span class="line"><span style="color:#f6f6f4;">         +---- baz.d.ts</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">@types/myLib</span></span>
<span class="line"><span style="color:#24292e;">  +---- index.d.ts</span></span>
<span class="line"><span style="color:#24292e;">  +---- foo.d.ts</span></span>
<span class="line"><span style="color:#24292e;">  +---- bar</span></span>
<span class="line"><span style="color:#24292e;">         +---- index.d.ts</span></span>
<span class="line"><span style="color:#24292e;">         +---- baz.d.ts</span></span></code></pre></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// Type definitions for [~THE LIBRARY NAME~] [~OPTIONAL VERSION NUMBER~]</span></span>
<span class="line"><span style="color:#7B7F8B;">// Project: [~THE PROJECT NAME~]</span></span>
<span class="line"><span style="color:#7B7F8B;">// Definitions by: [~YOUR NAME~] &lt;[~A URL FOR YOU~]&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">/*~ This template shows how to write a global plugin. */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">/*~ Write a declaration for the original type and add new members.</span></span>
<span class="line"><span style="color:#7B7F8B;"> *~ For example, this adds a &#39;toBinaryString&#39; method with overloads to</span></span>
<span class="line"><span style="color:#7B7F8B;"> *~ the built-in number type.</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Number</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">toBinaryString</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">opts</span><span style="color:#F286C4;">?:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">MyLibrary</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">BinaryFormatOptions</span><span style="color:#F6F6F4;">)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">toBinaryString</span><span style="color:#F6F6F4;">(</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#FFB86C;font-style:italic;">callback</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">MyLibrary</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">BinaryFormatCallback</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#FFB86C;font-style:italic;">opts</span><span style="color:#F286C4;">?:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">MyLibrary</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">BinaryFormatOptions</span></span>
<span class="line"><span style="color:#F6F6F4;">    )</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">/*~ If you need to declare several types, place them inside a namespace</span></span>
<span class="line"><span style="color:#7B7F8B;"> *~ to avoid adding too many things to the global namespace.</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">declare</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">namespace</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">MyLibrary</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">BinaryFormatCallback</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">n</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">BinaryFormatOptions</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        prefix</span><span style="color:#F286C4;">?:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        padding</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Type definitions for [~THE LIBRARY NAME~] [~OPTIONAL VERSION NUMBER~]</span></span>
<span class="line"><span style="color:#6A737D;">// Project: [~THE PROJECT NAME~]</span></span>
<span class="line"><span style="color:#6A737D;">// Definitions by: [~YOUR NAME~] &lt;[~A URL FOR YOU~]&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/*~ This template shows how to write a global plugin. */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/*~ Write a declaration for the original type and add new members.</span></span>
<span class="line"><span style="color:#6A737D;"> *~ For example, this adds a &#39;toBinaryString&#39; method with overloads to</span></span>
<span class="line"><span style="color:#6A737D;"> *~ the built-in number type.</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Number</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">toBinaryString</span><span style="color:#24292E;">(</span><span style="color:#E36209;">opts</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyLibrary</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">BinaryFormatOptions</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">toBinaryString</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">callback</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyLibrary</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">BinaryFormatCallback</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">opts</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyLibrary</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">BinaryFormatOptions</span></span>
<span class="line"><span style="color:#24292E;">    )</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/*~ If you need to declare several types, place them inside a namespace</span></span>
<span class="line"><span style="color:#6A737D;"> *~ to avoid adding too many things to the global namespace.</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">declare</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">namespace</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyLibrary</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BinaryFormatCallback</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">n</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BinaryFormatOptions</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">prefix</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">padding</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,84),e=[o];function t(c,r,y,i,F,d){return a(),n("div",null,e)}const h=s(p,[["render",t]]);export{u as __pageData,h as default};
