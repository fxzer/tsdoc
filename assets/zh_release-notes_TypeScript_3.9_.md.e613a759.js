import{_ as s,o as a,c as n,V as l}from"./chunks/framework.ced88878.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"zh/release-notes/TypeScript[3.9].md","lastUpdated":1682668835000}'),p={name:"zh/release-notes/TypeScript[3.9].md"},o=l(`<h2 id="改进类型推断和promise-all" tabindex="-1">改进类型推断和<code>Promise.all</code> <a class="header-anchor" href="#改进类型推断和promise-all" aria-label="Permalink to &quot;改进类型推断和\`Promise.all\`&quot;">​</a></h2><p>TypeScript的最近几个版本（3.7前后）更新了像<code>Promise.all</code>和<code>Promise.race</code>等的函数声明。 不巧的是，它引入了一些回归问题，尤其是在和<code>null</code>或<code>undefined</code>混合使用的场景中。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Lion</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">roar</span><span style="color:#F6F6F4;">()</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Seal</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">singKissFromARose</span><span style="color:#F6F6F4;">()</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">async</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">visitZoo</span><span style="color:#F6F6F4;">(</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#FFB86C;font-style:italic;">lionExhibit</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Promise</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">Lion</span><span style="color:#F6F6F4;">&gt;,</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#FFB86C;font-style:italic;">sealExhibit</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Promise</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">Seal</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">undefined</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> [lion, seal] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">await</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Promise</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">all</span><span style="color:#F6F6F4;">([lionExhibit, sealExhibit]);</span></span>
<span class="line"><span style="color:#F6F6F4;">  lion.</span><span style="color:#62E884;">roar</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">//   ~~~~</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">//  对象可能为&#39;undefined&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Lion</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">roar</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">void</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Seal</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">singKissFromARose</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">void</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">visitZoo</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">lionExhibit</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Promise</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Lion</span><span style="color:#24292E;">&gt;,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">sealExhibit</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Promise</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Seal</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> [lion, seal] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">all</span><span style="color:#24292E;">([lionExhibit, sealExhibit]);</span></span>
<span class="line"><span style="color:#24292E;">  lion.</span><span style="color:#6F42C1;">roar</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//   ~~~~</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//  对象可能为&#39;undefined&#39;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这是一种奇怪的行为！ 事实上，只有<code>sealExhibit</code>包含了<code>undefined</code>值，但是它却让<code>lion</code>也含有了<code>undefined</code>值。</p><p>得益于<a href="https://github.com/jablko" target="_blank" rel="noreferrer">Jack Bates</a>提交的<a href="https://github.com/microsoft/TypeScript/pull/34501" target="_blank" rel="noreferrer">PR</a>，这个问题已经被修复了，它改进了TypeScript 3.9中的类型推断流程。 上面的例子中已经不再产生错误。 如果你在旧版本的TypeScript中被<code>Promise</code>的这个问题所困扰，我们建议你尝试一下3.9版本！</p><h3 id="awaited-类型" tabindex="-1"><code>awaited</code> 类型 <a class="header-anchor" href="#awaited-类型" aria-label="Permalink to &quot;\`awaited\` 类型&quot;">​</a></h3><p>如果你一直关注TypeScript，那么你可能会注意到<a href="https://github.com/microsoft/TypeScript/pull/35998" target="_blank" rel="noreferrer">一个新的类型运算符<code>awaited</code></a>。 这个类型运算符的作用是准确地表达JavaScript中<code>Promise</code>的工作方式。</p><p>我们原计划在TypeScript 3.9中支持<code>awaited</code>，但在现有的代码中测试过该特性后，我们发现还需要进行一些设计，以便让所有人能够顺利地使用它。 因此，我们从主分支中暂时移除了这个特性。 我们将继续试验这个特性，它不会被包含进本次发布。</p><h2 id="速度优化" tabindex="-1">速度优化 <a class="header-anchor" href="#速度优化" aria-label="Permalink to &quot;速度优化&quot;">​</a></h2><p>TypeScript 3.9提供了多项速度优化。 TypeScript在<code>material-ui</code>和<code>styled-components</code>代码包中拥有非常慢的编辑速度和编译速度。在发现了这点后，TypeScript团队集中了精力解决性能问题。 TypeScript优化了大型联合类型、交叉类型、有条件类型和映射类型。</p><ul><li><a href="https://github.com/microsoft/TypeScript/pull/36576" target="_blank" rel="noreferrer">https://github.com/microsoft/TypeScript/pull/36576</a></li><li><a href="https://github.com/microsoft/TypeScript/pull/36590" target="_blank" rel="noreferrer">https://github.com/microsoft/TypeScript/pull/36590</a></li><li><a href="https://github.com/microsoft/TypeScript/pull/36607" target="_blank" rel="noreferrer">https://github.com/microsoft/TypeScript/pull/36607</a></li><li><a href="https://github.com/microsoft/TypeScript/pull/36622" target="_blank" rel="noreferrer">https://github.com/microsoft/TypeScript/pull/36622</a></li><li><a href="https://github.com/microsoft/TypeScript/pull/36754" target="_blank" rel="noreferrer">https://github.com/microsoft/TypeScript/pull/36754</a></li><li><a href="https://github.com/microsoft/TypeScript/pull/36696" target="_blank" rel="noreferrer">https://github.com/microsoft/TypeScript/pull/36696</a></li></ul><p>上面列出的每一个PR都能够减少5-10%的编译时间（对于某些代码库）。 对于<code>material-ui</code>库而言，现在能够节约大约40%的编译时间！</p><p>我们还调整了在编辑器中的文件重命名功能。 从Visual Studio Code团队处得知，当重命名一个文件时，计算出需要更新的<code>import</code>语句要花费5到10秒的时间。 TypeScript 3.9通过<a href="https://github.com/microsoft/TypeScript/pull/37055" target="_blank" rel="noreferrer">改变编译器和语言服务缓存文件查询的内部实现</a>解决了这个问题。</p><p>尽管仍有优化的空间，我们希望当前的改变能够为每个人带来更流畅的体验。</p><h2 id="ts-expect-error-注释" tabindex="-1"><code>// @ts-expect-error</code> 注释 <a class="header-anchor" href="#ts-expect-error-注释" aria-label="Permalink to &quot;\`// @ts-expect-error\` 注释&quot;">​</a></h2><p>设想一下，我们正在使用TypeScript编写一个代码库，它对外开放了一个公共函数<code>doStuff</code>。 该函数的类型声明了它接受两个<code>string</code>类型的参数，因此其它TypeScript的用户能够看到类型检查的结果，但该函数还进行了运行时的检查以便JavaScript用户能够看到一个有帮助的错误。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">doStuff</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">abc</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">xyz</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">assert</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">typeof</span><span style="color:#F6F6F4;"> abc </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">string</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">assert</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">typeof</span><span style="color:#F6F6F4;"> xyz </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">string</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// do some stuff</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doStuff</span><span style="color:#24292E;">(</span><span style="color:#E36209;">abc</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">, </span><span style="color:#E36209;">xyz</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">assert</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> abc </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;string&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">assert</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> xyz </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;string&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// do some stuff</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>如果有人错误地使用了该函数，那么TypeScript用户能够看到红色的波浪线和错误提示，JavaScript用户会看到断言错误。 然后，我们想编写一条单元测试来测试该行为。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">expect</span><span style="color:#F6F6F4;">(() </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">doStuff</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">123</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">456</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">}).</span><span style="color:#62E884;">toThrow</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">doStuff</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">123</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">456</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}).</span><span style="color:#6F42C1;">toThrow</span><span style="color:#24292E;">();</span></span></code></pre></div><p>不巧的是，如果你使用TypeScript来编译单元测试，TypeScript会提示一个错误！</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">doStuff</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">123</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">456</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#7B7F8B;">//      ~~~</span></span>
<span class="line"><span style="color:#7B7F8B;">// 错误：类型&#39;number&#39;不能够赋值给类型&#39;string&#39;。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">doStuff</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">123</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">456</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">//      ~~~</span></span>
<span class="line"><span style="color:#6A737D;">// 错误：类型&#39;number&#39;不能够赋值给类型&#39;string&#39;。</span></span></code></pre></div><p>这就是TypeScript 3.9添加了<code>// @ts-expect-error</code>注释的原因。 当一行代码带有<code>// @ts-expect-error</code>注释时，TypeScript不会提示上例的错误； 但如果该行代码没有错误，TypeScript会提示没有必要使用<code>// @ts-expect-error</code>。</p><p>示例，以下的代码是正确的：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// @ts-expect-error</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">47</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">octopus</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// @ts-expect-error</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">47</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;octopus&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>但是下面的代码：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// @ts-expect-error</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// @ts-expect-error</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span></code></pre></div><p>会产生错误：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">未使用的 &#39;@ts-expect-error&#39; 指令。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">未使用的 &#39;@ts-expect-error&#39; 指令。</span></span></code></pre></div><p>非常感谢<a href="https://github.com/JoshuaKGoldberg" target="_blank" rel="noreferrer">Josh Goldberg</a>实现了这个功能。 更多信息请参考<a href="https://github.com/microsoft/TypeScript/pull/36014" target="_blank" rel="noreferrer">the <code>ts-expect-error</code> pull request</a>。</p><h3 id="ts-ignore-还是-ts-expect-error" tabindex="-1"><code>ts-ignore</code> 还是 <code>ts-expect-error</code>? <a class="header-anchor" href="#ts-ignore-还是-ts-expect-error" aria-label="Permalink to &quot;\`ts-ignore\` 还是 \`ts-expect-error\`?&quot;">​</a></h3><p>某些情况下，<code>// @ts-expect-error</code>和<code>// @ts-ignore</code>是相似的，都能够阻止产生错误消息。 两者的不同在于，如果下一行代码没有错误，那么<code>// @ts-ignore</code>不会做任何事。</p><p>你可能会想要抛弃<code>// @ts-ignore</code>注释转而去使用<code>// @ts-expect-error</code>，并且想要知道哪一个更适用于以后的代码。 实际上，这完全取决于你和你的团队，下面列举了一些具体情况。</p><p>如果满足以下条件，那么选择<code>ts-expect-error</code>：</p><ul><li>你在编写单元测试，并且想让类型系统提示错误</li><li>你知道此处有问题，并且很快会回来改正它，只是暂时地忽略该错误</li><li>你的团队成员都很积极，大家想要在代码回归正常后及时地删除忽略类型检查注释</li></ul><p>如果满足以下条件，那么选择<code>ts-ignore</code>：</p><ul><li>项目规模较大，产生了一些错误但是找不到相应代码的负责人</li><li>正处于TypeScript版本升级的过程中，某些错误只在特定版本的TypeScript中存在，但是在其它版本中并不存在</li><li>你没有足够的时间考虑究竟应该使用<code>// @ts-ignore</code>还是<code>// @ts-expect-error</code></li></ul><h2 id="在条件表达式中检查未被调用的函数" tabindex="-1">在条件表达式中检查未被调用的函数 <a class="header-anchor" href="#在条件表达式中检查未被调用的函数" aria-label="Permalink to &quot;在条件表达式中检查未被调用的函数&quot;">​</a></h2><p>在TypeScript 3.7中，我们引入了_未进行函数调用的检查_，当你忘记去调用某个函数时会产生错误。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">hasImportantPermissions</span><span style="color:#F6F6F4;">()</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// ...</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// Oops!</span></span>
<span class="line"><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (hasImportantPermissions) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">//  ~~~~~~~~~~~~~~~~~~~~~~~</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// 这个条件永远返回true，因为函数已经被定义。</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// 你是否想要调用该函数？</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">deleteAllTheImportantFiles</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hasImportantPermissions</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">boolean</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Oops!</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (hasImportantPermissions) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//  ~~~~~~~~~~~~~~~~~~~~~~~</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 这个条件永远返回true，因为函数已经被定义。</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 你是否想要调用该函数？</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">deleteAllTheImportantFiles</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>然而，这个错误只会在<code>if</code>条件语句中才会提示。 多亏了<a href="https://github.com/a-tarasyuk" target="_blank" rel="noreferrer">Alexander Tarasyuk</a>提交的<a href="https://github.com/microsoft/TypeScript/pull/36402" target="_blank" rel="noreferrer">PR</a>，现在这个特性也支持在三元表达式中使用，例如<code>cond ? trueExpr : falseExpr</code>。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">declare</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">listFilesOfDirectory</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">dirPath</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">[];</span></span>
<span class="line"><span style="color:#F286C4;">declare</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">isDirectory</span><span style="color:#F6F6F4;">()</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getAllFiles</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">startFileName</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> result</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">[] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [];</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">traverse</span><span style="color:#F6F6F4;">(startFileName);</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> result;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">traverse</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">currentPath</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> isDirectory</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">?</span><span style="color:#F6F6F4;"> </span><span style="color:#7B7F8B;">// ~~~~~~~~~~~</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 该条件永远返回true</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 因为函数已经被定义。</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 你是否想要调用该函数？</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">listFilesOfDirectory</span><span style="color:#F6F6F4;">(currentPath).</span><span style="color:#62E884;">forEach</span><span style="color:#F6F6F4;">(traverse)</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> result.</span><span style="color:#62E884;">push</span><span style="color:#F6F6F4;">(currentPath);</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">declare</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">listFilesOfDirectory</span><span style="color:#24292E;">(</span><span style="color:#E36209;">dirPath</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">[];</span></span>
<span class="line"><span style="color:#D73A49;">declare</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isDirectory</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">boolean</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getAllFiles</span><span style="color:#24292E;">(</span><span style="color:#E36209;">startFileName</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">result</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">[] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">traverse</span><span style="color:#24292E;">(startFileName);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">traverse</span><span style="color:#24292E;">(</span><span style="color:#E36209;">currentPath</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> isDirectory</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// ~~~~~~~~~~~</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 该条件永远返回true</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 因为函数已经被定义。</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 你是否想要调用该函数？</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">listFilesOfDirectory</span><span style="color:#24292E;">(currentPath).</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(traverse)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> result.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(currentPath);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><a href="https://github.com/microsoft/TypeScript/issues/36048" target="_blank" rel="noreferrer">https://github.com/microsoft/TypeScript/issues/36048</a></p><h2 id="编辑器改进" tabindex="-1">编辑器改进 <a class="header-anchor" href="#编辑器改进" aria-label="Permalink to &quot;编辑器改进&quot;">​</a></h2><p>TypeScript编译器不但支持在大部分编辑器中编写TypeScript代码，还支持着在Visual Studio系列的编辑器中编写JavaScript代码。 针对不同的编辑器，在使用TypeScript/JavaScript的新功能时可能会有所区别，但是</p><ul><li>Visual Studio Code支持<a href="https://code.visualstudio.com/docs/typescript/typescript-compiling#_using-the-workspace-version-of-typescript" target="_blank" rel="noreferrer">选择不同的TypeScript版本</a>。或者，安装<a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next" target="_blank" rel="noreferrer">JavaScript/TypeScript Nightly Extension</a>插件来使用最新的版本。</li><li>Visual Studio 2017/2019提供了SDK安装包，以及<a href="https://www.nuget.org/packages/Microsoft.TypeScript.MSBuild" target="_blank" rel="noreferrer">MSBuild安装包</a>。</li><li>Sublime Text 3支持<a href="https://github.com/microsoft/TypeScript-Sublime-Plugin#note-using-different-versions-of-typescript" target="_blank" rel="noreferrer">选择不同的TypeScript版本</a></li></ul><h3 id="在javascript中自动导入commonjs模块" tabindex="-1">在JavaScript中自动导入CommonJS模块 <a class="header-anchor" href="#在javascript中自动导入commonjs模块" aria-label="Permalink to &quot;在JavaScript中自动导入CommonJS模块&quot;">​</a></h3><p>在使用了CommonJS模块的JavaScript文件中，我们对自动导入功能进行了一个非常棒的改进。</p><p>在旧的版本中，TypeScript总是假设你想要使用ECMAScript模块风格的导入语句，并且无视你的文件类型。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">as</span><span style="color:#F6F6F4;"> fs </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">fs</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> fs </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;fs&quot;</span><span style="color:#24292E;">;</span></span></code></pre></div><p>然而，在编写JavaScript文件时，并不总是想要使用ECMAScript模块风格。 非常多的用户仍然在使用CommonJS模块，例如<code>require(...)</code>。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> fs </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">require</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">fs</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fs</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;fs&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>现在，TypeScript会自动检测你正在使用的导入语句风格，并使用当前的导入语句风格。</p><p><video src="https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2020/03/ERkaliGU0AA5anJ1.mp4"></video></p><p>更新信息请参考<a href="https://github.com/microsoft/TypeScript/pull/37027" target="_blank" rel="noreferrer">PR</a>.</p><h3 id="code-actions-保留换行符" tabindex="-1">Code Actions 保留换行符 <a class="header-anchor" href="#code-actions-保留换行符" aria-label="Permalink to &quot;Code Actions 保留换行符&quot;">​</a></h3><p>TypeScript的重构工具和快速修复工具对换行符的处理不是非常好。 一个基本的示例如下。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> maxValue </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">100</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">/*start*/</span></span>
<span class="line"><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;=</span><span style="color:#F6F6F4;"> maxValue; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// First get the squared value.</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> square </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">**</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// Now print the squared value.</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(square);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#7B7F8B;">/*end*/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">maxValue</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/*start*/</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> maxValue; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// First get the squared value.</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> square </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">**</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Now print the squared value.</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(square);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">/*end*/</span></span></code></pre></div><p>如果我们选中从<code>/*start*/</code>到<code>/*end*/</code>，然后进行“提取到函数”操作，我们会得到如下的代码。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> maxValue </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">100</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">printSquares</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">printSquares</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;=</span><span style="color:#F6F6F4;"> maxValue; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// First get the squared value.</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> square </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">**</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// Now print the squared value.</span></span>
<span class="line"><span style="color:#F6F6F4;">    console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(square);</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">maxValue</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">printSquares</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printSquares</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> maxValue; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// First get the squared value.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> square </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">**</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Now print the squared value.</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(square);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><img src="https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2020/03/printSquaresWithoutNewlines-3.9.gif.gif" alt="在旧版本的TypeScript中，将循环提取到函数时，换行符没有被保留。"></p><p>这不是我们想要的 - 在<code>for</code>循环中，每条语句之间都有一个空行，但是重构后它们被移除了！ TypeScript 3.9调整后，它会保留我们编写的代码。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> maxValue </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">100</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">printSquares</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">printSquares</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;=</span><span style="color:#F6F6F4;"> maxValue; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// First get the squared value.</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> square </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">**</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// Now print the squared value.</span></span>
<span class="line"><span style="color:#F6F6F4;">    console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(square);</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">maxValue</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">printSquares</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printSquares</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> maxValue; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// First get the squared value.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> square </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">**</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Now print the squared value.</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(square);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><img src="https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2020/03/printSquaresWithNewlines-3.9.gif.gif" alt="在TypeScript 3.9中，将循环提取到函数时，会保留一个换行符。"></p><p>更多信息请参考<a href="https://github.com/microsoft/TypeScript/pull/36688" target="_blank" rel="noreferrer">PR</a></p><h3 id="快速修复-缺失的返回值表达式" tabindex="-1">快速修复：缺失的返回值表达式 <a class="header-anchor" href="#快速修复-缺失的返回值表达式" aria-label="Permalink to &quot;快速修复：缺失的返回值表达式&quot;">​</a></h3><p>有时候，我们可能忘记在函数的最后添加返回值语句，尤其是在将简单箭头函数转换成还有花括号的箭头函数时。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// before</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">f1</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> () </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">42</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// oops - not the same!</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">f2</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> () </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#BF9EEE;">42</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// before</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">f1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">42</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// oops - not the same!</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">f2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">42</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>感谢开源社区的<a href="https://github.com/Kingwl" target="_blank" rel="noreferrer">Wenlu Wang</a>的<a href="https://github.com/microsoft/TypeScript/pull/26434" target="_blank" rel="noreferrer">PR</a>，TypeScript提供了快速修复功能来添加<code>return</code>语句，删除花括号，或者为箭头函数体添加小括号用以区分对象字面量。</p><p><img src="https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2020/04/missingReturnValue-3-9.gif" alt="示例"></p><h3 id="支持-solution-style-的tsconfig-json文件" tabindex="-1">支持&quot;Solution Style&quot;的<code>tsconfig.json</code>文件 <a class="header-anchor" href="#支持-solution-style-的tsconfig-json文件" aria-label="Permalink to &quot;支持&quot;Solution Style&quot;的\`tsconfig.json\`文件&quot;">​</a></h3><p>编译器需要知道一个文件被哪个配置文件所管理，因此才能够应用适当的配置选项并且计算出当前“工程”包含了哪些文件。 在默认情况下，编辑器使用TypeScript语言服务来向上遍历父级目录以查找<code>tsconfig.json</code>文件。</p><p>有一种特殊情况是<code>tsconfig.json</code>文件仅用于引用其它<code>tsconfig.json</code>文件。</p><div class="language-json5"><button title="Copy Code" class="copy"></button><span class="lang">json5</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// tsconfig.json</span></span>
<span class="line"><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#E7EE98;">files</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [],</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#E7EE98;">references</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span></span>
<span class="line"><span style="color:#F6F6F4;">    { </span><span style="color:#E7EE98;">path</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">./tsconfig.shared.json</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> },</span></span>
<span class="line"><span style="color:#F6F6F4;">    { </span><span style="color:#E7EE98;">path</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">./tsconfig.frontend.json</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> },</span></span>
<span class="line"><span style="color:#F6F6F4;">    { </span><span style="color:#E7EE98;">path</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">./tsconfig.backend.json</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> },</span></span>
<span class="line"><span style="color:#F6F6F4;">  ],</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// tsconfig.json</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">files</span><span style="color:#24292E;">: [],</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">references</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">    { </span><span style="color:#032F62;">path</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./tsconfig.shared.json&quot;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">    { </span><span style="color:#032F62;">path</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./tsconfig.frontend.json&quot;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">    { </span><span style="color:#032F62;">path</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./tsconfig.backend.json&quot;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  ],</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这个文件除了用来管理其它项目的配置文件之外什么也没做，在某些环境中它被叫作“solution”。 这里，任何一个<code>tsconfig.*.json</code>文件都不会被TypeScript语言服务所选用，但是我们希望语言服务能够分析出当前的<code>.ts</code>文件被上述<code>tsconfig.json</code>中引用的哪个配置文件所管理。</p><p>TypeScript 3.9为这种类型的配置方式添加了编辑器的支持。 更多信息请参考<a href="https://github.com/microsoft/TypeScript/pull/37239" target="_blank" rel="noreferrer">PR</a>.</p>`,75),e=[o];function t(c,r,y,i,F,E){return a(),n("div",null,e)}const h=s(p,[["render",t]]);export{u as __pageData,h as default};
