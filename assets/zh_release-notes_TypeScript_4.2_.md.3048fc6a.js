import{_ as s,o as n,c as a,V as l}from"./chunks/framework.ced88878.js";const d=JSON.parse('{"title":"TypeScript 4.2","description":"","frontmatter":{},"headers":[],"relativePath":"zh/release-notes/TypeScript[4.2].md","lastUpdated":1682921420000}'),p={name:"zh/release-notes/TypeScript[4.2].md"},o=l(`<h1 id="typescript-4-2" tabindex="-1">TypeScript 4.2 <a class="header-anchor" href="#typescript-4-2" aria-label="Permalink to &quot;TypeScript 4.2&quot;">​</a></h1><h2 id="更智能地保留类型别名" tabindex="-1">更智能地保留类型别名 <a class="header-anchor" href="#更智能地保留类型别名" aria-label="Permalink to &quot;更智能地保留类型别名&quot;">​</a></h2><p>在 TypeScript 中，使用类型别名能够给某个类型起个新名字。 倘若你定义了一些函数，并且它们全都使用了 <code>string | number | boolean</code> 类型，那么你就可以定义一个类型别名来避免重复。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">BasicPrimitive</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BasicPrimitive</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">boolean</span><span style="color:#24292E;">;</span></span></code></pre></div><p>TypeScript 使用了一系列规则来推测是否该在显示类型时使用类型别名。 例如，有如下的代码。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">BasicPrimitive</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">doStuff</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">BasicPrimitive</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> value;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> x;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BasicPrimitive</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">boolean</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doStuff</span><span style="color:#24292E;">(</span><span style="color:#E36209;">value</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BasicPrimitive</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> x;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>如果在 Visual Studio，Visual Studio Code 或者 <a href="https://www.typescriptlang.org/play?ts=4.1.3#code/KYDwDg9gTgLgBDAnmYcBCBDAzgSwMYAKUOAtjjDgG6oC8cAdgK4kBGwUcAPnFjMfQHMucFhAgAbYBnoBuAFBzQkWHABmjengoR6cACYQAyjEarVACkoZxjYAC502fEVLkqwAJRwA3nLj+4SXgQODorG2B5ALgoYBMoXRB5AF8gA" target="_blank" rel="noreferrer">TypeScript 演练场</a>编辑器中把鼠标光标放在 <code>x</code> 上，我们就会看到信息面板中显示出了 <code>BasicPrimitive</code> 类型。 同样地，如果我们查看由该文件生成的声明文件（<code>.d.ts</code>），那么 TypeScript 会显示出 <code>doStuff</code> 的返回值类型为 <code>BasicPrimitive</code> 类型。</p><p>那么你猜一猜，如果返回值类型为 <code>BasicPrimitive</code> 或 <code>undefined</code> 时会发生什么？</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">BasicPrimitive</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">doStuff</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">BasicPrimitive</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (Math.</span><span style="color:#62E884;">random</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0.5</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">undefined</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> value;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BasicPrimitive</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">boolean</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doStuff</span><span style="color:#24292E;">(</span><span style="color:#E36209;">value</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BasicPrimitive</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (Math.</span><span style="color:#6F42C1;">random</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.5</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> value;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以在<a href="https://www.typescriptlang.org/play?ts=4.1.3#code/KYDwDg9gTgLgBDAnmYcBCBDAzgSwMYAKUOAtjjDgG6oC8cAdgK4kBGwUcAPnFjMfQHMucFhAgAbYBnoBuALAAoRQHplcABIRqHCPTgByACYQAyjEYAzC-pHBxEAO4IIPYKgcALDPAAqyYCZ4xGDwhjhYYOIYiFhwFtAIHqhQwOZQekgoAHQqagDqqGQCHvBe1HCgKHgwwIZw5M5wYPzw2Lm5cJ2YuITEZBTl3Iz0hsAWOPS1HR0sjPBs9k5+KIHB8AAsWQBMADT18BO8UnVhEVExcG0Kqh2dTKzswrz8QtyiElJ6QyNjE1PXykUlWg8Asw2qOF0cGMZksFgAFJQMOJGMAAFzobD4IikchUYAASjgAG9FJ1yTgLHB4QBZbweLJQaTGEjwokAHjgAAYsgBWImkhTk4WdFJpPTDUbjSaGeRC4UAX0UZOFYsY6TgSJRwDlcAVQA" target="_blank" rel="noreferrer">TypeScript 4.1 演练场</a>中查看结果。 虽然我们希望 TypeScript 将 <code>doStuff</code> 的返回值类型显示为 <code>BasicPrimitive | undefined</code>，但是它却显示成了 <code>string | number | boolean | undefined</code> 类型！ 这是怎么回事？</p><p>这与 TypeScript 内部的类型表示方式有关。 当基于一个联合类型来创建另一个联合类型时，TypeScript 会将类型<em>标准化</em>，也就是把类型展开为一个新的联合类型 - 但这么做也可能会丢失信息。 类型检查器不得不根据 <code>string | number | boolean | undefined</code> 类型来尝试每一种可能的组合并查看使用了哪些类型别名，即便这样也可能会有多个类型别名指向 <code>string | number | boolean</code> 类型。</p><p>TypeScript 4.2 的内部实现更加智能了。 我们会记录类型是如何被构造的，会记录它们原本的编写方式和之后的构造方式。 我们同样会记录和区分不同的类型别名！</p><p>有能力根据类型使用的方式来回显这个类型就意味着，对于 TypeScript 用户来讲能够避免显示很长的类型；同时也意味着会生成更友好的 <code>.d.ts</code> 声明文件、错误消息和编辑器内显示的类型及签名帮助信息。 这会让 TypeScript 对于初学者来讲更友好一些。</p><p>更多详情，请参考<a href="https://github.com/microsoft/TypeScript/pull/42149" target="_blank" rel="noreferrer">PR：改进保留类型别名的联合</a>，以及<a href="https://github.com/microsoft/TypeScript/pull/42284" target="_blank" rel="noreferrer">PR：保留间接的类型别名</a>。</p><h2 id="元组类型中前导的-中间的剩余元素" tabindex="-1">元组类型中前导的/中间的剩余元素 <a class="header-anchor" href="#元组类型中前导的-中间的剩余元素" aria-label="Permalink to &quot;元组类型中前导的/中间的剩余元素&quot;">​</a></h2><p>在 TypeScript 中，元组类型用于表示固定长度和元素类型的数组。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 存储了一对数字的元组</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> a</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 存储了一个string，一个number和一个boolean的元组</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> b</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;">] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">hello</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">42</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">];</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 存储了一对数字的元组</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> a</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">number</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 存储了一个string，一个number和一个boolean的元组</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> b</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">boolean</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">42</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">];</span></span></code></pre></div><p>随着时间的推移，TypeScript 中的元组类型变得越来越复杂，因为它们也被用来表示像 JavaScript 中的参数列表类型。 结果就是，它可能包含可选元素和剩余元素，以及用于工具和提高可读性的标签。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 包含一个或两个元素的元组。</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> c</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F286C4;">?</span><span style="color:#F6F6F4;">] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">hello</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#F6F6F4;">c </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">hello</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">world</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 包含一个或两个元素的标签元组。</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> d</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [first: </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">, second</span><span style="color:#F286C4;">?</span><span style="color:#F6F6F4;">: </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">hello</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#F6F6F4;">d </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">hello</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">world</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 包含剩余元素的元组 - 至少前两个元素是字符串，</span></span>
<span class="line"><span style="color:#7B7F8B;">// 以及后面的任意数量的布尔元素。</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> e</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">, </span><span style="color:#F286C4;">...</span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;">[]];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">e </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">hello</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">world</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#F6F6F4;">e </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">hello</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">world</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#F6F6F4;">e </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">hello</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">world</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">];</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 包含一个或两个元素的元组。</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> c</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">string</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;world&#39;</span><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 包含一个或两个元素的标签元组。</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> d</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#6F42C1;">first</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">second</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">d </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;world&#39;</span><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 包含剩余元素的元组 - 至少前两个元素是字符串，</span></span>
<span class="line"><span style="color:#6A737D;">// 以及后面的任意数量的布尔元素。</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> e</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">...</span><span style="color:#005CC5;">boolean</span><span style="color:#24292E;">[]];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">e </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;world&#39;</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">e </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;world&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">e </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;world&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">];</span></span></code></pre></div><p>在 TypeScript 4.2 中，剩余元素会按它们的使用方式进行展开。 在之前的版本中，TypeScript 只允许 <code>...rest</code> 元素位于元组的末尾。</p><p>但现在，剩余元素可以出现在元组中的任意位置 - 但有一点限制。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> foo</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#F286C4;">...</span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">[], </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">foo </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">123</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#F6F6F4;">foo </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">hello</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">123</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#F6F6F4;">foo </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">hello!</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">hello!</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">hello!</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">123</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> bar</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;">, </span><span style="color:#F286C4;">...</span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">[], </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">bar </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#F6F6F4;">bar </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">some text</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#F6F6F4;">bar </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">some</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">separated</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">text</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">];</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> foo</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">...</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">[], </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">foo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">123</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">foo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">123</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">foo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;hello!&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;hello!&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;hello!&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">123</span><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> bar</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">boolean</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">...</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">[], </span><span style="color:#005CC5;">boolean</span><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">bar </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">bar </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;some text&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">bar </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;some&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;separated&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;text&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">];</span></span></code></pre></div><p>唯一的限制是，剩余元素之后不能出现可选元素或其它剩余元素。 换句话说，一个元组中只允许有一个剩余元素，并且剩余元素之后不能有可选元素。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Clown</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">/*...*/</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Joker</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">/*...*/</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> StealersWheel</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#F286C4;">...</span><span style="color:#97E1F1;font-style:italic;">Clown</span><span style="color:#F6F6F4;">[], </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">me</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#F286C4;">...</span><span style="color:#97E1F1;font-style:italic;">Joker</span><span style="color:#F6F6F4;">[]];</span></span>
<span class="line"><span style="color:#7B7F8B;">//                                    ~~~~~~~~~~ 错误</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> StringsAndMaybeBoolean</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#F286C4;">...</span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">[], </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F286C4;">?</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#7B7F8B;">//                                        ~~~~~~~~ 错误</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Clown</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/*...*/</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Joker</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/*...*/</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> StealersWheel</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">...</span><span style="color:#6F42C1;">Clown</span><span style="color:#24292E;">[], </span><span style="color:#032F62;">&#39;me&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">...</span><span style="color:#6F42C1;">Joker</span><span style="color:#24292E;">[]];</span></span>
<span class="line"><span style="color:#6A737D;">//                                    ~~~~~~~~~~ 错误</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> StringsAndMaybeBoolean</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">...</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">[], </span><span style="color:#005CC5;">boolean</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#6A737D;">//                                        ~~~~~~~~ 错误</span></span></code></pre></div><p>这些不在结尾的剩余元素能够用来描述，可接收任意数量的前导参数加上固定数量的结尾参数的函数。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">declare</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">doStuff</span><span style="color:#F6F6F4;">(</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">...</span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#F286C4;">...</span><span style="color:#F6F6F4;">names: </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">[], shouldCapitalize: </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;">]</span></span>
<span class="line"><span style="color:#F6F6F4;">)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">doStuff</span><span style="color:#F6F6F4;">(</span><span style="color:#7B7F8B;">/*shouldCapitalize:*/</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#62E884;">doStuff</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">fee</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">fi</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">fo</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">fum</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#7B7F8B;">/*shouldCapitalize:*/</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">declare</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doStuff</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">...</span><span style="color:#E36209;">args</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">...</span><span style="color:#6F42C1;">names</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">[], </span><span style="color:#6F42C1;">shouldCapitalize</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">boolean</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">void</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">doStuff</span><span style="color:#24292E;">(</span><span style="color:#6A737D;">/*shouldCapitalize:*/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">doStuff</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;fee&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;fi&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;fo&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;fum&#39;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">/*shouldCapitalize:*/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span></code></pre></div><p>尽管 JavaScript 中没有声明前导剩余参数的语法，但我们仍可以将 <code>doStuff</code> 函数的参数声明为带有前导剩余元素 <code>...args</code> 的元组类型。 使用这种方式可以帮助我们描述许多的 JavaScript 代码！</p><p>更多详情，请参考 <a href="https://github.com/microsoft/TypeScript/pull/41544" target="_blank" rel="noreferrer">PR</a>。</p><h2 id="更严格的-in-运算符检查" tabindex="-1">更严格的 <code>in</code> 运算符检查 <a class="header-anchor" href="#更严格的-in-运算符检查" aria-label="Permalink to &quot;更严格的 \`in\` 运算符检查&quot;">​</a></h2><p>在 JavaScript 中，如果 <code>in</code> 运算符的右操作数是非对象类型，那么会产生运行时错误。 TypeScript 4.2 确保了该错误能够在编译时被捕获。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">foo</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">in</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">42</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#7B7F8B;">// The right-hand side of an &#39;in&#39; expression must not be a primitive.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">42</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// The right-hand side of an &#39;in&#39; expression must not be a primitive.</span></span></code></pre></div><p>这个检查在大多数情况下是相当保守的，如果你看到提示了这个错误，那么代码中很可能真的有问题。</p><p>非常感谢外部贡献者 <a href="https://github.com/jonhue" target="_blank" rel="noreferrer">Jonas Hübotter</a> 的 <a href="https://github.com/microsoft/TypeScript/pull/41928" target="_blank" rel="noreferrer">PR</a>！</p><h2 id="nopropertyaccessfromindexsignature" tabindex="-1"><code>--noPropertyAccessFromIndexSignature</code> <a class="header-anchor" href="#nopropertyaccessfromindexsignature" aria-label="Permalink to &quot;\`--noPropertyAccessFromIndexSignature\`&quot;">​</a></h2><p>在 TypeScript 刚开始支持索引签名时，它只允许使用方括号语法来访问索引签名中定义的元素，例如 <code>person[&quot;name&quot;]</code>。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">SomeType</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">/** 这是索引签名 */</span></span>
<span class="line"><span style="color:#F6F6F4;">    [</span><span style="color:#FFB86C;font-style:italic;">propName</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">]</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">any</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">doStuff</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">SomeType</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> value[</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">someProperty</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SomeType</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/** 这是索引签名 */</span></span>
<span class="line"><span style="color:#24292E;">    [</span><span style="color:#E36209;">propName</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doStuff</span><span style="color:#24292E;">(</span><span style="color:#E36209;">value</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SomeType</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value[</span><span style="color:#032F62;">&#39;someProperty&#39;</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这就导致了在处理带有任意属性的对象时变得烦锁。 例如，假设有一个容易出现拼写错误的 API，容易出现在属性名的末尾位置多写一个字母 <code>s</code> 的错误。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Options</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">/** 要排除的文件模式。 */</span></span>
<span class="line"><span style="color:#F6F6F4;">    exclude</span><span style="color:#F286C4;">?:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">[];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;">     * 这会将其余所有未声明的属性定义为 &#39;any&#39; 类型。</span></span>
<span class="line"><span style="color:#7B7F8B;">     */</span></span>
<span class="line"><span style="color:#F6F6F4;">    [</span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">]</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">any</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">processOptions</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">opts</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Options</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 注意，我们想要访问 \`excludes\` 而不是 \`exclude\`</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (opts.excludes) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        console.</span><span style="color:#62E884;">error</span><span style="color:#F6F6F4;">(</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">The option \`excludes\` is not valid. Did you mean \`exclude\`?</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">        );</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Options</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/** 要排除的文件模式。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">exclude</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">[];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">     * 这会将其余所有未声明的属性定义为 &#39;any&#39; 类型。</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    [</span><span style="color:#E36209;">x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">processOptions</span><span style="color:#24292E;">(</span><span style="color:#E36209;">opts</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Options</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 注意，我们想要访问 \`excludes\` 而不是 \`exclude\`</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (opts.excludes) {</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&#39;The option \`excludes\` is not valid. Did you mean \`exclude\`?&#39;</span></span>
<span class="line"><span style="color:#24292E;">        );</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>为了便于处理以上情况，在从前的时候，TypeScript 允许使用点语法来访问通过字符串索引签名定义的属性。 这会让从 JavaScript 代码到 TypeScript 代码的迁移工作变得容易。</p><p>然而，放宽限制同样意味着更容易出现属性名拼写错误。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Options</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">/** 要排除的文件模式。 */</span></span>
<span class="line"><span style="color:#F6F6F4;">    exclude</span><span style="color:#F286C4;">?:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">[];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;">     * 这会将其余所有未声明的属性定义为 &#39;any&#39; 类型。</span></span>
<span class="line"><span style="color:#7B7F8B;">     */</span></span>
<span class="line"><span style="color:#F6F6F4;">    [</span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">]</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">any</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#7B7F8B;">// ---cut---</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">processOptions</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">opts</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Options</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 注意，我们不小心访问了错误的 \`excludes\`。</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 但是！这是合法的！</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> excludePattern </span><span style="color:#F286C4;">of</span><span style="color:#F6F6F4;"> opts.excludes) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// ...</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Options</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/** 要排除的文件模式。 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">exclude</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">[];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">     * 这会将其余所有未声明的属性定义为 &#39;any&#39; 类型。</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    [</span><span style="color:#E36209;">x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// ---cut---</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">processOptions</span><span style="color:#24292E;">(</span><span style="color:#E36209;">opts</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Options</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 注意，我们不小心访问了错误的 \`excludes\`。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 但是！这是合法的！</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">excludePattern</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> opts.excludes) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在某些情况下，用户会想要选择使用索引签名 - 在使用点号语法进行属性访问时，如果访问了没有明确定义的属性，就得到一个错误。</p><p>这就是为什么 TypeScript 引入了一个新的 <code>--noPropertyAccessFromIndexSignature</code> 编译选项。 在该模式下，你可以有选择的启用 TypeScript 之前的行为，即在上述使用场景中产生错误。 该编译选项不属于 <code>strict</code> 编译选项集合的一员，因为我们知道该功能只适用于部分用户。</p><p>更多详情，请参考 <a href="https://github.com/microsoft/TypeScript/pull/40171/" target="_blank" rel="noreferrer">PR</a>。 我们同时要感谢 <a href="https://github.com/Kingwl" target="_blank" rel="noreferrer">Wenlu Wang</a> 为该功能的付出！</p><h2 id="abstract-构造签名" tabindex="-1"><code>abstract</code> 构造签名 <a class="header-anchor" href="#abstract-构造签名" aria-label="Permalink to &quot;\`abstract\` 构造签名&quot;">​</a></h2><p>TypeScript 允许将一个类标记为 <em>abstract</em>。 这相当于告诉 TypeScript 这个类只是用于继承，并且有些成员需要在子类中实现，以便能够真正地创建出实例。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">abstract</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Shape</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">abstract</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getArea</span><span style="color:#F6F6F4;">()</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 不能创建抽象类的实例</span></span>
<span class="line"><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Shape</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Square</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Shape</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    #sideLength</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">constructor</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">sideLength</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">super</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.#sideLength </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> sideLength;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">getArea</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.#sideLength </span><span style="color:#F286C4;">**</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 没问题</span></span>
<span class="line"><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Square</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">42</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Shape</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getArea</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 不能创建抽象类的实例</span></span>
<span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Shape</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Square</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Shape</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">#sideLength</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">constructor</span><span style="color:#24292E;">(</span><span style="color:#E36209;">sideLength</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.#sideLength </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sideLength;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">getArea</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.#sideLength </span><span style="color:#D73A49;">**</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 没问题</span></span>
<span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Square</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">42</span><span style="color:#24292E;">);</span></span></code></pre></div><p>为了能够确保一贯的对 <code>new</code> 一个 <code>abstract</code> 类进行限制，不允许将 <code>abstract</code> 类赋值给接收构造签名的值。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">abstract</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Shape</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">abstract</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getArea</span><span style="color:#F6F6F4;">()</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">HasArea</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">getArea</span><span style="color:#F6F6F4;">()</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 不能将抽象构造函数类型赋值给非抽象构造函数类型。</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> Ctor</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> () </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">HasArea</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Shape;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Shape</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getArea</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HasArea</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">getArea</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 不能将抽象构造函数类型赋值给非抽象构造函数类型。</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> Ctor</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HasArea</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Shape;</span></span></code></pre></div><p>如果有代码调用了 <code>new Ctor</code>，那么上述的行为是正确的，但若想要编写 <code>Ctor</code> 的子类，就会出现过度限制的情况。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">abstract</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Shape</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">abstract</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getArea</span><span style="color:#F6F6F4;">()</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">HasArea</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">getArea</span><span style="color:#F6F6F4;">()</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">makeSubclassWithArea</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">Ctor</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> () </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">HasArea</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Ctor</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">getArea</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">42</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    };</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 不能将抽象构造函数类型赋值给非抽象构造函数类型。</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> MyShape </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">makeSubclassWithArea</span><span style="color:#F6F6F4;">(Shape);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Shape</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getArea</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HasArea</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">getArea</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">makeSubclassWithArea</span><span style="color:#24292E;">(</span><span style="color:#E36209;">Ctor</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HasArea</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Ctor</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">getArea</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">42</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 不能将抽象构造函数类型赋值给非抽象构造函数类型。</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> MyShape </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">makeSubclassWithArea</span><span style="color:#24292E;">(Shape);</span></span></code></pre></div><p>对于内置的工具类型<code>InstanceType</code>来讲，它也不是工作得很好。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 错误！</span></span>
<span class="line"><span style="color:#7B7F8B;">// 不能将抽象构造函数类型赋值给非抽象构造函数类型。</span></span>
<span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">MyInstance</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">InstanceType</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">typeof</span><span style="color:#F6F6F4;"> Shape&gt;;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 错误！</span></span>
<span class="line"><span style="color:#6A737D;">// 不能将抽象构造函数类型赋值给非抽象构造函数类型。</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyInstance</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InstanceType</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> Shape&gt;;</span></span></code></pre></div><p>这就是为什么 TypeScript 4.2 允许在构造签名上指定 <code>abstract</code> 修饰符。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">abstract</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Shape</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">abstract</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getArea</span><span style="color:#F6F6F4;">()</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#7B7F8B;">// ---cut---</span></span>
<span class="line"><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">HasArea</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">getArea</span><span style="color:#F6F6F4;">()</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// Works!</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> Ctor</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">abstract</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> () </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">HasArea</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Shape;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Shape</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getArea</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// ---cut---</span></span>
<span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HasArea</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">getArea</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Works!</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> Ctor</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HasArea</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Shape;</span></span></code></pre></div><p>在构造签名上添加 <code>abstract</code> 修饰符表示可以传入一个 <code>abstract</code> 构造函数。 它不会阻止你传入其它具体的类/构造函数 - 它只是想表达不会直接调用这个构造函数，因此可以安全地传入任意一种类类型。</p><p>这个特性允许我们编写支持抽象类的<em>混入工厂函数</em>。 例如，在下例中，我们可以同时使用混入函数 <code>withStyles</code> 和 <code>abstract</code> 类 <code>SuperClass</code>。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">abstract</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">SuperClass</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">abstract</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">someMethod</span><span style="color:#F6F6F4;">()</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">badda</span><span style="color:#F6F6F4;">() {}</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">AbstractConstructor</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F6F6F4;">&gt; </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">abstract</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">...</span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">any</span><span style="color:#F6F6F4;">[]) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">T</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">withStyles</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">AbstractConstructor</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#97E1F1;font-style:italic;">object</span><span style="color:#F6F6F4;">&gt;&gt;(</span><span style="color:#FFB86C;font-style:italic;">Ctor</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">abstract</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">StyledClass</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Ctor</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">getStyles</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// ...</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> StyledClass;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">SubClass</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">withStyles</span><span style="color:#F6F6F4;">(SuperClass) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">someMethod</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">someMethod</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SuperClass</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">someMethod</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">void</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">badda</span><span style="color:#24292E;">() {}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AbstractConstructor</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">...</span><span style="color:#E36209;">args</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;">[]) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">withStyles</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AbstractConstructor</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">object</span><span style="color:#24292E;">&gt;&gt;(</span><span style="color:#E36209;">Ctor</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StyledClass</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Ctor</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">getStyles</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> StyledClass;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SubClass</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">withStyles</span><span style="color:#24292E;">(SuperClass) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">someMethod</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">someMethod</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>注意，<code>withStyles</code> 展示了一个特殊的规则，若一个类（<code>StyledClass</code>）继承了被抽象构造函数所约束的泛型值，那么这个类也需要被声明为 <code>abstract</code>。 由于无法知道传入的类是否拥有更多的抽象成员，因此也无法知道子类是否实现了所有的抽象成员。</p><p>更多详情，请参考 <a href="https://github.com/microsoft/TypeScript/pull/36392" target="_blank" rel="noreferrer">PR</a>。</p><h2 id="使用-explainfiles-来理解工程的结构" tabindex="-1">使用 <code>--explainFiles</code> 来理解工程的结构 <a class="header-anchor" href="#使用-explainfiles-来理解工程的结构" aria-label="Permalink to &quot;使用 \`--explainFiles\` 来理解工程的结构&quot;">​</a></h2><p>TypeScript 用户时常会问“为什么 TypeScript 包含了这个文件？”。 推断程序中所包含的文件是个很复杂的过程，比如有很多原因会导致使用了 <code>lib.d.ts</code> 文件的组合，会导致 <code>node_modules</code> 中的文件被包含进来，会导致有些已经 <code>exclude</code> 的文件被包含进来。</p><p>这就是 TypeScript 提供 <code>--explainFiles</code> 的原因。</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">tsc </span><span style="color:#BF9EEE;">--explainFiles</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">tsc</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--explainFiles</span></span></code></pre></div><p>在使用了该选项时，TypeScript 编译器会输出非常详细的信息来说明某个文件被包含进工程的原因。 为了更易理解，我们可以把输出结果存到文件里，或者通过管道使用其它命令来查看它。</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;"># 将输出保存到文件</span></span>
<span class="line"><span style="color:#F6F6F4;">tsc </span><span style="color:#BF9EEE;">--explainFiles</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">expanation.txt</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;"># 将输出传递给工具程序 \`less\`，或编辑器 VS Code</span></span>
<span class="line"><span style="color:#F6F6F4;">tsc </span><span style="color:#BF9EEE;">--explainFiles</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> less</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">tsc </span><span style="color:#BF9EEE;">--explainFiles</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> code </span><span style="color:#E7EE98;">-</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 将输出保存到文件</span></span>
<span class="line"><span style="color:#6F42C1;">tsc</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--explainFiles</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">expanation.txt</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 将输出传递给工具程序 \`less\`，或编辑器 VS Code</span></span>
<span class="line"><span style="color:#6F42C1;">tsc</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--explainFiles</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">less</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">tsc</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--explainFiles</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">code</span><span style="color:#24292E;"> </span><span style="color:#032F62;">-</span></span></code></pre></div><p>通常，输出结果首先会给列出包含 <code>lib.d.ts</code> 文件的原因，然后是本地文件，再然后是 <code>node_modules</code> 文件。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">TS_Compiler_Directory/4.2.2/lib/lib.es5.d.ts</span></span>
<span class="line"><span style="color:#f6f6f4;">  Library referenced via &#39;es5&#39; from file &#39;TS_Compiler_Directory/4.2.2/lib/lib.es2015.d.ts&#39;</span></span>
<span class="line"><span style="color:#f6f6f4;">TS_Compiler_Directory/4.2.2/lib/lib.es2015.d.ts</span></span>
<span class="line"><span style="color:#f6f6f4;">  Library referenced via &#39;es2015&#39; from file &#39;TS_Compiler_Directory/4.2.2/lib/lib.es2016.d.ts&#39;</span></span>
<span class="line"><span style="color:#f6f6f4;">TS_Compiler_Directory/4.2.2/lib/lib.es2016.d.ts</span></span>
<span class="line"><span style="color:#f6f6f4;">  Library referenced via &#39;es2016&#39; from file &#39;TS_Compiler_Directory/4.2.2/lib/lib.es2017.d.ts&#39;</span></span>
<span class="line"><span style="color:#f6f6f4;">TS_Compiler_Directory/4.2.2/lib/lib.es2017.d.ts</span></span>
<span class="line"><span style="color:#f6f6f4;">  Library referenced via &#39;es2017&#39; from file &#39;TS_Compiler_Directory/4.2.2/lib/lib.es2018.d.ts&#39;</span></span>
<span class="line"><span style="color:#f6f6f4;">TS_Compiler_Directory/4.2.2/lib/lib.es2018.d.ts</span></span>
<span class="line"><span style="color:#f6f6f4;">  Library referenced via &#39;es2018&#39; from file &#39;TS_Compiler_Directory/4.2.2/lib/lib.es2019.d.ts&#39;</span></span>
<span class="line"><span style="color:#f6f6f4;">TS_Compiler_Directory/4.2.2/lib/lib.es2019.d.ts</span></span>
<span class="line"><span style="color:#f6f6f4;">  Library referenced via &#39;es2019&#39; from file &#39;TS_Compiler_Directory/4.2.2/lib/lib.es2020.d.ts&#39;</span></span>
<span class="line"><span style="color:#f6f6f4;">TS_Compiler_Directory/4.2.2/lib/lib.es2020.d.ts</span></span>
<span class="line"><span style="color:#f6f6f4;">  Library referenced via &#39;es2020&#39; from file &#39;TS_Compiler_Directory/4.2.2/lib/lib.esnext.d.ts&#39;</span></span>
<span class="line"><span style="color:#f6f6f4;">TS_Compiler_Directory/4.2.2/lib/lib.esnext.d.ts</span></span>
<span class="line"><span style="color:#f6f6f4;">  Library &#39;lib.esnext.d.ts&#39; specified in compilerOptions</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">... More Library References...</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">foo.ts</span></span>
<span class="line"><span style="color:#f6f6f4;">  Matched by include pattern &#39;**/*&#39; in &#39;tsconfig.json&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">TS_Compiler_Directory/4.2.2/lib/lib.es5.d.ts</span></span>
<span class="line"><span style="color:#24292e;">  Library referenced via &#39;es5&#39; from file &#39;TS_Compiler_Directory/4.2.2/lib/lib.es2015.d.ts&#39;</span></span>
<span class="line"><span style="color:#24292e;">TS_Compiler_Directory/4.2.2/lib/lib.es2015.d.ts</span></span>
<span class="line"><span style="color:#24292e;">  Library referenced via &#39;es2015&#39; from file &#39;TS_Compiler_Directory/4.2.2/lib/lib.es2016.d.ts&#39;</span></span>
<span class="line"><span style="color:#24292e;">TS_Compiler_Directory/4.2.2/lib/lib.es2016.d.ts</span></span>
<span class="line"><span style="color:#24292e;">  Library referenced via &#39;es2016&#39; from file &#39;TS_Compiler_Directory/4.2.2/lib/lib.es2017.d.ts&#39;</span></span>
<span class="line"><span style="color:#24292e;">TS_Compiler_Directory/4.2.2/lib/lib.es2017.d.ts</span></span>
<span class="line"><span style="color:#24292e;">  Library referenced via &#39;es2017&#39; from file &#39;TS_Compiler_Directory/4.2.2/lib/lib.es2018.d.ts&#39;</span></span>
<span class="line"><span style="color:#24292e;">TS_Compiler_Directory/4.2.2/lib/lib.es2018.d.ts</span></span>
<span class="line"><span style="color:#24292e;">  Library referenced via &#39;es2018&#39; from file &#39;TS_Compiler_Directory/4.2.2/lib/lib.es2019.d.ts&#39;</span></span>
<span class="line"><span style="color:#24292e;">TS_Compiler_Directory/4.2.2/lib/lib.es2019.d.ts</span></span>
<span class="line"><span style="color:#24292e;">  Library referenced via &#39;es2019&#39; from file &#39;TS_Compiler_Directory/4.2.2/lib/lib.es2020.d.ts&#39;</span></span>
<span class="line"><span style="color:#24292e;">TS_Compiler_Directory/4.2.2/lib/lib.es2020.d.ts</span></span>
<span class="line"><span style="color:#24292e;">  Library referenced via &#39;es2020&#39; from file &#39;TS_Compiler_Directory/4.2.2/lib/lib.esnext.d.ts&#39;</span></span>
<span class="line"><span style="color:#24292e;">TS_Compiler_Directory/4.2.2/lib/lib.esnext.d.ts</span></span>
<span class="line"><span style="color:#24292e;">  Library &#39;lib.esnext.d.ts&#39; specified in compilerOptions</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">... More Library References...</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">foo.ts</span></span>
<span class="line"><span style="color:#24292e;">  Matched by include pattern &#39;**/*&#39; in &#39;tsconfig.json&#39;</span></span></code></pre></div><p>目前，TypeScript 不保证输出文件的格式 - 它在将来可能会改变。 关于这一点，我们也打算改进输出文件格式，请给出你的建议！</p><p>更多详情，请参考 <a href="https://github.com/microsoft/TypeScript/pull/40011" target="_blank" rel="noreferrer">PR</a>！</p><h2 id="改进逻辑表达式中的未被调用函数检查" tabindex="-1">改进逻辑表达式中的未被调用函数检查 <a class="header-anchor" href="#改进逻辑表达式中的未被调用函数检查" aria-label="Permalink to &quot;改进逻辑表达式中的未被调用函数检查&quot;">​</a></h2><p>感谢 <a href="https://github.com/a-tarasyuk" target="_blank" rel="noreferrer">Alex Tarasyuk</a> 提供的持续改进，TypeScript 中的未调用函数检查现在也作用于 <code>&amp;&amp;</code> 和 <code>||</code> 表达式。</p><p>在 <code>--strictNullChecks</code> 模式下，下面的代码会产生错误。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">shouldDisplayElement</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">element</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Element</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// ...</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getVisibleItems</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">elements</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Element</span><span style="color:#F6F6F4;">[]) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> elements.</span><span style="color:#62E884;">filter</span><span style="color:#F6F6F4;">((</span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> shouldDisplayElement </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> e.children.length);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//                          ~~~~~~~~~~~~~~~~~~~~</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 该条件表达式永远返回 true，因为函数永远是定义了的。</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 你是否想要调用它？</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">shouldDisplayElement</span><span style="color:#24292E;">(</span><span style="color:#E36209;">element</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Element</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getVisibleItems</span><span style="color:#24292E;">(</span><span style="color:#E36209;">elements</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Element</span><span style="color:#24292E;">[]) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> elements.</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">((</span><span style="color:#E36209;">e</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> shouldDisplayElement </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> e.children.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//                          ~~~~~~~~~~~~~~~~~~~~</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 该条件表达式永远返回 true，因为函数永远是定义了的。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 你是否想要调用它？</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>更多详情，请参考 <a href="https://github.com/microsoft/TypeScript/issues/40197" target="_blank" rel="noreferrer">PR</a>。</p><h2 id="解构出来的变量可以被明确地标记为未使用的" tabindex="-1">解构出来的变量可以被明确地标记为未使用的 <a class="header-anchor" href="#解构出来的变量可以被明确地标记为未使用的" aria-label="Permalink to &quot;解构出来的变量可以被明确地标记为未使用的&quot;">​</a></h2><p>感谢 <a href="https://github.com/a-tarasyuk" target="_blank" rel="noreferrer">Alex Tarasyuk</a> 提供的另一个 PR，你可以使用下划线（<code>_</code> 字符）将解构变量标记为未使用的。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> [_first, second] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getValues</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> [_first, second] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getValues</span><span style="color:#24292E;">();</span></span></code></pre></div><p>在之前，如果 <code>_first</code> 未被使用，那么在启用了 <code>noUnusedLocals</code> 时 TypeScript 会产生一个错误。 现在，TypeScript 会识别出使用了下划线的 <code>_first</code> 变量是有意的未使用的变量。</p><p>更多详情，请参考 <a href="https://github.com/microsoft/TypeScript/pull/41378" target="_blank" rel="noreferrer">PR</a>。</p><h2 id="放宽了在可选属性和字符串索引签名间的限制" tabindex="-1">放宽了在可选属性和字符串索引签名间的限制 <a class="header-anchor" href="#放宽了在可选属性和字符串索引签名间的限制" aria-label="Permalink to &quot;放宽了在可选属性和字符串索引签名间的限制&quot;">​</a></h2><p>字符串索引签名可用于为类似于字典的对象添加类型，它表示允许使用任意的键来访问对象：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> movieWatchCount</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> { [</span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">]</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;"> } </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">watchMovie</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">title</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    movieWatchCount[title] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (movieWatchCount[title] </span><span style="color:#F286C4;">??</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">movieWatchCount</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> { [</span><span style="color:#E36209;">key</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">watchMovie</span><span style="color:#24292E;">(</span><span style="color:#E36209;">title</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    movieWatchCount[title] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (movieWatchCount[title] </span><span style="color:#D73A49;">??</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>当然了，对于不在字典中的电影名而言 <code>movieWatchCount[title]</code> 的值为 <code>undefined</code>。（TypeScript 4.1 增加了 <a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-1.html#checked-indexed-accesses---nouncheckedindexedaccess" target="_blank" rel="noreferrer"><code>--noUncheckedIndexedAccess</code></a> 选项，在访问索引签名时会增加 <code>undefined</code> 值。） 即便一定会有 <code>movieWatchCount</code> 中不存在的属性，但在之前的版本中，由于 <code>undefined</code> 值的存在，TypeScript 会将可选对象属性视为不可以赋值给兼容的索引签名。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">WesAndersonWatchCount</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Fantastic Mr. Fox</span><span style="color:#DEE492;">&#39;</span><span style="color:#F286C4;">?:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">The Royal Tenenbaums</span><span style="color:#DEE492;">&#39;</span><span style="color:#F286C4;">?:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Moonrise Kingdom</span><span style="color:#DEE492;">&#39;</span><span style="color:#F286C4;">?:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">The Grand Budapest Hotel</span><span style="color:#DEE492;">&#39;</span><span style="color:#F286C4;">?:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">declare</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> wesAndersonWatchCount</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">WesAndersonWatchCount</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> movieWatchCount</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> { [</span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">]</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;"> } </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> wesAndersonWatchCount;</span></span>
<span class="line"><span style="color:#7B7F8B;">//    ~~~~~~~~~~~~~~~ 错误！</span></span>
<span class="line"><span style="color:#7B7F8B;">// 类型 &#39;WesAndersonWatchCount&#39; 不允许赋值给类型 &#39;{ [key: string]: number; }&#39;。</span></span>
<span class="line"><span style="color:#7B7F8B;">//    属性 &#39;&quot;Fantastic Mr. Fox&quot;&#39; 与索引签名不兼容。</span></span>
<span class="line"><span style="color:#7B7F8B;">//      类型 &#39;number | undefined&#39; 不允许赋值给类型 &#39;number&#39;。</span></span>
<span class="line"><span style="color:#7B7F8B;">//        类型 &#39;undefined&#39; 不允许赋值给类型 &#39;number&#39;。 (2322)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WesAndersonWatchCount</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;Fantastic Mr. Fox&#39;</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;The Royal Tenenbaums&#39;</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;Moonrise Kingdom&#39;</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;The Grand Budapest Hotel&#39;</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">declare</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">wesAndersonWatchCount</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WesAndersonWatchCount</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">movieWatchCount</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> { [</span><span style="color:#E36209;">key</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> wesAndersonWatchCount;</span></span>
<span class="line"><span style="color:#6A737D;">//    ~~~~~~~~~~~~~~~ 错误！</span></span>
<span class="line"><span style="color:#6A737D;">// 类型 &#39;WesAndersonWatchCount&#39; 不允许赋值给类型 &#39;{ [key: string]: number; }&#39;。</span></span>
<span class="line"><span style="color:#6A737D;">//    属性 &#39;&quot;Fantastic Mr. Fox&quot;&#39; 与索引签名不兼容。</span></span>
<span class="line"><span style="color:#6A737D;">//      类型 &#39;number | undefined&#39; 不允许赋值给类型 &#39;number&#39;。</span></span>
<span class="line"><span style="color:#6A737D;">//        类型 &#39;undefined&#39; 不允许赋值给类型 &#39;number&#39;。 (2322)</span></span></code></pre></div><p>TypeScript 4.2 允许这样赋值。 但是不允许使用带有 <code>undefined</code> 类型的非可选属性进行赋值，也不允许将 <code>undefined</code> 值直接赋值给某个属性：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">BatmanWatchCount</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Batman Begins</span><span style="color:#DEE492;">&#39;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">undefined</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">The Dark Knight</span><span style="color:#DEE492;">&#39;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">undefined</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">The Dark Knight Rises</span><span style="color:#DEE492;">&#39;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">undefined</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">declare</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> batmanWatchCount</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">BatmanWatchCount</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 在 TypeScript 4.2 中仍是错误。</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> movieWatchCount</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> { [</span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">]</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;"> } </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> batmanWatchCount;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 在 TypeScript 4.2 中仍是错误。</span></span>
<span class="line"><span style="color:#7B7F8B;">// 索引签名不允许显式地赋值 \`undefined\`。</span></span>
<span class="line"><span style="color:#F6F6F4;">movieWatchCount[</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">It&#39;s the Great Pumpkin, Charlie Brown</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">undefined</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BatmanWatchCount</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;Batman Begins&#39;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;The Dark Knight&#39;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;The Dark Knight Rises&#39;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">declare</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">batmanWatchCount</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BatmanWatchCount</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 在 TypeScript 4.2 中仍是错误。</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">movieWatchCount</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> { [</span><span style="color:#E36209;">key</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> batmanWatchCount;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 在 TypeScript 4.2 中仍是错误。</span></span>
<span class="line"><span style="color:#6A737D;">// 索引签名不允许显式地赋值 \`undefined\`。</span></span>
<span class="line"><span style="color:#24292E;">movieWatchCount[</span><span style="color:#032F62;">&quot;It&#39;s the Great Pumpkin, Charlie Brown&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">;</span></span></code></pre></div><p>这条新规则不适用于数字索引签名，因为它们被当成是类数组的并且是稠密的：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">declare</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> sortOfArrayish</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> { [</span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">]</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;"> };</span></span>
<span class="line"><span style="color:#F286C4;">declare</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> numberKeys</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> { </span><span style="color:#BF9EEE;">42</span><span style="color:#F286C4;">?:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">sortOfArrayish </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> numberKeys;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">declare</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> sortOfArrayish</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> { [</span><span style="color:#E36209;">key</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#D73A49;">declare</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> numberKeys</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">42</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">sortOfArrayish </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> numberKeys;</span></span></code></pre></div><p>更多详情，请参考 <a href="https://github.com/microsoft/TypeScript/pull/41921" target="_blank" rel="noreferrer">PR</a>。</p><h2 id="声明缺失的函数" tabindex="-1">声明缺失的函数 <a class="header-anchor" href="#声明缺失的函数" aria-label="Permalink to &quot;声明缺失的函数&quot;">​</a></h2><p>感谢 <a href="https://github.com/a-tarasyuk" target="_blank" rel="noreferrer">Alexander Tarasyuk</a> 提交的 <a href="https://github.com/microsoft/TypeScript/pull/41215" target="_blank" rel="noreferrer">PR</a>，TypeScript 支持了一个新的快速修复功能，那就是根据调用方来生成新的函数和方法声明！</p><p><img src="https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2021/01/addMissingFunction-4.2.gif" alt="一个未被声明的  函数被调用了，使用快速修复"></p>`,93),e=[o];function t(c,r,y,F,i,E){return n(),a("div",null,e)}const u=s(p,[["render",t]]);export{d as __pageData,u as default};
