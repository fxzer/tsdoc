import{_ as s,o as a,c as n,V as e}from"./chunks/framework.ced88878.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"en/tsconfig-reference/index.md","lastUpdated":1682921420000}'),o={name:"en/tsconfig-reference/index.md"},l=e(`<h2 id="foreword" tabindex="-1">Foreword <a class="header-anchor" href="#foreword" aria-label="Permalink to &quot;Foreword&quot;">​</a></h2><p>A TSConfig file in a directory indicates that the directory is the root of a TypeScript or JavaScript project. The TSConfig file can be either a <code>tsconfig.json</code> or <code>jsconfig.json</code>, both have the same set of config variables.</p><p>This page covers all of the different options available inside a TSConfig file. There are over 100 options, and this page is not built to be read from top to bottom. Instead it has five main sections:</p><ul><li>A categorized overview of all compiler flags</li><li>The <a href="#Project_Files_0">root fields</a> for letting TypeScript know what files are available</li><li>The <a href="#compilerOptions"><code>compilerOptions</code></a> fields, this is the majority of the document</li><li>The <a href="#watchOptions"><code>watchOptions</code></a> fields, for tweaking the watch mode</li><li>The <a href="#typeAcquisition"><code>typeAcquisition</code></a> fields, for tweaking the how types are added to JavaScript projects</li></ul><p>If you are starting a TSConfig from scratch, you may want to consider using <code>tsc --init</code> to bootstrap or use a <a href="https://github.com/tsconfig/bases#centralized-recommendations-for-tsconfig-bases" target="_blank" rel="noreferrer">TSConfig base</a>.</p><h2 id="generating-the-tsconfig-reference" tabindex="-1">Generating the TSConfig Reference <a class="header-anchor" href="#generating-the-tsconfig-reference" aria-label="Permalink to &quot;Generating the TSConfig Reference&quot;">​</a></h2><p>This &quot;package&quot; hosts multi-lingual docs for the TSConfig. As much as possible is based off pulling data from <code>require(&quot;typescript&quot;)</code> then augmented with markdown from inside the <a href="./copy"><code>./copy</code></a> folder.</p><p>Roughly:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">TypeScript </span><span style="color:#E7EE98;">Compiler</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">\`tsconfigRules.ts\`</span><span style="color:#F6F6F4;"> -&gt; </span><span style="color:#E7EE98;">\`generateJSON.ts\`</span><span style="color:#F6F6F4;"> -&gt; </span><span style="color:#E7EE98;">JSON</span><span style="color:#F6F6F4;"> (in output) -</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">\`generateMarkdown.ts\`</span><span style="color:#F6F6F4;"> -&gt; </span><span style="color:#E7EE98;">Markdown</span><span style="color:#F6F6F4;"> (in output)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">TypeScript</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Compiler</span><span style="color:#24292E;"> </span><span style="color:#032F62;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`</span><span style="color:#6F42C1;">tsconfigRules.ts</span><span style="color:#032F62;">\`</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`</span><span style="color:#6F42C1;">generateJSON.ts</span><span style="color:#032F62;">\`</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">JSON</span><span style="color:#24292E;"> (in output) -</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`</span><span style="color:#6F42C1;">generateMarkdown.ts</span><span style="color:#032F62;">\`</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Markdown</span><span style="color:#24292E;"> (in output)</span></span></code></pre></div><p>This happens per-language with fallbacks to English for any missing docs.</p><h2 id="contributing" tabindex="-1">Contributing <a class="header-anchor" href="#contributing" aria-label="Permalink to &quot;Contributing&quot;">​</a></h2><p>To improve a single compiler option&#39;s documentation; all you need to do is go into the <a href="./copy"><code>./copy</code></a> folder and edit the page option in markdown and send a PR. No need to leave GitHub.</p><p>Then, during a deploy, all of the markdown files are bundled together and any merged changes are uploaded.</p><h2 id="contributing-a-new-language" tabindex="-1">Contributing a new language <a class="header-anchor" href="#contributing-a-new-language" aria-label="Permalink to &quot;Contributing a new language&quot;">​</a></h2><p>If you&#39;d like to create a new language:</p><p>Create a new subfolder in <code>./copy</code> with your language code and then make sure the files you work on have the same name as English and your changes will overwrite the English version. You will need</p><h2 id="building" tabindex="-1">Building <a class="header-anchor" href="#building" aria-label="Permalink to &quot;Building&quot;">​</a></h2><p>The TSConfig reference is created by a two step process:</p><ul><li>Creating the JSON dump of all the useful info via <a href="scripts/generateJSON.ts"><code>./scripts/generateJSON.ts</code></a> which you can find in <a href="./data"><code>./data</code></a>.</li><li>A script which uses the JSON, and the copy to generate per-language markdown docs which are picked up by the typescriptlang-org Gatsby site at <code>http://localhost:8000/tsconfig</code></li></ul><p>You can run these commands from the root of the repo:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">yarn </span><span style="color:#E7EE98;">workspace</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">tsconfig-reference</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">run</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">generate-json</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">yarn </span><span style="color:#E7EE98;">workspace</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">tsconfig-reference</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">run</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">generate-markdown</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">yarn</span><span style="color:#24292E;"> </span><span style="color:#032F62;">workspace</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tsconfig-reference</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">generate-json</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">yarn</span><span style="color:#24292E;"> </span><span style="color:#032F62;">workspace</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tsconfig-reference</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">generate-markdown</span></span></code></pre></div><p>You can validate any codeblocks which use via the script:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">yarn </span><span style="color:#E7EE98;">workspace</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">tsconfig-reference</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">run</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">test</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;"># or to just run the linter without a build</span></span>
<span class="line"><span style="color:#F6F6F4;">yarn </span><span style="color:#E7EE98;">workspace</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">tsconfig-reference</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">run</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">lint</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;"># or to just one one linter</span></span>
<span class="line"><span style="color:#F6F6F4;">yarn </span><span style="color:#E7EE98;">workspace</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">tsconfig-reference</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">run</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">lint</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">resolveJson</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">yarn</span><span style="color:#24292E;"> </span><span style="color:#032F62;">workspace</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tsconfig-reference</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># or to just run the linter without a build</span></span>
<span class="line"><span style="color:#6F42C1;">yarn</span><span style="color:#24292E;"> </span><span style="color:#032F62;">workspace</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tsconfig-reference</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">lint</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># or to just one one linter</span></span>
<span class="line"><span style="color:#6F42C1;">yarn</span><span style="color:#24292E;"> </span><span style="color:#032F62;">workspace</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tsconfig-reference</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">lint</span><span style="color:#24292E;"> </span><span style="color:#032F62;">resolveJson</span></span></code></pre></div><p>You can debug by setting the environment var <code>DEBUG=&quot;*&quot;</code> in all of these too.</p>`,24),t=[l];function p(r,c,i,y,d,h){return a(),n("div",null,t)}const u=s(o,[["render",p]]);export{g as __pageData,u as default};
