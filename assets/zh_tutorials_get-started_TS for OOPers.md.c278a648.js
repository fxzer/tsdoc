import{_ as s,o as a,c as n,V as p}from"./chunks/framework.ced88878.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"zh/tutorials/get-started/TS for OOPers.md","lastUpdated":1682921420000}'),l={name:"zh/tutorials/get-started/TS for OOPers.md"},o=p(`<p>对于习惯于使用其他静态类型语言（例如 C# 和 Java）的程序员来说，TypeScript 是一个流行的选择。</p><p>TypeScript 的类型系统提供了许多相同的好处，例如更好的代码完成、更早的错误检测以及程序各部分之间更清晰的通信。 虽然 TypeScript 为这些开发人员提供了许多熟悉的功能，但值得回头看看 JavaScript（以及 TypeScript）与传统 OOP 语言有何不同。 了解这些差异将帮助您编写更好的 JavaScript 代码，并避免直接从 C#/Java 转到 TypeScript 的程序员可能掉入的常见陷阱。</p><h2 id="共同学习-javascript" tabindex="-1">共同学习 JavaScript <a class="header-anchor" href="#共同学习-javascript" aria-label="Permalink to &quot;共同学习 JavaScript&quot;">​</a></h2><p>如果您已经熟悉 JavaScript 但主要是 Java 或 C# 程序员，则此介绍性页面可以帮助解释您可能容易陷入的一些常见误解和陷阱。 TypeScript 建模类型的一些方式与 Java 或 C# 完全不同，在学习 TypeScript 时记住这些很重要。</p><p>如果您是一般不熟悉 JavaScript 的 Java 或 C# 程序员，我们建议您先学习一些 <em>without</em> 类型的 JavaScript，以了解 JavaScript 的运行时行为。 因为 TypeScript 不会改变您的代码_运行_的方式，您仍然需要学习 JavaScript 的工作原理才能编写真正执行某些操作的代码！</p><p>重要的是要记住 TypeScript 使用与 JavaScript 相同的_runtime_，因此关于如何完成特定运行时行为（将字符串转换为数字、显示警报、将文件写入磁盘等）的任何资源都将始终同样适用于 打字稿程序。 不要将自己局限于特定于 TypeScript 的资源！</p><h2 id="重新思考类" tabindex="-1">重新思考类 <a class="header-anchor" href="#重新思考类" aria-label="Permalink to &quot;重新思考类&quot;">​</a></h2><p>C# 和 Java 是我们所说的_强制性 OOP_ 语言。 在这些语言中，类是代码组织的基本单位，也是运行时所有数据和行为的基本容器。 强制将所有功能和数据保存在类中可能是解决某些问题的良好域模型，但并非每个域都_需要_以这种方式表示。</p><h3 id="免费函数和数据" tabindex="-1">免费函数和数据 <a class="header-anchor" href="#免费函数和数据" aria-label="Permalink to &quot;免费函数和数据&quot;">​</a></h3><p>在 JavaScript 中，函数可以存在于任何地方，数据可以自由传递，而无需在预定义的“类”或“结构”中。 这种灵活性非常强大。 在没有隐含的 OOP 层次结构的情况下处理数据的“自由”函数（那些与类无关的函数）往往是用 JavaScript 编写程序的首选模型。</p><h3 id="静态类" tabindex="-1">静态类 <a class="header-anchor" href="#静态类" aria-label="Permalink to &quot;静态类&quot;">​</a></h3><p>此外，TypeScript 中不需要来自 C# 和 Java 的某些构造，例如单例和静态类。</p><h2 id="typescript-中的-oop" tabindex="-1">TypeScript 中的 OOP <a class="header-anchor" href="#typescript-中的-oop" aria-label="Permalink to &quot;TypeScript 中的 OOP&quot;">​</a></h2><p>也就是说，如果您愿意，您仍然可以使用课程！ 有些问题很适合通过传统的 OOP 层次结构来解决，而 TypeScript 对 JavaScript 类的支持将使这些模型更加强大。 TypeScript 支持许多常见模式，例如实现接口、继承和静态方法。</p><p>我们将在本指南的后面介绍类。</p><h2 id="重新思考类型" tabindex="-1">重新思考类型 <a class="header-anchor" href="#重新思考类型" aria-label="Permalink to &quot;重新思考类型&quot;">​</a></h2><p>TypeScript 对 <em>type</em> 的理解实际上与 C# 或 Java 有很大不同。 让我们探讨一些差异。</p><h3 id="标称具体化类型系统" tabindex="-1">标称具体化类型系统 <a class="header-anchor" href="#标称具体化类型系统" aria-label="Permalink to &quot;标称具体化类型系统&quot;">​</a></h3><p>在 C# 或 Java 中，任何给定的值或对象都具有一种确切的类型——“null”、原始类型或已知类类型。 我们可以调用 <code>value.GetType()</code> 或 <code>value.getClass()</code> 之类的方法来在运行时查询确切的类型。 这种类型的定义将驻留在某个具有某个名称的类中，我们不能使用两个具有相似形状的类来代替彼此，除非存在显式继承关系或共同实现的接口。</p><p>这些方面描述了一个_具体化的、名义上的_类型系统。 我们在代码中编写的类型在运行时存在，类型通过它们的声明而不是它们的结构相关。</p><h3 id="类型作为集合" tabindex="-1">类型作为集合 <a class="header-anchor" href="#类型作为集合" aria-label="Permalink to &quot;类型作为集合&quot;">​</a></h3><p>在 C# 或 Java 中，考虑运行时类型与其编译时声明之间的一对一对应关系是有意义的。</p><p>在 TypeScript 中，最好将类型视为具有共同点的_一组值_。 因为类型只是集合，所以一个特定的值可以同时属于_许多_集合。</p><p>一旦开始将类型视为集合，某些操作就会变得非常自然。 例如，在 C# 中，传递 <em>either</em> <code>string</code> 或 <code>int</code> 的值是很尴尬的，因为没有一种类型可以表示这种值。</p><p>在 TypeScript 中，一旦你意识到每个类型只是一个集合，这就变得很自然了。 您如何描述属于 <code>string</code> 集合或 <code>number</code> 集合的值？ 它只是属于这些集合的_union_：<code>string | number</code>。</p><p>TypeScript 提供了许多机制来以集合论的方式处理类型，如果您将类型视为集合，您会发现它们更直观。</p><h3 id="擦除的结构类型" tabindex="-1">擦除的结构类型 <a class="header-anchor" href="#擦除的结构类型" aria-label="Permalink to &quot;擦除的结构类型&quot;">​</a></h3><p>在 TypeScript 中，对象_不_属于单一的确切类型。 例如，如果我们构造一个满足接口的对象，我们可以在需要该接口的地方使用该对象，即使两者之间没有声明关系。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Pointlike</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  y</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Named</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  name</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">logPoint</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">point</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Pointlike</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">x = </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> point.x </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">, y = </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> point.y);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">logName</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Named</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Hello, </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> x.name);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> obj </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  y</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  name</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Origin</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">logPoint</span><span style="color:#F6F6F4;">(obj);</span></span>
<span class="line"><span style="color:#62E884;">logName</span><span style="color:#F6F6F4;">(obj);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Pointlike</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">y</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Named</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">logPoint</span><span style="color:#24292E;">(</span><span style="color:#E36209;">point</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Pointlike</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;x = &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> point.x </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;, y = &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> point.y);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">logName</span><span style="color:#24292E;">(</span><span style="color:#E36209;">x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Named</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hello, &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> x.name);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">obj</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  x: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  y: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  name: </span><span style="color:#032F62;">&quot;Origin&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">logPoint</span><span style="color:#24292E;">(obj);</span></span>
<span class="line"><span style="color:#6F42C1;">logName</span><span style="color:#24292E;">(obj);</span></span></code></pre></div><p>TypeScript 的类型系统是 <em>structural</em>，而不是名义上的：我们可以将 <code>obj</code> 用作 <code>Pointlike</code>，因为它具有 <code>x</code> 和 <code>y</code> 属性，它们都是数字。 类型之间的关系取决于它们包含的属性，而不是它们是否被声明为具有某种特定关系。</p><p>TypeScript 的类型系统也是 <em>not reified</em>：运行时没有任何东西可以告诉我们 <code>obj</code> 是 <code>Pointlike</code>。 事实上，<code>Pointlike</code> 类型在运行时_以任何形式_不存在。</p><p>回到 <em>types as sets</em> 的想法，我们可以将 obj 视为 Pointlike 值集和 Named 值集的成员。</p><h3 id="结构类型的后果" tabindex="-1">结构类型的后果 <a class="header-anchor" href="#结构类型的后果" aria-label="Permalink to &quot;结构类型的后果&quot;">​</a></h3><p>OOP 程序员经常对结构类型的两个特定方面感到惊讶。</p><h4 id="空类型" tabindex="-1">空类型 <a class="header-anchor" href="#空类型" aria-label="Permalink to &quot;空类型&quot;">​</a></h4><p>首先是 <em>empty type</em> 似乎出乎意料：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Empty</span><span style="color:#F6F6F4;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">fn</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">arg</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Empty</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// do something?</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// No error, but this isn&#39;t an &#39;Empty&#39; ?</span></span>
<span class="line"><span style="color:#62E884;">fn</span><span style="color:#F6F6F4;">({ k</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;"> });</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Empty</span><span style="color:#24292E;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">(</span><span style="color:#E36209;">arg</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Empty</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// do something?</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// No error, but this isn&#39;t an &#39;Empty&#39; ?</span></span>
<span class="line"><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">({ k: </span><span style="color:#005CC5;">10</span><span style="color:#24292E;"> });</span></span></code></pre></div><p>TypeScript 通过查看提供的参数是否为有效的“Empty”来确定此处对“fn”的调用是否有效。 它通过检查 <code>{ k: 10 }</code> 和 <code>class Empty { }</code> 的结构来做到这一点。 我们可以看到 <code>{ k: 10 }</code> 具有 <code>Empty</code> 的_所有_属性，因为 <code>Empty</code> 没有属性。 因此，这是一个有效的调用！</p><p>这可能看起来令人惊讶，但它最终与名义 OOP 语言中强制执行的关系非常相似。 子类不能_删除_其基类的属性，因为这样做会破坏派生类与其基类之间的自然子类型关系。 结构类型系统通过根据具有兼容类型的属性来描述子类型来简单地隐式识别这种关系。</p><h4 id="相同类型" tabindex="-1">相同类型 <a class="header-anchor" href="#相同类型" aria-label="Permalink to &quot;相同类型&quot;">​</a></h4><p>另一个经常出人意料的来源是相同的类型：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Car</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">drive</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// hit the gas</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Golfer</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">drive</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// hit the ball far</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// No error?</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> w</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Car</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Golfer</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Car</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">drive</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// hit the gas</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Golfer</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">drive</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// hit the ball far</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// No error?</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> w</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Car</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Golfer</span><span style="color:#24292E;">();</span></span></code></pre></div><p>同样，这不是错误，因为这些类的_结构_是相同的。 虽然这看起来像是一个潜在的混淆来源，但在实践中，不应该相关的相同类并不常见。</p><p>我们将在“类”一章中详细了解类之间的关系。</p><h3 id="反射" tabindex="-1">反射 <a class="header-anchor" href="#反射" aria-label="Permalink to &quot;反射&quot;">​</a></h3><p>OOP 程序员习惯于能够查询任何值的类型，甚至是通用值：</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// C#</span></span>
<span class="line"><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">LogType</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F6F6F4;">&gt;() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    Console.</span><span style="color:#62E884;">WriteLine</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">typeof</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;">).Name);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// C#</span></span>
<span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LogType</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">&gt;() {</span></span>
<span class="line"><span style="color:#24292E;">    Console.</span><span style="color:#6F42C1;">WriteLine</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">).Name);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>由于 TypeScript 的类型系统已被完全删除，因此有关例如 泛型类型参数的实例化在运行时不可用。</p><p>JavaScript 确实有一些有限的原语，如 typeof 和 instanceof，但请记住，这些运算符仍在处理类型擦除输出代码中存在的值。 例如，<code>typeof (new Car())</code> 将是 <code>&quot;object&quot;</code>，而不是 <code>Car</code> 或 <code>&quot;Car&quot;</code>。</p><h2 id="下一步" tabindex="-1">下一步 <a class="header-anchor" href="#下一步" aria-label="Permalink to &quot;下一步&quot;">​</a></h2><p>这是对日常 TypeScript 中使用的语法和工具的简要概述。 从这里，您可以：</p><ul><li><a href="/handbooks/handbook-v2/Basics">阅读完整手册</a></li><li><a href="https://www.typescriptlang.org/play#show-examples" target="_blank" rel="noreferrer">案例探索</a></li></ul>`,52),e=[o];function t(c,r,y,i,F,E){return a(),n("div",null,e)}const C=s(l,[["render",t]]);export{h as __pageData,C as default};
