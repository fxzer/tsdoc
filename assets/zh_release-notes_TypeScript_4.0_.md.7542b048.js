import{_ as s,o as n,c as a,V as l}from"./chunks/framework.ced88878.js";const d=JSON.parse('{"title":"TypeScript 4.0","description":"","frontmatter":{},"headers":[],"relativePath":"zh/release-notes/TypeScript[4.0].md","lastUpdated":1682921420000}'),p={name:"zh/release-notes/TypeScript[4.0].md"},o=l(`<h1 id="typescript-4-0" tabindex="-1">TypeScript 4.0 <a class="header-anchor" href="#typescript-4-0" aria-label="Permalink to &quot;TypeScript 4.0&quot;">​</a></h1><h2 id="可变参元组类型" tabindex="-1">可变参元组类型 <a class="header-anchor" href="#可变参元组类型" aria-label="Permalink to &quot;可变参元组类型&quot;">​</a></h2><p>在JavaScript中有一个函数<code>concat</code>，它接受两个数组或元组并将它们连接在一起构成一个新数组。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">concat</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">arr1</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">arr2</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> [</span><span style="color:#F286C4;">...</span><span style="color:#F6F6F4;">arr1, </span><span style="color:#F286C4;">...</span><span style="color:#F6F6F4;">arr2];</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">concat</span><span style="color:#24292E;">(</span><span style="color:#E36209;">arr1</span><span style="color:#24292E;">, </span><span style="color:#E36209;">arr2</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">arr1, </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">arr2];</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>再假设有一个<code>tail</code>函数，它接受一个数组或元组并返回除首个元素外的所有元素。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">tail</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">arg</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> [_, </span><span style="color:#F286C4;">...</span><span style="color:#F6F6F4;">result] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> arg;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> result;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tail</span><span style="color:#24292E;">(</span><span style="color:#E36209;">arg</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">_</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">...</span><span style="color:#005CC5;">result</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arg;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>那么，我们如何在TypeScript中为这两个函数添加类型？</p><p>在旧版本的TypeScript中，对于<code>concat</code>函数我们能做的是编写一些函数重载签名。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">concat</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">arr1</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [], </span><span style="color:#FFB86C;font-style:italic;">arr2</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [])</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [];</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">concat</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">A</span><span style="color:#F6F6F4;">&gt;(</span><span style="color:#FFB86C;font-style:italic;">arr1</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#97E1F1;font-style:italic;">A</span><span style="color:#F6F6F4;">], </span><span style="color:#FFB86C;font-style:italic;">arr2</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [])</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#97E1F1;font-style:italic;">A</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">concat</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">A</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">B</span><span style="color:#F6F6F4;">&gt;(</span><span style="color:#FFB86C;font-style:italic;">arr1</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#97E1F1;font-style:italic;">A</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">B</span><span style="color:#F6F6F4;">], </span><span style="color:#FFB86C;font-style:italic;">arr2</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [])</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#97E1F1;font-style:italic;">A</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">B</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">concat</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">A</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">B</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">C</span><span style="color:#F6F6F4;">&gt;(</span><span style="color:#FFB86C;font-style:italic;">arr1</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#97E1F1;font-style:italic;">A</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">B</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">C</span><span style="color:#F6F6F4;">], </span><span style="color:#FFB86C;font-style:italic;">arr2</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [])</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#97E1F1;font-style:italic;">A</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">B</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">C</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">concat</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">A</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">B</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">C</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">D</span><span style="color:#F6F6F4;">&gt;(</span><span style="color:#FFB86C;font-style:italic;">arr1</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#97E1F1;font-style:italic;">A</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">B</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">C</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">D</span><span style="color:#F6F6F4;">], </span><span style="color:#FFB86C;font-style:italic;">arr2</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [])</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#97E1F1;font-style:italic;">A</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">B</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">C</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">D</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">concat</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">A</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">B</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">C</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">D</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">E</span><span style="color:#F6F6F4;">&gt;(</span><span style="color:#FFB86C;font-style:italic;">arr1</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#97E1F1;font-style:italic;">A</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">B</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">C</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">D</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;">], </span><span style="color:#FFB86C;font-style:italic;">arr2</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [])</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#97E1F1;font-style:italic;">A</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">B</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">C</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">D</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">concat</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">A</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">B</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">C</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">D</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">E</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">F</span><span style="color:#F6F6F4;">&gt;(</span><span style="color:#FFB86C;font-style:italic;">arr1</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#97E1F1;font-style:italic;">A</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">B</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">C</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">D</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">F</span><span style="color:#F6F6F4;">], </span><span style="color:#FFB86C;font-style:italic;">arr2</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [])</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#97E1F1;font-style:italic;">A</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">B</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">C</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">D</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">F</span><span style="color:#F6F6F4;">];)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">concat</span><span style="color:#24292E;">(</span><span style="color:#E36209;">arr1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [], </span><span style="color:#E36209;">arr2</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [])</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [];</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">concat</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">A</span><span style="color:#24292E;">&gt;(</span><span style="color:#E36209;">arr1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#6F42C1;">A</span><span style="color:#24292E;">], </span><span style="color:#E36209;">arr2</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [])</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#6F42C1;">A</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">concat</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">A</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">B</span><span style="color:#24292E;">&gt;(</span><span style="color:#E36209;">arr1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#6F42C1;">A</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">B</span><span style="color:#24292E;">], </span><span style="color:#E36209;">arr2</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [])</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#6F42C1;">A</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">B</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">concat</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">A</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">B</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">C</span><span style="color:#24292E;">&gt;(</span><span style="color:#E36209;">arr1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#6F42C1;">A</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">B</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">C</span><span style="color:#24292E;">], </span><span style="color:#E36209;">arr2</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [])</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#6F42C1;">A</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">B</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">C</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">concat</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">A</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">B</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">C</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">D</span><span style="color:#24292E;">&gt;(</span><span style="color:#E36209;">arr1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#6F42C1;">A</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">B</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">C</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">D</span><span style="color:#24292E;">], </span><span style="color:#E36209;">arr2</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [])</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#6F42C1;">A</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">B</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">C</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">D</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">concat</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">A</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">B</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">C</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">D</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">E</span><span style="color:#24292E;">&gt;(</span><span style="color:#E36209;">arr1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#6F42C1;">A</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">B</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">C</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">D</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">E</span><span style="color:#24292E;">], </span><span style="color:#E36209;">arr2</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [])</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#6F42C1;">A</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">B</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">C</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">D</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">E</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">concat</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">A</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">B</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">C</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">D</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">E</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">F</span><span style="color:#24292E;">&gt;(</span><span style="color:#E36209;">arr1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#6F42C1;">A</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">B</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">C</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">D</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">E</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">F</span><span style="color:#24292E;">], </span><span style="color:#E36209;">arr2</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [])</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#6F42C1;">A</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">B</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">C</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">D</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">E</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">F</span><span style="color:#24292E;">];)</span></span></code></pre></div><p>在保持第二个数组为空的情况下，我们已经编写了七个重载签名。 接下来，让我们为<code>arr2</code>添加一个参数。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">concat</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">A2</span><span style="color:#F6F6F4;">&gt;(</span><span style="color:#FFB86C;font-style:italic;">arr1</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [], </span><span style="color:#FFB86C;font-style:italic;">arr2</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#97E1F1;font-style:italic;">A2</span><span style="color:#F6F6F4;">])</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#97E1F1;font-style:italic;">A2</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">concat</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">A1</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">A2</span><span style="color:#F6F6F4;">&gt;(</span><span style="color:#FFB86C;font-style:italic;">arr1</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#97E1F1;font-style:italic;">A1</span><span style="color:#F6F6F4;">], </span><span style="color:#FFB86C;font-style:italic;">arr2</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#97E1F1;font-style:italic;">A2</span><span style="color:#F6F6F4;">])</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#97E1F1;font-style:italic;">A1</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">A2</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">concat</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">A1</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">B1</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">A2</span><span style="color:#F6F6F4;">&gt;(</span><span style="color:#FFB86C;font-style:italic;">arr1</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#97E1F1;font-style:italic;">A1</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">B1</span><span style="color:#F6F6F4;">], </span><span style="color:#FFB86C;font-style:italic;">arr2</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#97E1F1;font-style:italic;">A2</span><span style="color:#F6F6F4;">])</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#97E1F1;font-style:italic;">A1</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">B1</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">A2</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">concat</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">A1</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">B1</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">C1</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">A2</span><span style="color:#F6F6F4;">&gt;(</span><span style="color:#FFB86C;font-style:italic;">arr1</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#97E1F1;font-style:italic;">A1</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">B1</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">C1</span><span style="color:#F6F6F4;">], </span><span style="color:#FFB86C;font-style:italic;">arr2</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#97E1F1;font-style:italic;">A2</span><span style="color:#F6F6F4;">])</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#97E1F1;font-style:italic;">A1</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">B1</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">C1</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">A2</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">concat</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">A1</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">B1</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">C1</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">D1</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">A2</span><span style="color:#F6F6F4;">&gt;(</span><span style="color:#FFB86C;font-style:italic;">arr1</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#97E1F1;font-style:italic;">A1</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">B1</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">C1</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">D1</span><span style="color:#F6F6F4;">], </span><span style="color:#FFB86C;font-style:italic;">arr2</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#97E1F1;font-style:italic;">A2</span><span style="color:#F6F6F4;">])</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#97E1F1;font-style:italic;">A1</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">B1</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">C1</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">D1</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">A2</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">concat</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">A1</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">B1</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">C1</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">D1</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">E1</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">A2</span><span style="color:#F6F6F4;">&gt;(</span><span style="color:#FFB86C;font-style:italic;">arr1</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#97E1F1;font-style:italic;">A1</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">B1</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">C1</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">D1</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">E1</span><span style="color:#F6F6F4;">], </span><span style="color:#FFB86C;font-style:italic;">arr2</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#97E1F1;font-style:italic;">A2</span><span style="color:#F6F6F4;">])</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#97E1F1;font-style:italic;">A1</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">B1</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">C1</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">D1</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">E1</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">A2</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">concat</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">A1</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">B1</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">C1</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">D1</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">E1</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">F1</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">A2</span><span style="color:#F6F6F4;">&gt;(</span><span style="color:#FFB86C;font-style:italic;">arr1</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#97E1F1;font-style:italic;">A1</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">B1</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">C1</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">D1</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">E1</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">F1</span><span style="color:#F6F6F4;">], </span><span style="color:#FFB86C;font-style:italic;">arr2</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#97E1F1;font-style:italic;">A2</span><span style="color:#F6F6F4;">])</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#97E1F1;font-style:italic;">A1</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">B1</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">C1</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">D1</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">E1</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">F1</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">A2</span><span style="color:#F6F6F4;">];</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">concat</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">A2</span><span style="color:#24292E;">&gt;(</span><span style="color:#E36209;">arr1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [], </span><span style="color:#E36209;">arr2</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#6F42C1;">A2</span><span style="color:#24292E;">])</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#6F42C1;">A2</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">concat</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">A1</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">A2</span><span style="color:#24292E;">&gt;(</span><span style="color:#E36209;">arr1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#6F42C1;">A1</span><span style="color:#24292E;">], </span><span style="color:#E36209;">arr2</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#6F42C1;">A2</span><span style="color:#24292E;">])</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#6F42C1;">A1</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">A2</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">concat</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">A1</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">B1</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">A2</span><span style="color:#24292E;">&gt;(</span><span style="color:#E36209;">arr1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#6F42C1;">A1</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">B1</span><span style="color:#24292E;">], </span><span style="color:#E36209;">arr2</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#6F42C1;">A2</span><span style="color:#24292E;">])</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#6F42C1;">A1</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">B1</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">A2</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">concat</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">A1</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">B1</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">C1</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">A2</span><span style="color:#24292E;">&gt;(</span><span style="color:#E36209;">arr1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#6F42C1;">A1</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">B1</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">C1</span><span style="color:#24292E;">], </span><span style="color:#E36209;">arr2</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#6F42C1;">A2</span><span style="color:#24292E;">])</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#6F42C1;">A1</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">B1</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">C1</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">A2</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">concat</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">A1</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">B1</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">C1</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">D1</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">A2</span><span style="color:#24292E;">&gt;(</span><span style="color:#E36209;">arr1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#6F42C1;">A1</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">B1</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">C1</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">D1</span><span style="color:#24292E;">], </span><span style="color:#E36209;">arr2</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#6F42C1;">A2</span><span style="color:#24292E;">])</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#6F42C1;">A1</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">B1</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">C1</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">D1</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">A2</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">concat</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">A1</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">B1</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">C1</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">D1</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">E1</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">A2</span><span style="color:#24292E;">&gt;(</span><span style="color:#E36209;">arr1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#6F42C1;">A1</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">B1</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">C1</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">D1</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">E1</span><span style="color:#24292E;">], </span><span style="color:#E36209;">arr2</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#6F42C1;">A2</span><span style="color:#24292E;">])</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#6F42C1;">A1</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">B1</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">C1</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">D1</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">E1</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">A2</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">concat</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">A1</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">B1</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">C1</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">D1</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">E1</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">F1</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">A2</span><span style="color:#24292E;">&gt;(</span><span style="color:#E36209;">arr1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#6F42C1;">A1</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">B1</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">C1</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">D1</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">E1</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">F1</span><span style="color:#24292E;">], </span><span style="color:#E36209;">arr2</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#6F42C1;">A2</span><span style="color:#24292E;">])</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#6F42C1;">A1</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">B1</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">C1</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">D1</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">E1</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">F1</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">A2</span><span style="color:#24292E;">];</span></span></code></pre></div><p>这已经开始变得不合理了。 不巧的是，在给<code>tail</code>函数添加类型时也会遇到同样的问题。</p><p>在受尽了“重载的折磨”后，它依然没有完全解决我们的问题。 它只能针对已编写的重载给出正确的类型。 如果我们想要处理所有情况，则还需要提供一个如下的重载：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">concat</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">U</span><span style="color:#F6F6F4;">&gt;(</span><span style="color:#FFB86C;font-style:italic;">arr1</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;">[], </span><span style="color:#FFB86C;font-style:italic;">arr2</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">U</span><span style="color:#F6F6F4;">[])</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Array</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">U</span><span style="color:#F6F6F4;">&gt;;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">concat</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">U</span><span style="color:#24292E;">&gt;(</span><span style="color:#E36209;">arr1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">[], </span><span style="color:#E36209;">arr2</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">U</span><span style="color:#24292E;">[])</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Array</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">U</span><span style="color:#24292E;">&gt;;</span></span></code></pre></div><p>但是这个重载签名没有反映出输入的长度，以及元组元素的顺序。</p><p>TypeScript 4.0带来了两项基础改动，还伴随着类型推断的改善，因此我们能够方便地添加类型。</p><p>第一个改动是展开元组类型的语法支持泛型。 这就是说，我们能够表示在元组和数组上的高阶操作，尽管我们不清楚它们的具体类型。 在实例化泛型展开时 当在这类元组上进行泛型展开实例化（或者使用实际类型参数进行替换）时，它们能够产生另一组数组和元组类型。</p><p>例如，我们可以像下面这样给<code>tail</code>函数添加类型，避免了“重载的折磨”。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">tail</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">any</span><span style="color:#F6F6F4;">[]&gt;(</span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">readonly</span><span style="color:#F6F6F4;"> [</span><span style="color:#97E1F1;font-style:italic;">any</span><span style="color:#F6F6F4;">, </span><span style="color:#F286C4;">...</span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;">]) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> [_ignored, </span><span style="color:#F286C4;">...</span><span style="color:#F6F6F4;">rest] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> arr;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> rest;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> myTuple </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">] </span><span style="color:#F286C4;">as</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> myArray </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">world</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> r1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">tail</span><span style="color:#F6F6F4;">(myTuple);</span></span>
<span class="line"><span style="color:#7B7F8B;">//    [2, 3, 4]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> r2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">tail</span><span style="color:#F6F6F4;">([</span><span style="color:#F286C4;">...</span><span style="color:#F6F6F4;">myTuple, </span><span style="color:#F286C4;">...</span><span style="color:#F6F6F4;">myArray] </span><span style="color:#F286C4;">as</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#7B7F8B;">//    [2, 3, 4, ...string[]]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tail</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;">[]&gt;(</span><span style="color:#E36209;">arr</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">readonly</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">any</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">...</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">]) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">_ignored</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">...</span><span style="color:#005CC5;">rest</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> rest;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">myTuple</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">myArray</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;world&quot;</span><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">r1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tail</span><span style="color:#24292E;">(myTuple);</span></span>
<span class="line"><span style="color:#6A737D;">//    [2, 3, 4]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">r2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tail</span><span style="color:#24292E;">([</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">myTuple, </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">myArray] </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">//    [2, 3, 4, ...string[]]</span></span></code></pre></div><p>第二个改动是，剩余元素可以出现在元组中的任意位置上 - 不只是末尾位置！</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Strings</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Numbers</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">StrStrNumNumBool</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#F286C4;">...</span><span style="color:#97E1F1;font-style:italic;">Strings</span><span style="color:#F6F6F4;">, </span><span style="color:#F286C4;">...</span><span style="color:#97E1F1;font-style:italic;">Numbers</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#7B7F8B;">//   [string, string, number, number, boolean]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Strings</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Numbers</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">number</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StrStrNumNumBool</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">...</span><span style="color:#6F42C1;">Strings</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">...</span><span style="color:#6F42C1;">Numbers</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">boolean</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#6A737D;">//   [string, string, number, number, boolean]</span></span></code></pre></div><p>在以前，TypeScript会像下面这样产生一个错误：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">剩余元素必须出现在元组类型的末尾。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">剩余元素必须出现在元组类型的末尾。</span></span></code></pre></div><p>但是在TypeScript 4.0中放开了这个限制。</p><p>注意，如果展开一个长度未知的类型，那么后面的所有元素都将被纳入到剩余元素类型。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Strings</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Numbers</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">[];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Unbounded</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#F286C4;">...</span><span style="color:#97E1F1;font-style:italic;">Strings</span><span style="color:#F6F6F4;">, </span><span style="color:#F286C4;">...</span><span style="color:#97E1F1;font-style:italic;">Numbers</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#7B7F8B;">//   [string, string, ...(number | boolean)[]]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Strings</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Numbers</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">[];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Unbounded</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">...</span><span style="color:#6F42C1;">Strings</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">...</span><span style="color:#6F42C1;">Numbers</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">boolean</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#6A737D;">//   [string, string, ...(number | boolean)[]]</span></span></code></pre></div><p>结合使用这两种行为，我们能够为<code>concat</code>函数编写一个良好的类型签名：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Arr</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">readonly</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">any</span><span style="color:#F6F6F4;">[];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">concat</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">Arr</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">U</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">Arr</span><span style="color:#F6F6F4;">&gt;(</span><span style="color:#FFB86C;font-style:italic;">arr1</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">arr2</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">U</span><span style="color:#F6F6F4;">)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#F286C4;">...</span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;">, </span><span style="color:#F286C4;">...</span><span style="color:#97E1F1;font-style:italic;">U</span><span style="color:#F6F6F4;">] {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> [</span><span style="color:#F286C4;">...</span><span style="color:#F6F6F4;">arr1, </span><span style="color:#F286C4;">...</span><span style="color:#F6F6F4;">arr2];</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Arr</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">readonly</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;">[];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">concat</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Arr</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">U</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Arr</span><span style="color:#24292E;">&gt;(</span><span style="color:#E36209;">arr1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">, </span><span style="color:#E36209;">arr2</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">U</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">...</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">...</span><span style="color:#6F42C1;">U</span><span style="color:#24292E;">] {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">arr1, </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">arr2];</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>虽然这个签名仍有点长，但是我们不再需要像重载那样重复多次，并且对于任何数组或元组它都能够给出期望的类型。</p><p>该功能本身已经足够好了，但是它的强大更体现在一些复杂的场景中。 例如，考虑有一个支持<a href="https://en.wikipedia.org/wiki/Partial_application" target="_blank" rel="noreferrer">部分参数应用</a>的函数<code>partialCall</code>。 <code>partialCall</code>接受一个函数（例如叫作<code>f</code>），以及函数<code>f</code>需要的一些初始参数。 它返回一个新的函数，该函数接受<code>f</code>需要的额外参数，并最终以初始参数和额外参数来调用<code>f</code>。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">partialCall</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">f</span><span style="color:#F6F6F4;">, </span><span style="color:#F286C4;">...</span><span style="color:#FFB86C;font-style:italic;">headArgs</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">...</span><span style="color:#FFB86C;font-style:italic;">tailArgs</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">f</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">...</span><span style="color:#F6F6F4;">headArgs, </span><span style="color:#F286C4;">...</span><span style="color:#F6F6F4;">tailArgs);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">partialCall</span><span style="color:#24292E;">(</span><span style="color:#E36209;">f</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">...</span><span style="color:#E36209;">headArgs</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">...</span><span style="color:#E36209;">tailArgs</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">f</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">headArgs, </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">tailArgs);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>TypeScript 4.0改进了剩余参数和剩余元组元素的类型推断，因此我们可以为这种使用场景添加类型。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Arr</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">readonly</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">unknown</span><span style="color:#F6F6F4;">[];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">partialCall</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">Arr</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">U</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">Arr</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">R</span><span style="color:#F6F6F4;">&gt;(</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">f</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">...</span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#F286C4;">...</span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;">, </span><span style="color:#F286C4;">...</span><span style="color:#97E1F1;font-style:italic;">U</span><span style="color:#F6F6F4;">]) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">R</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">...</span><span style="color:#FFB86C;font-style:italic;">headArgs</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">T</span></span>
<span class="line"><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">...</span><span style="color:#FFB86C;font-style:italic;">tailArgs</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">U</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">f</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">...</span><span style="color:#F6F6F4;">headArgs, </span><span style="color:#F286C4;">...</span><span style="color:#F6F6F4;">tailArgs);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Arr</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">readonly</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">unknown</span><span style="color:#24292E;">[];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">partialCall</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Arr</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">U</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Arr</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">R</span><span style="color:#24292E;">&gt;(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">f</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">...</span><span style="color:#E36209;">args</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">...</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">...</span><span style="color:#6F42C1;">U</span><span style="color:#24292E;">]) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">R</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">...</span><span style="color:#E36209;">headArgs</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span></span>
<span class="line"><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">...</span><span style="color:#E36209;">tailArgs</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">U</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">f</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">headArgs, </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">tailArgs);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>此例中，<code>partialCall</code>知道能够接受哪些初始参数，并返回一个函数，它能够正确地选择接受或拒绝额外的参数。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// @errors: 2345 2554 2554 2345</span></span>
<span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Arr</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">readonly</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">unknown</span><span style="color:#F6F6F4;">[];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">partialCall</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">Arr</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">U</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">Arr</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">R</span><span style="color:#F6F6F4;">&gt;(</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">f</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">...</span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#F286C4;">...</span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;">, </span><span style="color:#F286C4;">...</span><span style="color:#97E1F1;font-style:italic;">U</span><span style="color:#F6F6F4;">]) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">R</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">...</span><span style="color:#FFB86C;font-style:italic;">headArgs</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">T</span></span>
<span class="line"><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">...</span><span style="color:#FFB86C;font-style:italic;">tailArgs</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">U</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">f</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">...</span><span style="color:#F6F6F4;">headArgs, </span><span style="color:#F286C4;">...</span><span style="color:#F6F6F4;">tailArgs);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#7B7F8B;">// ---cut---</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">foo</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">y</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">z</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> f1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">partialCall</span><span style="color:#F6F6F4;">(foo, </span><span style="color:#BF9EEE;">100</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#7B7F8B;">//                          ~~~</span></span>
<span class="line"><span style="color:#7B7F8B;">// Argument of type &#39;number&#39; is not assignable to parameter of type &#39;string&#39;.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> f2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">partialCall</span><span style="color:#F6F6F4;">(foo, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">100</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">oops</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#7B7F8B;">//                                              ~~~~~~</span></span>
<span class="line"><span style="color:#7B7F8B;">// Expected 4 arguments, but got 5.(2554)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// This works!</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> f3 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">partialCall</span><span style="color:#F6F6F4;">(foo, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#7B7F8B;">//    (y: number, z: boolean) =&gt; void</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// What can we do with f3 now?</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// Works!</span></span>
<span class="line"><span style="color:#62E884;">f3</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">123</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">f3</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">f3</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">123</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// @errors: 2345 2554 2554 2345</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Arr</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">readonly</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">unknown</span><span style="color:#24292E;">[];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">partialCall</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Arr</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">U</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Arr</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">R</span><span style="color:#24292E;">&gt;(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">f</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">...</span><span style="color:#E36209;">args</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">...</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">...</span><span style="color:#6F42C1;">U</span><span style="color:#24292E;">]) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">R</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">...</span><span style="color:#E36209;">headArgs</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span></span>
<span class="line"><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">...</span><span style="color:#E36209;">tailArgs</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">U</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">f</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">headArgs, </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">tailArgs);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// ---cut---</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">, </span><span style="color:#E36209;">y</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">, </span><span style="color:#E36209;">z</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">boolean</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">f1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">partialCall</span><span style="color:#24292E;">(foo, </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">//                          ~~~</span></span>
<span class="line"><span style="color:#6A737D;">// Argument of type &#39;number&#39; is not assignable to parameter of type &#39;string&#39;.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">f2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">partialCall</span><span style="color:#24292E;">(foo, </span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;oops&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">//                                              ~~~~~~</span></span>
<span class="line"><span style="color:#6A737D;">// Expected 4 arguments, but got 5.(2554)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// This works!</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">f3</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">partialCall</span><span style="color:#24292E;">(foo, </span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">//    (y: number, z: boolean) =&gt; void</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// What can we do with f3 now?</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Works!</span></span>
<span class="line"><span style="color:#6F42C1;">f3</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">123</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">f3</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">f3</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">123</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>可变参元组类型支持了许多新的激动人心的模式，尤其是函数组合。 我们期望能够通过它来为JavaScript内置的<code>bind</code>函数进行更好的类型检查。 还有一些其它的类型推断改进以及模式引入进来，如果你想了解更多，请参考<a href="https://github.com/microsoft/TypeScript/pull/39094" target="_blank" rel="noreferrer">PR</a>。</p><h2 id="标签元组元素" tabindex="-1">标签元组元素 <a class="header-anchor" href="#标签元组元素" aria-label="Permalink to &quot;标签元组元素&quot;">​</a></h2><p>改进元组类型和参数列表使用体验的重要性在于它允许我们为JavaScript中惯用的方法添加强类型验证 - 例如对参数列表进行切片而后传递给其它函数。 这里至关重要的一点是我们可以使用元组类型作为剩余参数类型。</p><p>例如，下面的函数使用元组类型作为剩余参数：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">foo</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">...</span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">])</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// ...</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#E36209;">args</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">])</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">void</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>它与下面的函数基本没有区别：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">foo</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">arg0</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">arg1</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// ...</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">(</span><span style="color:#E36209;">arg0</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">, </span><span style="color:#E36209;">arg1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">void</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>对于<code>foo</code>函数的任意调用者：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">foo</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">arg0</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">arg1</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// ...</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">foo</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">42</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">foo</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">42</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">// Expected 2 arguments, but got 3.</span></span>
<span class="line"><span style="color:#62E884;">foo</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">// Expected 2 arguments, but got 1.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">(</span><span style="color:#E36209;">arg0</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">, </span><span style="color:#E36209;">arg1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">void</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">42</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">42</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// Expected 2 arguments, but got 3.</span></span>
<span class="line"><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// Expected 2 arguments, but got 1.</span></span></code></pre></div><p>但是，如果从代码可读性的角度来看，就能够看出两者之间的差别。 在第一个例子中，参数的第一个元素和第二个元素都没有参数名。 虽然这不影响类型检查，但是元组中元素位置上缺乏标签令它们难以使用 - 很难表达出代码的意图。</p><p>这就是为什么TypeScript 4.0中的元组可以提供标签。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Range</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [start: </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">, end: </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">];</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Range</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">];</span></span></code></pre></div><p>为了加强参数列表和元组类型之间的联系，剩余元素和可选元素的语法采用了参数列表的语法。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Foo</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [first: </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">, second</span><span style="color:#F286C4;">?</span><span style="color:#F6F6F4;">: </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">, </span><span style="color:#F286C4;">...</span><span style="color:#F6F6F4;">rest: </span><span style="color:#97E1F1;font-style:italic;">any</span><span style="color:#F6F6F4;">[]];</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Foo</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#6F42C1;">first</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">second</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">...</span><span style="color:#6F42C1;">rest</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">any</span><span style="color:#24292E;">[]];</span></span></code></pre></div><p>在使用标签元组时有一些规则要遵守。 其一是，如果一个元组元素使用了标签，那么所有元组元素必须都使用标签。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Bar</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [first: </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#7B7F8B;">// Tuple members must all have names or all not have names.(5084)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Bar</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#6F42C1;">first</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#6A737D;">// Tuple members must all have names or all not have names.(5084)</span></span></code></pre></div><p>元组标签名不影响解构变量名，它们不必相同。 元组标签仅用于文档和工具目的。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">foo</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [first: </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">, second: </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">]) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 注意：不需要命名为&#39;first&#39;和&#39;second&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> [a, b] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> x;</span></span>
<span class="line"><span style="color:#F6F6F4;">    a</span></span>
<span class="line"><span style="color:#7B7F8B;">//  string</span></span>
<span class="line"><span style="color:#F6F6F4;">    b</span></span>
<span class="line"><span style="color:#7B7F8B;">//  number</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">(</span><span style="color:#E36209;">x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#6F42C1;">first</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">second</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">]) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 注意：不需要命名为&#39;first&#39;和&#39;second&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">a</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">b</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x;</span></span>
<span class="line"><span style="color:#24292E;">    a</span></span>
<span class="line"><span style="color:#6A737D;">//  string</span></span>
<span class="line"><span style="color:#24292E;">    b</span></span>
<span class="line"><span style="color:#6A737D;">//  number</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>总的来说，标签元组对于元组和参数列表模式以及实现类型安全的重载时是很便利的。 实际上，在代码编辑器中TypeScript会尽可能地将它们显示为重载。</p><p><img src="https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2020/08/signatureHelpLabeledTuples.gif" alt="Signature help displaying a union of labeled tuples as in a parameter list as two signatures"></p><p>更多详情请参考<a href="https://github.com/microsoft/TypeScript/pull/38234" target="_blank" rel="noreferrer">PT</a>。</p><h2 id="从构造函数中推断类属性" tabindex="-1">从构造函数中推断类属性 <a class="header-anchor" href="#从构造函数中推断类属性" aria-label="Permalink to &quot;从构造函数中推断类属性&quot;">​</a></h2><p>在TypeScript 4.0中，当启用了<code>noImplicitAny</code>时，编译器能够根据基于控制流的分析来确定类中属性的类型</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Square</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// 在旧版本中，以下两个属性均为any类型</span></span>
<span class="line"><span style="color:#F6F6F4;">  area; </span><span style="color:#7B7F8B;">// number</span></span>
<span class="line"><span style="color:#F6F6F4;">  sideLength; </span><span style="color:#7B7F8B;">// number</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">constructor</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">sideLength</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.sideLength </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> sideLength;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.area </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> sideLength </span><span style="color:#F286C4;">**</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Square</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 在旧版本中，以下两个属性均为any类型</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">area</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// number</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">sideLength</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// number</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">constructor</span><span style="color:#24292E;">(</span><span style="color:#E36209;">sideLength</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.sideLength </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sideLength;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.area </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sideLength </span><span style="color:#D73A49;">**</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>如果没有在构造函数中的所有代码执行路径上为实例成员进行赋值，那么该属性会被认为可能为<code>undefined</code>类型。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Square</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  sideLength; </span><span style="color:#7B7F8B;">// number | undefined</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">constructor</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">sideLength</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (Math.</span><span style="color:#62E884;">random</span><span style="color:#F6F6F4;">()) {</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.sideLength </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> sideLength;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">get</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">area</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.sideLength </span><span style="color:#F286C4;">**</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//     ~~~~~~~~~~~~~~~</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//     对象可能为&#39;undefined&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Square</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">sideLength</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// number | undefined</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">constructor</span><span style="color:#24292E;">(</span><span style="color:#E36209;">sideLength</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (Math.</span><span style="color:#6F42C1;">random</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.sideLength </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sideLength;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">get</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">area</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.sideLength </span><span style="color:#D73A49;">**</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//     ~~~~~~~~~~~~~~~</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//     对象可能为&#39;undefined&#39;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>如果你清楚地知道属性类型（例如，类中存在类似于<code>initialize</code>的初始化方法），你仍需要明确地使用类型注解来指定类型，以及需要使用确切赋值断言（<code>!</code>）如果你启用了<code>strictPropertyInitialization</code>模式。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Square</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// 确切赋值断言</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">//        v</span></span>
<span class="line"><span style="color:#F6F6F4;">  sideLength</span><span style="color:#F286C4;">!:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">//         ^^^^^^^^</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">//         类型注解</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">constructor</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">sideLength</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">initialize</span><span style="color:#F6F6F4;">(sideLength);</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">initialize</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">sideLength</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.sideLength </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> sideLength;</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">get</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">area</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.sideLength </span><span style="color:#F286C4;">**</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Square</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 确切赋值断言</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//        v</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">sideLength</span><span style="color:#D73A49;">!:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//         ^^^^^^^^</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//         类型注解</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">constructor</span><span style="color:#24292E;">(</span><span style="color:#E36209;">sideLength</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">initialize</span><span style="color:#24292E;">(sideLength);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">initialize</span><span style="color:#24292E;">(</span><span style="color:#E36209;">sideLength</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.sideLength </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sideLength;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">get</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">area</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.sideLength </span><span style="color:#D73A49;">**</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>更多详情请参考<a href="https://github.com/microsoft/TypeScript/pull/379200" target="_blank" rel="noreferrer">PR</a>.</p><h2 id="断路赋值运算符" tabindex="-1">断路赋值运算符 <a class="header-anchor" href="#断路赋值运算符" aria-label="Permalink to &quot;断路赋值运算符&quot;">​</a></h2><p>JavaScript以及其它很多编程语言支持一些_复合赋值_运算符。 复合赋值运算符作用于两个操作数，并将运算结果赋值给左操作数。 你从前可能见到过以下代码：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 加</span></span>
<span class="line"><span style="color:#7B7F8B;">// a = a + b</span></span>
<span class="line"><span style="color:#F6F6F4;">a </span><span style="color:#F286C4;">+=</span><span style="color:#F6F6F4;"> b;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 减</span></span>
<span class="line"><span style="color:#7B7F8B;">// a = a - b</span></span>
<span class="line"><span style="color:#F6F6F4;">a </span><span style="color:#F286C4;">-=</span><span style="color:#F6F6F4;"> b;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 乘</span></span>
<span class="line"><span style="color:#7B7F8B;">// a = a * b</span></span>
<span class="line"><span style="color:#F6F6F4;">a </span><span style="color:#F286C4;">*=</span><span style="color:#F6F6F4;"> b;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 除</span></span>
<span class="line"><span style="color:#7B7F8B;">// a = a / b</span></span>
<span class="line"><span style="color:#F6F6F4;">a </span><span style="color:#F286C4;">/=</span><span style="color:#F6F6F4;"> b;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 幂</span></span>
<span class="line"><span style="color:#7B7F8B;">// a = a ** b</span></span>
<span class="line"><span style="color:#F6F6F4;">a </span><span style="color:#F286C4;">**=</span><span style="color:#F6F6F4;"> b;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 左移位</span></span>
<span class="line"><span style="color:#7B7F8B;">// a = a &lt;&lt; b</span></span>
<span class="line"><span style="color:#F6F6F4;">a </span><span style="color:#F286C4;">&lt;&lt;=</span><span style="color:#F6F6F4;"> b;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 加</span></span>
<span class="line"><span style="color:#6A737D;">// a = a + b</span></span>
<span class="line"><span style="color:#24292E;">a </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> b;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 减</span></span>
<span class="line"><span style="color:#6A737D;">// a = a - b</span></span>
<span class="line"><span style="color:#24292E;">a </span><span style="color:#D73A49;">-=</span><span style="color:#24292E;"> b;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 乘</span></span>
<span class="line"><span style="color:#6A737D;">// a = a * b</span></span>
<span class="line"><span style="color:#24292E;">a </span><span style="color:#D73A49;">*=</span><span style="color:#24292E;"> b;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 除</span></span>
<span class="line"><span style="color:#6A737D;">// a = a / b</span></span>
<span class="line"><span style="color:#24292E;">a </span><span style="color:#D73A49;">/=</span><span style="color:#24292E;"> b;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 幂</span></span>
<span class="line"><span style="color:#6A737D;">// a = a ** b</span></span>
<span class="line"><span style="color:#24292E;">a </span><span style="color:#D73A49;">**=</span><span style="color:#24292E;"> b;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 左移位</span></span>
<span class="line"><span style="color:#6A737D;">// a = a &lt;&lt; b</span></span>
<span class="line"><span style="color:#24292E;">a </span><span style="color:#D73A49;">&lt;&lt;=</span><span style="color:#24292E;"> b;</span></span></code></pre></div><p>JavaScript中的许多运算符都具有一个对应的赋值运算符！ 目前为止，有三个值得注意的例外：逻辑_与_（<code>&amp;&amp;</code>），逻辑_或_（<code>||</code>）和逻辑_空值合并_（<code>??</code>）。</p><p>这就是为什么TypeScript 4.0支持了一个ECMAScript的新特性，增加了三个新的赋值运算符<code>&amp;&amp;=</code>，<code>||=</code>和<code>??=</code>。</p><p>这三个运算符可以用于替换以下代码：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">a </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> a </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> b;</span></span>
<span class="line"><span style="color:#F6F6F4;">a </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> a </span><span style="color:#F286C4;">||</span><span style="color:#F6F6F4;"> b;</span></span>
<span class="line"><span style="color:#F6F6F4;">a </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> a </span><span style="color:#F286C4;">??</span><span style="color:#F6F6F4;"> b;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> b;</span></span>
<span class="line"><span style="color:#24292E;">a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> b;</span></span>
<span class="line"><span style="color:#24292E;">a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">??</span><span style="color:#24292E;"> b;</span></span></code></pre></div><p>或者相似的<code>if</code>语句</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// could be &#39;a ||= b&#39;</span></span>
<span class="line"><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">a) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  a </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> b;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// could be &#39;a ||= b&#39;</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">a) {</span></span>
<span class="line"><span style="color:#24292E;">  a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> b;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>还有以下的惰性初始化值的例子：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> values</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">[];</span></span>
<span class="line"><span style="color:#F6F6F4;">(values </span><span style="color:#F286C4;">??</span><span style="color:#F6F6F4;"> (values </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [])).</span><span style="color:#62E884;">push</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// After</span></span>
<span class="line"><span style="color:#F6F6F4;">(values </span><span style="color:#F286C4;">??=</span><span style="color:#F6F6F4;"> []).</span><span style="color:#62E884;">push</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> values</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">[];</span></span>
<span class="line"><span style="color:#24292E;">(values </span><span style="color:#D73A49;">??</span><span style="color:#24292E;"> (values </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [])).</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// After</span></span>
<span class="line"><span style="color:#24292E;">(values </span><span style="color:#D73A49;">??=</span><span style="color:#24292E;"> []).</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>少数情况下当你使用带有副作用的存取器时，值得注意的是这些运算符只在必要时才执行赋值操作。 也就是说，不仅是运算符右操作数会“短路”，整个赋值操作也会“短路”</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">obj.prop </span><span style="color:#F286C4;">||=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">foo</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// roughly equivalent to either of the following</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">obj.prop </span><span style="color:#F286C4;">||</span><span style="color:#F6F6F4;"> (obj.prop </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">foo</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">obj.prop) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    obj.prop </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">foo</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">obj.prop </span><span style="color:#D73A49;">||=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// roughly equivalent to either of the following</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">obj.prop </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> (obj.prop </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">obj.prop) {</span></span>
<span class="line"><span style="color:#24292E;">    obj.prop </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play?ts=Nightly#code/MYewdgzgLgBCBGArGBeGBvAsAKBnmA5gKawAOATiKQBQCUGO+TMokIANkQHTsgHUAiYlChFyMABYBDCDHIBXMANoBuHI2Z4A9FpgAlIqXZTgRGAFsiAQg2byJeeTAwAslKgSu5KWAAmIczoYAB4YAAYuAFY1XHwAXwAaWxgIEhgKKmoAfQA3KXYALhh4EA4iH3osWM1WCDKePkFUkTFJGTlFZRimOJw4mJwAM0VgKABLcBhB0qCqplr63n4BcjGCCVgIMd8zIjz2eXciXy7k+yhHZygFIhje7BwFzgblgBUJMdlwM3yAdykAJ6yBSQGAeMzNUTkU7YBCILgZUioOBIBGUJEAHwxUxmqnU2Ce3CWgnenzgYDMACo6pZxpYIJSOqDwSkSFCYXC0VQYFi0NMQHQVEA" target="_blank" rel="noreferrer">尝试运行这个例子</a>来查看与 _始终_执行赋值间的差别。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> obj </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">get</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">prop</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">getter has run</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// Replace me!</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> Math.</span><span style="color:#62E884;">random</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0.5</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    },</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">set</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">prop</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">_val</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">setter has run</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">foo</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">right side evaluated</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">This one always runs the setter</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">obj.prop </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> obj.prop </span><span style="color:#F286C4;">||</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">foo</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">This one *sometimes* runs the setter</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">obj.prop </span><span style="color:#F286C4;">||=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">foo</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">obj</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">get</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">prop</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;getter has run&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Replace me!</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">random</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.5</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">set</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">prop</span><span style="color:#24292E;">(</span><span style="color:#E36209;">_val</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">boolean</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;setter has run&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;right side evaluated&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;This one always runs the setter&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">obj.prop </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> obj.prop </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;This one *sometimes* runs the setter&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">obj.prop </span><span style="color:#D73A49;">||=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">();</span></span></code></pre></div><p>非常感谢社区成员<a href="https://github.com/Kingwl" target="_blank" rel="noreferrer">Wenlu Wang</a>为该功能的付出！</p><p>更多详情请参考<a href="https://github.com/microsoft/TypeScript/pull/37727" target="_blank" rel="noreferrer">PR</a>. 你还可以<a href="https://github.com/tc39/proposal-logical-assignment/" target="_blank" rel="noreferrer">查看该特性的TC39提案</a>.</p><h2 id="catch语句中的unknown类型" tabindex="-1"><code>catch</code>语句中的<code>unknown</code>类型 <a class="header-anchor" href="#catch语句中的unknown类型" aria-label="Permalink to &quot;\`catch\`语句中的\`unknown\`类型&quot;">​</a></h2><p>在TypeScript的早期版本中，<code>catch</code>语句中的捕获变量总为<code>any</code>类型。 这意味着你可以在捕获变量上执行任意的操作。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// Do some work</span></span>
<span class="line"><span style="color:#F6F6F4;">} </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (x) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// x 类型为 &#39;any&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(x.message);</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(x.</span><span style="color:#62E884;">toUpperCase</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">  x</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  x.yadda.yadda.</span><span style="color:#62E884;">yadda</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Do some work</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (x) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// x 类型为 &#39;any&#39;</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(x.message);</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(x.</span><span style="color:#6F42C1;">toUpperCase</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">  x</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  x.yadda.yadda.</span><span style="color:#6F42C1;">yadda</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上述代码可能导致错误处理语句中产生了_更多_的错误，因此该行为是不合理的。 因为捕获变量默认为<code>any</code>类型，所以它不是类型安全的，你可以在上面执行非法操作。</p><p>TypeScript 4.0允许将<code>catch</code>语句中的捕获变量类型声明为<code>unknown</code>类型。 <code>unknown</code>类型比<code>any</code>类型更加安全，因为它要求在使用之前必须进行类型检查。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// ...</span></span>
<span class="line"><span style="color:#F6F6F4;">} </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">unknown</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// Can&#39;t access values on unknowns</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(e.</span><span style="color:#62E884;">toUpperCase</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">typeof</span><span style="color:#F6F6F4;"> e </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">string</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// We&#39;ve narrowed &#39;e&#39; down to the type &#39;string&#39;.</span></span>
<span class="line"><span style="color:#F6F6F4;">    console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(e.</span><span style="color:#62E884;">toUpperCase</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">e</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">unknown</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Can&#39;t access values on unknowns</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(e.</span><span style="color:#6F42C1;">toUpperCase</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> e </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;string&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// We&#39;ve narrowed &#39;e&#39; down to the type &#39;string&#39;.</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(e.</span><span style="color:#6F42C1;">toUpperCase</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>由于<code>catch</code>语句捕获变量的类型不会被默认地改变成<code>unknown</code>类型，因此我们考虑在未来添加一个新的<code>--strict</code>标记来有选择性地引入该行为。 目前，我们可以通过使用代码静态检查工具来强制<code>catch</code>捕获变量使用了明确的类型注解<code>: any</code>或<code>: unknown</code>。</p><p>更多详情请参考<a href="https://github.com/microsoft/TypeScript/pull/39015" target="_blank" rel="noreferrer">PR</a>.</p><h2 id="自定义jsx工厂" tabindex="-1">自定义JSX工厂 <a class="header-anchor" href="#自定义jsx工厂" aria-label="Permalink to &quot;自定义JSX工厂&quot;">​</a></h2><p>在使用JSX时，<a href="https://reactjs.org/docs/fragments.html" target="_blank" rel="noreferrer"><em>fragment</em></a>类型的JSX元素允许返回多个子元素。 当TypeScript刚开始实现fragments时，我们不太清楚其它代码库该如何使用它们。 最近越来越多的库开始使用JSX并支持与fragments结构相似的API。</p><p>在TypeScript 4.0中，用户可以使用<code>jsxFragmentFactory</code>选项来自定义fragment工厂。</p><p>例如，下例的<code>tsconfig.json</code>文件告诉TypeScript使用与React兼容的方式来转换JSX，但使用<code>h</code>来代替<code>React.createElement</code>工厂，同时使用<code>Fragment</code>来代替<code>React.Fragment</code>。</p><div class="language-json5"><button title="Copy Code" class="copy"></button><span class="lang">json5</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#E7EE98;">compilerOptions</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#E7EE98;">target</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">esnext</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#E7EE98;">module</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">commonjs</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#E7EE98;">jsx</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">react</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#E7EE98;">jsxFactory</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">h</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#E7EE98;">jsxFragmentFactory</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Fragment</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  },</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">compilerOptions</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">target</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;esnext&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">module</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;commonjs&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">jsx</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;react&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">jsxFactory</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;h&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">jsxFragmentFactory</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;Fragment&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>如果针对每个文件具有不同的JSX工厂，你可以使用新的<code>/** @jsxFrag */</code>编译指令注释。 示例：</p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 注意：这些编译指令注释必须使用JSDoc风格，否则不起作用</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">/** </span><span style="color:#F286C4;">@jsx</span><span style="color:#7B7F8B;"> h */</span></span>
<span class="line"><span style="color:#7B7F8B;">/** </span><span style="color:#F286C4;">@jsxFrag</span><span style="color:#7B7F8B;"> Fragment */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { h, Fragment } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">preact</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Header</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (</span></span>
<span class="line"><span style="color:#F6F6F4;">  &lt;&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">h1</span><span style="color:#F6F6F4;">&gt;Welcome&lt;/</span><span style="color:#F286C4;">h1</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">  &lt;/&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 注意：这些编译指令注释必须使用JSDoc风格，否则不起作用</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/** </span><span style="color:#D73A49;">@jsx</span><span style="color:#6A737D;"> h */</span></span>
<span class="line"><span style="color:#6A737D;">/** </span><span style="color:#D73A49;">@jsxFrag</span><span style="color:#6A737D;"> Fragment */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { h, Fragment } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;preact&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Header</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">  &lt;&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt;Welcome&lt;/</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/&gt;</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><p>上述代码会转换为如下的JavaScript</p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 注意：这些编译指令注释必须使用JSDoc风格，否则不起作用</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">/** </span><span style="color:#F286C4;">@jsx</span><span style="color:#7B7F8B;"> h */</span></span>
<span class="line"><span style="color:#7B7F8B;">/** </span><span style="color:#F286C4;">@jsxFrag</span><span style="color:#7B7F8B;"> Fragment */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { h, Fragment } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">preact</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Header</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">h</span><span style="color:#F6F6F4;">(</span></span>
<span class="line"><span style="color:#F6F6F4;">    Fragment,</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">h</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">h1</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Welcome</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">  )</span></span>
<span class="line"><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 注意：这些编译指令注释必须使用JSDoc风格，否则不起作用</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/** </span><span style="color:#D73A49;">@jsx</span><span style="color:#6A737D;"> h */</span></span>
<span class="line"><span style="color:#6A737D;">/** </span><span style="color:#D73A49;">@jsxFrag</span><span style="color:#6A737D;"> Fragment */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { h, Fragment } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;preact&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Header</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">h</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    Fragment,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">h</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;h1&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Welcome&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  )</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><p>非常感谢社区成员<a href="https://github.com/nojvek" target="_blank" rel="noreferrer">Noj Vek</a>为该特性的付出。</p><p>更多详情请参考<a href="https://github.com/microsoft/TypeScript/pull/38720" target="_blank" rel="noreferrer">PR</a></p><h2 id="对启用了-noemitonerror的-build模式进行速度优化" tabindex="-1">对启用了<code>--noEmitOnError</code>的\`build模式进行速度优化 <a class="header-anchor" href="#对启用了-noemitonerror的-build模式进行速度优化" aria-label="Permalink to &quot;对启用了\`--noEmitOnError\`的\`build模式进行速度优化&quot;">​</a></h2><p>在以前，当启用了<code>--noEmitOnError</code>编译选项时，如果在<code>--incremental</code>构建模式下的前一次构建出错了，那么接下来的构建会很慢。 这是因为当启用了<code>--noEmitOnError</code>时，前一次失败构建的信息不会被缓存到<code>.tsbuildinfo</code>文件中。</p><p>TypeScript 4.0对此做出了一些改变，极大地提升了这种情况下的编译速度，改善了应用<code>--build</code>模式的场景（包含<code>--incremental</code>和<code>--noEmitOnError</code>）。</p><p>更多详情请参考<a href="https://github.com/microsoft/TypeScript/pull/38853" target="_blank" rel="noreferrer">PR</a>。</p><h2 id="incremental和-noemit" tabindex="-1"><code>--incremental</code>和<code>--noEmit</code> <a class="header-anchor" href="#incremental和-noemit" aria-label="Permalink to &quot;\`--incremental\`和\`--noEmit\`&quot;">​</a></h2><p>TypeScript 4.0允许同时使用<code>--incremental</code>和<code>--noEmit</code>。 这在之前是不允许的，因为<code>--incremental</code>需要生成<code>.tsbuildinfo</code>文件； 然而，提供更快地增量构建对所有用户来讲都是十分重要的。</p><p>更多详情请参考<a href="https://github.com/microsoft/TypeScript/pull/39122" target="_blank" rel="noreferrer">PR</a>。</p><h2 id="编辑器改进" tabindex="-1">编辑器改进 <a class="header-anchor" href="#编辑器改进" aria-label="Permalink to &quot;编辑器改进&quot;">​</a></h2><p>TypeScript编译器不但支持在大部分编辑器中编写TypeScript代码，还支持着在Visual Studio系列的编辑器中编写JavaScript代码。 因此，我们主要工作之一是改善编辑器支持 - 这也是程序员花费了大量时间的地方。</p><p>针对不同的编辑器，在使用TypeScript/JavaScript的新功能时可能会有所区别，但是</p><ul><li>Visual Studio Code支持<a href="https://code.visualstudio.com/docs/typescript/typescript-compiling#_using-the-workspace-version-of-typescript" target="_blank" rel="noreferrer">选择不同的TypeScript版本</a>。或者，安装<a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next" target="_blank" rel="noreferrer">JavaScript/TypeScript Nightly Extension</a>插件来使用最新的版本。</li><li>Visual Studio 2017/2019提供了SDK安装包，以及<a href="https://www.nuget.org/packages/Microsoft.TypeScript.MSBuild" target="_blank" rel="noreferrer">MSBuild安装包</a>。</li><li>Sublime Text 3支持<a href="https://github.com/microsoft/TypeScript-Sublime-Plugin#note-using-different-versions-of-typescript" target="_blank" rel="noreferrer">选择不同的TypeScript版本</a></li></ul><p><a href="https://github.com/Microsoft/TypeScript/wiki/TypeScript-Editor-Support" target="_blank" rel="noreferrer">这里是支持TypeScript的编辑器列表</a>，到这里查看你喜爱的编译器是否支持最新版本的TypeScript。</p><h3 id="转换为可选链" tabindex="-1">转换为可选链 <a class="header-anchor" href="#转换为可选链" aria-label="Permalink to &quot;转换为可选链&quot;">​</a></h3><p>可选链是一个较新的大家喜爱的特性。 TypeScript 4.0带来了一个新的重构工具来转换常见的代码模式，以利用<a href="https://devblogs.microsoft.com/typescript/announcing-typescript-3-7/#optional-chaining" target="_blank" rel="noreferrer">可选链</a>和<a href="https://devblogs.microsoft.com/typescript/announcing-typescript-3-7/#nullish-coalescing" target="_blank" rel="noreferrer">空值合并</a>！</p><p><img src="https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2020/08/convertToOptionalChain-4-0.gif" alt="将转换为"></p><p>注意，虽然该项重构不能_完美地_捕获真实情况（由于JavaScript中较复杂的真值/假值关系），但是我们坚信它能够适用于大多数使用场景，尤其是在TypeScript清楚地知道代码类型信息的时候。</p><p>更多详情请参考<a href="https://github.com/microsoft/TypeScript/pull/39135" target="_blank" rel="noreferrer">PR</a>。</p><h3 id="deprecated-支持" tabindex="-1"><code>/** @deprecated */</code>支持 <a class="header-anchor" href="#deprecated-支持" aria-label="Permalink to &quot;\`/** @deprecated */\`支持&quot;">​</a></h3><p>TypeScript现在能够识别代码中的<code>/** @deprecated *</code>JSDoc注释，并对编辑器提供支持。 该信息会显示在自动补全列表中以及建议诊断信息，编辑器可以特殊处理它。 在类似于VS Code的编辑器中，废弃的值会显示为删除线，例如<s>like this</s>。</p><p><img src="https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2020/06/deprecated_4-0.png" alt="Some examples of deprecated declarations with strikethrough text in the editor"></p><p>感谢<a href="https://github.com/Kingwl" target="_blank" rel="noreferrer">Wenlu Wang</a>为该特性的付出。 更多详情请参考<a href="https://github.com/microsoft/TypeScript/pull/38523" target="_blank" rel="noreferrer">PR</a>。</p><h3 id="启动时的局部语义模式" tabindex="-1">启动时的局部语义模式 <a class="header-anchor" href="#启动时的局部语义模式" aria-label="Permalink to &quot;启动时的局部语义模式&quot;">​</a></h3><p>我们从用户反馈得知在启动一个大的工程时需要很长的时间。 罪魁祸首是一个叫作_程序构造_的处理过程。 该处理是从一系列根文件开始解析并查找它们的依赖，然后再解析依赖，然后再解析依赖的依赖，以此类推。 你的工程越大，你等待的时间就越长，在这之前你不能使用编辑器的诸如“跳转到定义”等功能。</p><p>这就是为什么我们要提供一个新的编辑器模式，在语言服务被完全加载之前提供局部编辑体验。 这里的主要想法是，编辑器可以运行一个轻量级的局部语言服务，它只关注编辑器当前打开的文件。</p><p>很难准确地形容能够获得多大的提升，但听说在Visual Studio Code项目中，以前需要等待_20秒到1分钟_的时间来完全加载语言服务。 做为对比，<em><em>新的局部语义模式看起来能够将上述时间减少到几秒钟</em>。</em> 示例，从下面的视频中，你可以看到左侧的TypeScript 3.9与右侧的TypeScript 4.0的对比。</p><video loop autoplay muted style="width:100%;height:100%;" src="https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2020/08/partialModeFast.mp4"></video><p>当在编辑器中打开一个大型的代码仓库时，TypeScript 3.9根本无法提供代码补全以及信息提示。 反过来，安装了TypeScript 4.0的编辑器能够在当前文件上_立即_提供丰富的编辑体验，尽管后台仍然在加载整个工程。</p><p>目前，唯一一个支持该模块的编辑器是<a href="http://code.visualstudio.com/" target="_blank" rel="noreferrer">Visual Studio Code</a>，并且在<a href="http://code.visualstudio.com/insiders" target="_blank" rel="noreferrer">Visual Studio Code Insiders</a>版本中还带来了一些体验上的优化。 我们发现该特性在用户体验和功能性上仍有优化空间，我们总结了一个<a href="https://github.com/microsoft/TypeScript/issues/39035" target="_blank" rel="noreferrer">优化列表</a>。 我们也期待你的使用反馈。</p><p>更多详情请参考<a href="https://github.com/microsoft/TypeScript/issues/37713" target="_blank" rel="noreferrer">原始的提议</a>，<a href="https://github.com/microsoft/TypeScript/pull/38561" target="_blank" rel="noreferrer">功能实现的PR</a>，以及<a href="https://github.com/microsoft/TypeScript/issues/39035" target="_blank" rel="noreferrer">后续的跟踪帖</a>.</p><h3 id="更智能的自动导入" tabindex="-1">更智能的自动导入 <a class="header-anchor" href="#更智能的自动导入" aria-label="Permalink to &quot;更智能的自动导入&quot;">​</a></h3><p>自动导入是个特别好的功能，它让编码更加容易；然而，每一次自动导入不好用的时候，它就会导致一部分用户流失。 一个特殊的问题是，自动导入对于使用TypeScript编写的依赖不好用 - 也就是说，用户必须在工程中的某处明确地编写一个导入语句。</p><p>那么为什么自动导入在<code>@types</code>包上是好用的，但是对于自己编写的代码却不好用？ 这表明自动导入功能只适用于工程中已经引入的包。 因为TypeScript会自动地将<code>node_modules/@types</code>下面的包引入进工程，_那些_包才会被自动导入。 另一方面，其它的包会被排除，因为遍历<code>node_modules</code>下所有的包_相当_费时。</p><p>这就导致了在自动导入一个刚刚安装完但还没有开始使用的包时具有相当差的体验。</p><p>TypeScript 4.0对编辑器环境进行了一点小改动，它会自动引入你的工程下的<code>package.json</code>文件中<code>dependencies</code>（和<code>peerDependencies</code>）字段里列出的包。 这些引入的包只用于改进自动导入功能，它们对类型检查等其它功能没有任何影响。 这使得自动导入功能对于项目中所有带有类型的依赖项都是可用的，同时不必遍历<code>node_modules</code>。</p><p>少数情况下，若在<code>package.json</code>中列出了多于10个未导入的带有类型的依赖，那么该功能会被自动禁用以避免过慢的工程加载。 若想要强制启用该功能，或完全禁用该功能，则需要配置你的编辑器。 针对Visual Studio Code，对应到“Include Package JSON Auto Imports”配置（或者<code>typescript.preferences.includePackageJsonAutoImports</code>配置）。</p><p><img src="https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2020/08/configurePackageJsonAutoImports4-0.png" alt="Configuring &#39;include package JSON auto imports&#39;"> For more details, you can see the <a href="https://github.com/microsoft/TypeScript/issues/37812" target="_blank" rel="noreferrer">proposal issue</a> along with <a href="https://github.com/microsoft/TypeScript/pull/38923" target="_blank" rel="noreferrer">the implementing pull request</a>.</p><h2 id="我们的新网站" tabindex="-1">我们的新网站 <a class="header-anchor" href="#我们的新网站" aria-label="Permalink to &quot;我们的新网站&quot;">​</a></h2><p>最近，我们重写了<a href="https://www.typescriptlang.org/" target="_blank" rel="noreferrer">TypeScript官网</a>并且已经发布！</p><p><img src="https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2020/08/ts-web.png" alt="A screenshot of the new TypeScript website"></p><p><a href="https://devblogs.microsoft.com/typescript/announcing-the-new-typescript-website/" target="_blank" rel="noreferrer">我们在这里介绍了关于新网站的一些信息</a>；但仍期望用户给予更多的反馈！ 如果你有问题或建议，请到<a href="https://github.com/microsoft/TypeScript-Website" target="_blank" rel="noreferrer">这里提交Issue</a>。</p>`,140),e=[o];function t(c,r,y,F,i,E){return n(),a("div",null,e)}const u=s(p,[["render",t]]);export{d as __pageData,u as default};
