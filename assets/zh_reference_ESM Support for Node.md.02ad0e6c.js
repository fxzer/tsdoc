import{_ as s,o as n,c as a,V as o}from"./chunks/framework.ced88878.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"zh/reference/ESM Support for Node.md","lastUpdated":1682921420000}'),p={name:"zh/reference/ESM Support for Node.md"},l=o(`<p>在过去的几年中，Node.js一直致力于支持运行ECMAScript模块(ESM)。 这是一个很难支持的特性，因为Node.js生态系统的基础构建在一个名为CommonJS(CJS)的不同模块系统上。 两个模块系统之间的互操作带来了巨大的挑战，有许多新的功能需要处理； 然而，Node.js中对ESM的支持现在在Node.js中实现，并且尘埃落定。</p><p>这就是为什么TypeScript引入了两个新的 <code>module</code> 和 <code>moduleResolution</code> 设置：<code>node16</code> 和 <code>nodenext</code>。</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">compilerOptions</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">module</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">nodenext</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;module&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;nodenext&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这些新的模式引入了一些高级功能，我们将在此处探讨。</p><h3 id="package-json-中的-type-和新扩展名" tabindex="-1"><code>package.json</code> 中的 <code>type</code> 和新扩展名 <a class="header-anchor" href="#package-json-中的-type-和新扩展名" aria-label="Permalink to &quot;\`package.json\` 中的 \`type\` 和新扩展名&quot;">​</a></h3><p>Node.js支持在 <code>package.json</code> 中的 <a href="https://nodejs.org/api/packages.html#packages_package_json_and_file_extensions" target="_blank" rel="noreferrer">一个新设置</a>，叫做 <code>type</code>。 <code>&quot;type&quot;</code> 可以设置为 <code>&quot;module&quot;</code> 或 <code>&quot;commonjs&quot;</code>。</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">name</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">my-package</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">type</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">module</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">//</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">...</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">dependencies</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;name&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;my-package&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;type&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;module&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;//&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;...&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;dependencies&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>此设置控制 <code>.js</code> 和 <code>.d.ts</code> 文件是解释为ES模块还是CommonJS模块，并在未设置时默认为CommonJS。 当一个文件被视为ES模块时，与CommonJS相比，会出现一些不同的规则：</p><ul><li>可以使用 <code>import</code> / <code>export</code> 语句和顶级 <code>await</code></li><li>相对导入路径需要全扩展名（例如，我们必须写成 <code>import &quot;./foo.js&quot;</code> 而不是 <code>import &quot;./foo&quot;</code>）</li><li>导入可能与 <code>node_modules</code> 中的依赖项不同</li><li>一些类似全局变量的值，如 <code>require()</code> 和 <code>__dirname</code>，不能直接使用</li><li>CommonJS模块根据特定的规则被导入</li></ul><p>我们稍后会回到其中一些问题。</p><p>为了覆盖TypeScript在此系统中的工作方式，<code>.ts</code> 和 <code>.tsx</code> 文件现在以相同的方式工作。 当TypeScript找到一个 <code>.ts</code>、<code>.tsx</code>、<code>.js</code> 或 <code>.jsx</code> 文件时，它会向上查找一个 <code>package.json</code>，看看那个文件是否是一个ES模块，并使用它来确定：</p><ul><li>如何找到该文件导入的其他模块</li><li>如果生成输出，则如何转换该文件</li></ul><p>当一个 <code>.ts</code> 文件被编译为ES模块时，ECMAScript <code>import</code> / <code>export</code> 语法在 <code>.js</code> 输出中保持不变； 当它被编译为CommonJS模块时，它将生成与今天在 <a href="/tsdoc-vitepress/tsconfig#module"><code>module</code></a> 下获得的相同输出：<code>commonjs</code>。</p><p>这也意味着，在 <code>.ts</code> 文件是ES模块和CJS模块之间解析路径的方式不同。 例如，假设您今天有以下代码：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// ./foo.ts</span></span>
<span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">helper</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// ...</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// ./bar.ts</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { helper } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">./foo</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 仅在CJS中起作用</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">helper</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// ./foo.ts</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">helper</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// ./bar.ts</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { helper } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./foo&quot;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 仅在CJS中起作用</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">helper</span><span style="color:#24292E;">();</span></span></code></pre></div><p>这段代码在CommonJS模块中工作，但在ES模块中会失败，因为相对导入路径需要使用扩展名。</p><p>因此，它将不得不重写以使用<code>foo.ts</code>的<em>输出</em>的扩展名-因此，<code>bar.ts</code>将不得不从<code>./foo.js</code>导入。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// ./bar.ts</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { helper } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">./foo.js</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// works in ESM &amp; CJS</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">helper</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// ./bar.ts</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { helper } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./foo.js&quot;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// works in ESM &amp; CJS</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">helper</span><span style="color:#24292E;">();</span></span></code></pre></div><p>这可能一开始会有点繁琐，但像自动导入和路径补全这样的 TypeScript 工具通常会自动为您完成这些操作。</p><p>另一个需要提到的事情是这也适用于 <code>.d.ts</code> 文件。当 TypeScript 在一个包中找到一个 <code>.d.ts</code> 文件时，它是作为 ESM 或 CommonJS 文件处理还是基于包含该文件的包来决定的。</p><h3 id="新文件扩展名" tabindex="-1">新文件扩展名 <a class="header-anchor" href="#新文件扩展名" aria-label="Permalink to &quot;新文件扩展名&quot;">​</a></h3><p><code>package.json</code> 中的 <code>type</code> 字段很好用，因为它允许我们继续使用 <code>.ts</code> 和 <code>.js</code> 文件扩展名，这很方便。但是，您偶尔需要编写与 <code>type</code> 指定的不同的文件。您也可能更喜欢始终明确地指定。</p><p>Node.js 支持两个扩展名来帮助处理这个问题：<code>.mjs</code> 和 <code>.cjs</code>。<code>.mjs</code> 文件始终是 ES 模块，<code>.cjs</code> 文件始终是 CommonJS 模块，并且没有办法覆盖这些设置。</p><p>另外，TypeScript 还支持两个新的源文件扩展名：<code>.mts</code> 和 <code>.cts</code>。当 TypeScript 将这些文件编译为 JavaScript 文件时，它们将分别编译为 <code>.mjs</code> 和 <code>.cjs</code>。</p><p>此外，TypeScript 还支持两个新的声明文件扩展名：<code>.d.mts</code> 和 <code>.d.cts</code>。当 TypeScript 为 <code>.mts</code> 和 <code>.cts</code> 生成声明文件时，它们对应的扩展名将是 <code>.d.mts</code> 和 <code>.d.cts</code>。</p><p>使用这些扩展名是完全可选的，但即使您选择不将它们作为主要工作流程的一部分使用，它们通常也会很有用。</p><h3 id="commonjs-互操作性" tabindex="-1">CommonJS 互操作性 <a class="header-anchor" href="#commonjs-互操作性" aria-label="Permalink to &quot;CommonJS 互操作性&quot;">​</a></h3><p>Node.js 允许 ES 模块导入 CommonJS 模块，就像它们是带有默认导出的 ES 模块一样。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// @module: nodenext</span></span>
<span class="line"><span style="color:#7B7F8B;">// @filename: helper.cts</span></span>
<span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">helper</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hello world!</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// @filename: index.mts</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> foo </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">./helper.cjs</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 输出 &quot;hello world!&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">foo.</span><span style="color:#62E884;">helper</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// @module: nodenext</span></span>
<span class="line"><span style="color:#6A737D;">// @filename: helper.cts</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">helper</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello world!&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// @filename: index.mts</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> foo </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./helper.cjs&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 输出 &quot;hello world!&quot;</span></span>
<span class="line"><span style="color:#24292E;">foo.</span><span style="color:#6F42C1;">helper</span><span style="color:#24292E;">();</span></span></code></pre></div><p>在某些情况下，Node.js 还从 CommonJS 模块中合成命名导出，这可能更方便。在这些情况下，ES 模块可以使用“命名空间式”导入（即 <code>import * as foo from &quot;...&quot;</code>），或使用命名导入（即 <code>import { helper } from &quot;...&quot;</code>）。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// @module: nodenext</span></span>
<span class="line"><span style="color:#7B7F8B;">// @filename: helper.cts</span></span>
<span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">helper</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hello world!</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// @filename: index.mts</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { helper } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">./helper.cjs</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 输出 &quot;hello world!&quot;</span></span>
<span class="line"><span style="color:#62E884;">helper</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// @module: nodenext</span></span>
<span class="line"><span style="color:#6A737D;">// @filename: helper.cts</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">helper</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello world!&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// @filename: index.mts</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { helper } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./helper.cjs&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 输出 &quot;hello world!&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">helper</span><span style="color:#24292E;">();</span></span></code></pre></div><p>TypeScript并不总是能够知道这些命名导入是否会被合成，但当从绝对是一个CommonJS模块的文件导入时，TypeScript会出于容错考虑并使用一些启发式方法。</p><p>关于交互操作，有一个TypeScript特定的语法如下所示：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> foo </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">require</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">foo</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> foo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>在一个CommonJS模块中，这只是一个<code>require()</code>调用，而在ES模块中，它导入<a href="https://nodejs.org/api/module.html#module_module_createrequire_filename" target="_blank" rel="noreferrer"><code>createRequire</code></a> 来实现同样的功能。这将使代码在不支持<code>require()</code>的运行时，如浏览器中，不太可移植，但通常用于交互操作。因此，您可以使用以下语法编写上面的示例：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// @module: nodenext</span></span>
<span class="line"><span style="color:#7B7F8B;">// @filename: helper.cts</span></span>
<span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">helper</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hello world!</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// @filename: index.mts</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> foo </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">require</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">./foo.cjs</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">foo.</span><span style="color:#62E884;">helper</span><span style="color:#F6F6F4;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// @module: nodenext</span></span>
<span class="line"><span style="color:#6A737D;">// @filename: helper.cts</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">helper</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello world!&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// @filename: index.mts</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> foo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./foo.cjs&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">foo.</span><span style="color:#6F42C1;">helper</span><span style="color:#24292E;">()</span></span></code></pre></div><p>最后，值得注意的是，从CJS模块中导入ESM文件的唯一方法是使用动态的<code>import()</code>调用。这可能会带来一些挑战，但是这是Node.js的行为。</p><p>您可以<a href="https://nodejs.org/api/esm.html#esm_interoperability_with_commonjs" target="_blank" rel="noreferrer">在此处阅读有关Node.js中ESM / CommonJS交互操作的更多信息</a>。</p><h3 id="package-json-中的导出、导入和自引用" tabindex="-1"><code>package.json</code> 中的导出、导入和自引用 <a class="header-anchor" href="#package-json-中的导出、导入和自引用" aria-label="Permalink to &quot;\`package.json\` 中的导出、导入和自引用&quot;">​</a></h3><p>Node.js 支持在 <code>package.json</code> 中定义入口点的新字段，称为 <code>&quot;exports&quot;</code>。该字段是定义 <code>package.json</code> 中 <code>&quot;main&quot;</code> 的更强大的替代方案，可以控制向使用者公开包的哪些部分。</p><p>以下是一个支持 CommonJS 和 ESM 分别设置入口点的 <code>package.json</code> 示例：</p><div class="language-json5"><button title="Copy Code" class="copy"></button><span class="lang">json5</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// package.json</span></span>
<span class="line"><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">name</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">my-package</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">type</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">module</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">exports</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">.</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 在 ESM 中 \`import &quot;my-package&quot;\` 的入口点</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">import</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">./esm/index.js</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 在 CJS 中 \`require(&quot;my-package&quot;)\` 的入口点</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">require</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">./commonjs/index.cjs</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">        },</span></span>
<span class="line"><span style="color:#F6F6F4;">    },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 为旧版本的 Node.js 提供 CJS 的后备</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">main</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">./commonjs/index.cjs</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// package.json</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;my-package&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;type&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;module&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;exports&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;.&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 在 ESM 中 \`import &quot;my-package&quot;\` 的入口点</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;import&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./esm/index.js&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 在 CJS 中 \`require(&quot;my-package&quot;)\` 的入口点</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;require&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./commonjs/index.cjs&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 为旧版本的 Node.js 提供 CJS 的后备</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;main&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./commonjs/index.cjs&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这个功能很强大，您可以在 <a href="https://nodejs.org/api/packages.html" target="_blank" rel="noreferrer">Node.js 文档中阅读更多内容</a>。在此，我们将着重介绍 TypeScript 如何支持它。</p><p>在 TypeScript 的原始 Node 支持中，它会查找 <code>&quot;main&quot;</code> 字段，然后查找与该入口对应的声明文件。例如，如果 <code>&quot;main&quot;</code> 指向 <code>./lib/index.js</code>，TypeScript 会查找名为 <code>./lib/index.d.ts</code> 的文件。包的作者可以通过指定单独的字段 <code>&quot;types&quot;</code> 来覆盖此行为（例如 <code>&quot;types&quot;: &quot;./types/index.d.ts&quot;</code>）。</p><p>新的支持使用 <a href="https://nodejs.org/api/packages.html" target="_blank" rel="noreferrer">导入条件</a> 类似地工作。默认情况下，TypeScript 使用相同的导入条件规则 - 如果您从一个 ESM 模块导入，它会查找 <code>import</code> 字段，如果您从一个 CommonJS 模块导入，则会查找 <code>require</code> 字段。如果找到它们，它将查找相应的声明文件。如果您需要指向不同位置的类型声明，则可以添加 <code>&quot;types&quot;</code> 导入条件。</p><div class="language-json5"><button title="Copy Code" class="copy"></button><span class="lang">json5</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// package.json</span></span>
<span class="line"><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">name</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">my-package</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">type</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">module</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">exports</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">.</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// Entry-point for \`import &quot;my-package&quot;\` in ESM</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">import</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">// Where TypeScript will look.</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">types</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">./types/esm/index.d.ts</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">// Where Node.js will look.</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">default</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">./esm/index.js</span><span style="color:#DEE492;">&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">            },</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// Entry-point for \`require(&quot;my-package&quot;) in CJS</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">require</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">// Where TypeScript will look.</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">types</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">./types/commonjs/index.d.cts</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">// Where Node.js will look.</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">default</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">./commonjs/index.cjs</span><span style="color:#DEE492;">&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">            },</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// Fall-back for older versions of TypeScript</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">types</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">./types/index.d.ts</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// CJS fall-back for older versions of Node.js</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">main</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">./commonjs/index.cjs</span><span style="color:#DEE492;">&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// package.json</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;my-package&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;type&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;module&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;exports&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;.&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// Entry-point for \`import &quot;my-package&quot;\` in ESM</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;import&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// Where TypeScript will look.</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;types&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./types/esm/index.d.ts&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// Where Node.js will look.</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;default&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./esm/index.js&quot;</span></span>
<span class="line"><span style="color:#24292E;">            },</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// Entry-point for \`require(&quot;my-package&quot;) in CJS</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;require&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// Where TypeScript will look.</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;types&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./types/commonjs/index.d.cts&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// Where Node.js will look.</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;default&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./commonjs/index.cjs&quot;</span></span>
<span class="line"><span style="color:#24292E;">            },</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Fall-back for older versions of TypeScript</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;types&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./types/index.d.ts&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// CJS fall-back for older versions of Node.js</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;main&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./commonjs/index.cjs&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p><code>&quot;types&quot;</code> 条件应该始终放在 <code>&quot;exports&quot;</code> 的第一位。</p></blockquote><p>需要注意的是，CommonJS 入口点和 ES 模块入口点每个都需要自己的声明文件，即使它们之间的内容相同。 每个声明文件都根据其文件扩展名和 <code>package.json</code> 中的 <code>&quot;type&quot;</code> 字段被解释为 CommonJS 模块或 ES 模块，检测到的模块类型必须与 Node 检测到的相应 JavaScript 文件的模块类型匹配，以确保类型检查的正确性。 尝试使用单个 <code>.d.ts</code> 文件为 ES 模块入口点和 CommonJS 入口点同时提供类型信息将导致 TypeScript 认为这两个入口点中只存在一个，从而导致使用该包的用户出现编译器错误。</p><p>TypeScript 还以类似的方式支持 <code>package.json</code> 中的 <code>&quot;imports&quot;</code> 字段（在相应文件旁查找声明文件），并支持 <a href="https://nodejs.org/api/packages.html#packages_self_referencing_a_package_using_its_name" target="_blank" rel="noreferrer">包自引用</a> 这一特性。这些功能通常不是很复杂，但是被支持。</p>`,49),e=[l];function c(t,r,y,F,i,E){return n(),a("div",null,e)}const q=s(p,[["render",c]]);export{u as __pageData,q as default};
