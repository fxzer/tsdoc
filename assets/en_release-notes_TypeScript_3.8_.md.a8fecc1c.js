import{_ as s,o as n,c as a,V as l}from"./chunks/framework.ced88878.js";const E=JSON.parse('{"title":"TypeScript 3.8","description":"","frontmatter":{"title":"TypeScript 3.8","layout":"docs","permalink":"/docs/handbook/release-notes/typescript-3-8.html","oneline":"TypeScript 3.8 Release Notes"},"headers":[],"relativePath":"en/release-notes/TypeScript[3.8].md","lastUpdated":1681915487000}'),o={name:"en/release-notes/TypeScript[3.8].md"},e=l(`<h2 id="type-only-imports-and-export" tabindex="-1">Type-Only Imports and Export <a class="header-anchor" href="#type-only-imports-and-export" aria-label="Permalink to &quot;Type-Only Imports and Export&quot;">â€‹</a></h2><p>This feature is something most users may never have to think about; however, if you&#39;ve hit issues under <a href="/tsdoc-vitepress/tsconfig#isolatedModules"><code>isolatedModules</code></a>, TypeScript&#39;s <code>transpileModule</code> API, or Babel, this feature might be relevant.</p><p>TypeScript 3.8 adds a new syntax for type-only imports and exports.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> { SomeThing } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">./some-module.js</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> { SomeThing };</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">type</span><span style="color:#24292E;"> { SomeThing } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./some-module.js&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">type</span><span style="color:#24292E;"> { SomeThing };</span></span></code></pre></div><p><code>import type</code> only imports declarations to be used for type annotations and declarations. It <em>always</em> gets fully erased, so there&#39;s no remnant of it at runtime. Similarly, <code>export type</code> only provides an export that can be used for type contexts, and is also erased from TypeScript&#39;s output.</p><p>It&#39;s important to note that classes have a value at runtime and a type at design-time, and the use is context-sensitive. When using <code>import type</code> to import a class, you can&#39;t do things like extend from it.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> { Component } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">react</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ButtonProps</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// ...</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Button</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Component</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">ButtonProps</span><span style="color:#F6F6F4;">&gt; {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">//               ~~~~~~~~~</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// error! &#39;Component&#39; only refers to a type, but is being used as a value here.</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// ...</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">type</span><span style="color:#24292E;"> { Component } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;react&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ButtonProps</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Button</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Component</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">ButtonProps</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//               ~~~~~~~~~</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// error! &#39;Component&#39; only refers to a type, but is being used as a value here.</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>If you&#39;ve used Flow before, the syntax is fairly similar. One difference is that we&#39;ve added a few restrictions to avoid code that might appear ambiguous.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// Is only &#39;Foo&#39; a type? Or every declaration in the import?</span></span>
<span class="line"><span style="color:#7B7F8B;">// We just give an error because it&#39;s not clear.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> Foo, { Bar, Baz } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">some-module</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#7B7F8B;">//     ~~~~~~~~~~~~~~~~~~~~~~</span></span>
<span class="line"><span style="color:#7B7F8B;">// error! A type-only import can specify a default import or named bindings, but not both.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Is only &#39;Foo&#39; a type? Or every declaration in the import?</span></span>
<span class="line"><span style="color:#6A737D;">// We just give an error because it&#39;s not clear.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">type</span><span style="color:#24292E;"> Foo, { Bar, Baz } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;some-module&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">//     ~~~~~~~~~~~~~~~~~~~~~~</span></span>
<span class="line"><span style="color:#6A737D;">// error! A type-only import can specify a default import or named bindings, but not both.</span></span></code></pre></div><p>In conjunction with <code>import type</code>, TypeScript 3.8 also adds a new compiler flag to control what happens with imports that won&#39;t be utilized at runtime: <a href="/tsdoc-vitepress/tsconfig#importsNotUsedAsValues"><code>importsNotUsedAsValues</code></a>. This flag takes 3 different values:</p><ul><li><code>remove</code>: this is today&#39;s behavior of dropping these imports. It&#39;s going to continue to be the default, and is a non-breaking change.</li><li><code>preserve</code>: this <em>preserves</em> all imports whose values are never used. This can cause imports/side-effects to be preserved.</li><li><code>error</code>: this preserves all imports (the same as the <code>preserve</code> option), but will error when a value import is only used as a type. This might be useful if you want to ensure no values are being accidentally imported, but still make side-effect imports explicit.</li></ul><p>For more information about the feature, you can <a href="https://github.com/microsoft/TypeScript/pull/35200" target="_blank" rel="noreferrer">take a look at the pull request</a>, and <a href="https://github.com/microsoft/TypeScript/pull/36092/" target="_blank" rel="noreferrer">relevant changes</a> around broadening where imports from an <code>import type</code> declaration can be used.</p><h2 id="ecmascript-private-fields" tabindex="-1">ECMAScript Private Fields <a class="header-anchor" href="#ecmascript-private-fields" aria-label="Permalink to &quot;ECMAScript Private Fields&quot;">â€‹</a></h2><p>TypeScript 3.8 brings support for ECMAScript&#39;s private fields, part of the <a href="https://github.com/tc39/proposal-class-fields/" target="_blank" rel="noreferrer">stage-3 class fields proposal</a>.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Person</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  #name</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">constructor</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.#name </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> name;</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">greet</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#E7EE98;">\`Hello, my name is </span><span style="color:#F286C4;">\${</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.#name</span><span style="color:#F286C4;">}</span><span style="color:#E7EE98;">!\`</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> jeremy </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Person</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Jeremy Bearimy</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">jeremy.#name;</span></span>
<span class="line"><span style="color:#7B7F8B;">//     ~~~~~</span></span>
<span class="line"><span style="color:#7B7F8B;">// Property &#39;#name&#39; is not accessible outside class &#39;Person&#39;</span></span>
<span class="line"><span style="color:#7B7F8B;">// because it has a private identifier.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">#name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">constructor</span><span style="color:#24292E;">(</span><span style="color:#E36209;">name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.#name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> name;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">greet</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`Hello, my name is \${</span><span style="color:#005CC5;">this</span><span style="color:#032F62;">.</span><span style="color:#24292E;">#name</span><span style="color:#032F62;">}!\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> jeremy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Jeremy Bearimy&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">jeremy.#name;</span></span>
<span class="line"><span style="color:#6A737D;">//     ~~~~~</span></span>
<span class="line"><span style="color:#6A737D;">// Property &#39;#name&#39; is not accessible outside class &#39;Person&#39;</span></span>
<span class="line"><span style="color:#6A737D;">// because it has a private identifier.</span></span></code></pre></div><p>Unlike regular properties (even ones declared with the <code>private</code> modifier), private fields have a few rules to keep in mind. Some of them are:</p><ul><li>Private fields start with a <code>#</code> character. Sometimes we call these <em>private names</em>.</li><li>Every private field name is uniquely scoped to its containing class.</li><li>TypeScript accessibility modifiers like <code>public</code> or <code>private</code> can&#39;t be used on private fields.</li><li>Private fields can&#39;t be accessed or even detected outside of the containing class - even by JS users! Sometimes we call this <em>hard privacy</em>.</li></ul><p>Apart from &quot;hard&quot; privacy, another benefit of private fields is that uniqueness we just mentioned. For example, regular property declarations are prone to being overwritten in subclasses.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">C</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  foo </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">cHelper</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.foo;</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">D</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">C</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  foo </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">20</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">dHelper</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.foo;</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> instance </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">D</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#7B7F8B;">// &#39;this.foo&#39; refers to the same property on each instance.</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(instance.</span><span style="color:#62E884;">cHelper</span><span style="color:#F6F6F4;">()); </span><span style="color:#7B7F8B;">// prints &#39;20&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(instance.</span><span style="color:#62E884;">dHelper</span><span style="color:#F6F6F4;">()); </span><span style="color:#7B7F8B;">// prints &#39;20&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">C</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">foo</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">cHelper</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.foo;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">D</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">C</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">foo</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">dHelper</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.foo;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> instance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">D</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// &#39;this.foo&#39; refers to the same property on each instance.</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(instance.</span><span style="color:#6F42C1;">cHelper</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// prints &#39;20&#39;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(instance.</span><span style="color:#6F42C1;">dHelper</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// prints &#39;20&#39;</span></span></code></pre></div><p>With private fields, you&#39;ll never have to worry about this, since each field name is unique to the containing class.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft has-diff vp-code-dark"><code><span class="line"><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">C</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  #foo </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">cHelper</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.#foo;</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">D</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">C</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  #foo </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">20</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">dHelper</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.#foo;</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> instance </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">D</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#7B7F8B;">// &#39;this.#foo&#39; refers to a different field within each class.</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(instance.</span><span style="color:#62E884;">cHelper</span><span style="color:#F6F6F4;">()); </span><span style="color:#7B7F8B;">// prints &#39;10&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(instance.</span><span style="color:#62E884;">dHelper</span><span style="color:#F6F6F4;">()); </span><span style="color:#7B7F8B;">// prints &#39;20&#39;</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">C</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">#foo</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">cHelper</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.#foo;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">D</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">C</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">#foo</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">dHelper</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.#foo;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> instance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">D</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// &#39;this.#foo&#39; refers to a different field within each class.</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(instance.</span><span style="color:#6F42C1;">cHelper</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// prints &#39;10&#39;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(instance.</span><span style="color:#6F42C1;">dHelper</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// prints &#39;20&#39;</span></span></code></pre></div><p>Another thing worth noting is that accessing a private field on any other type will result in a <code>TypeError</code>!</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Square</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  #sideLength</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">constructor</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">sideLength</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.#sideLength </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> sideLength;</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">equals</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">other</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">any</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.#sideLength </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;"> other.#sideLength;</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> a </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Square</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">100</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> b </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> { sideLength</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">100</span><span style="color:#F6F6F4;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// Boom!</span></span>
<span class="line"><span style="color:#7B7F8B;">// TypeError: attempted to get private field on non-instance</span></span>
<span class="line"><span style="color:#7B7F8B;">// This fails because &#39;b&#39; is not an instance of &#39;Square&#39;.</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(a.</span><span style="color:#62E884;">equals</span><span style="color:#F6F6F4;">(b));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Square</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">#sideLength</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">constructor</span><span style="color:#24292E;">(</span><span style="color:#E36209;">sideLength</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.#sideLength </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sideLength;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(</span><span style="color:#E36209;">other</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.#sideLength </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> other.#sideLength;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">a</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Square</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">b</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { sideLength: </span><span style="color:#005CC5;">100</span><span style="color:#24292E;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Boom!</span></span>
<span class="line"><span style="color:#6A737D;">// TypeError: attempted to get private field on non-instance</span></span>
<span class="line"><span style="color:#6A737D;">// This fails because &#39;b&#39; is not an instance of &#39;Square&#39;.</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(a.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(b));</span></span></code></pre></div><p>Finally, for any plain <code>.js</code> file users, private fields <em>always</em> have to be declared before they&#39;re assigned to.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">C</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// No declaration for &#39;#foo&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// :(</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">constructor</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">foo</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// SyntaxError!</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// &#39;#foo&#39; needs to be declared before writing to it.</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.#foo </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> foo;</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">C</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// No declaration for &#39;#foo&#39;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// :(</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">constructor</span><span style="color:#24292E;">(</span><span style="color:#E36209;">foo</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// SyntaxError!</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &#39;#foo&#39; needs to be declared before writing to it.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.#foo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> foo;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>JavaScript has always allowed users to access undeclared properties, whereas TypeScript has always required declarations for class properties. With private fields, declarations are always needed regardless of whether we&#39;re working in <code>.js</code> or <code>.ts</code> files.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">C</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">/** </span><span style="color:#F286C4;">@type</span><span style="color:#7B7F8B;"> </span><span style="color:#97E1F1;font-style:italic;">{number}</span><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F6F6F4;">  #foo;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">constructor</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">foo</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// This works.</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.#foo </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> foo;</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">C</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/** </span><span style="color:#D73A49;">@type</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{number}</span><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">#foo</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">constructor</span><span style="color:#24292E;">(</span><span style="color:#E36209;">foo</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// This works.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.#foo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> foo;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>For more information about the implementation, you can <a href="https://github.com/Microsoft/TypeScript/pull/30829" target="_blank" rel="noreferrer">check out the original pull request</a></p><h3 id="which-should-i-use" tabindex="-1">Which should I use? <a class="header-anchor" href="#which-should-i-use" aria-label="Permalink to &quot;Which should I use?&quot;">â€‹</a></h3><p>We&#39;ve already received many questions on which type of privates you should use as a TypeScript user: most commonly, &quot;should I use the <code>private</code> keyword, or ECMAScript&#39;s hash/pound (<code>#</code>) private fields?&quot; It depends!</p><p>When it comes to properties, TypeScript&#39;s <code>private</code> modifiers are fully erased - that means that at runtime, it acts entirely like a normal property and there&#39;s no way to tell that it was declared with a <code>private</code> modifier. When using the <code>private</code> keyword, privacy is only enforced at compile-time/design-time, and for JavaScript consumers it&#39;s entirely intent-based.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">C</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> foo </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// This is an error at compile time,</span></span>
<span class="line"><span style="color:#7B7F8B;">// but when TypeScript outputs .js files,</span></span>
<span class="line"><span style="color:#7B7F8B;">// it&#39;ll run fine and print &#39;10&#39;.</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">C</span><span style="color:#F6F6F4;">().foo); </span><span style="color:#7B7F8B;">// prints &#39;10&#39;</span></span>
<span class="line"><span style="color:#7B7F8B;">//                  ~~~</span></span>
<span class="line"><span style="color:#7B7F8B;">// error! Property &#39;foo&#39; is private and only accessible within class &#39;C&#39;.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// TypeScript allows this at compile-time</span></span>
<span class="line"><span style="color:#7B7F8B;">// as a &quot;work-around&quot; to avoid the error.</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">C</span><span style="color:#F6F6F4;">()[</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">foo</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">]); </span><span style="color:#7B7F8B;">// prints &#39;10&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">C</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#E36209;">foo</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// This is an error at compile time,</span></span>
<span class="line"><span style="color:#6A737D;">// but when TypeScript outputs .js files,</span></span>
<span class="line"><span style="color:#6A737D;">// it&#39;ll run fine and print &#39;10&#39;.</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">C</span><span style="color:#24292E;">().foo); </span><span style="color:#6A737D;">// prints &#39;10&#39;</span></span>
<span class="line"><span style="color:#6A737D;">//                  ~~~</span></span>
<span class="line"><span style="color:#6A737D;">// error! Property &#39;foo&#39; is private and only accessible within class &#39;C&#39;.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// TypeScript allows this at compile-time</span></span>
<span class="line"><span style="color:#6A737D;">// as a &quot;work-around&quot; to avoid the error.</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">C</span><span style="color:#24292E;">()[</span><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#24292E;">]); </span><span style="color:#6A737D;">// prints &#39;10&#39;</span></span></code></pre></div><p>The upside is that this sort of &quot;soft privacy&quot; can help your consumers temporarily work around not having access to some API, and also works in any runtime.</p><p>On the other hand, ECMAScript&#39;s <code>#</code> privates are completely inaccessible outside of the class.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">C</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  #foo </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">C</span><span style="color:#F6F6F4;">().#foo); </span><span style="color:#7B7F8B;">// SyntaxError</span></span>
<span class="line"><span style="color:#7B7F8B;">//                  ~~~~</span></span>
<span class="line"><span style="color:#7B7F8B;">// TypeScript reports an error *and*</span></span>
<span class="line"><span style="color:#7B7F8B;">// this won&#39;t work at runtime!</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">C</span><span style="color:#F6F6F4;">()[</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">#foo</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">]); </span><span style="color:#7B7F8B;">// prints undefined</span></span>
<span class="line"><span style="color:#7B7F8B;">//          ~~~~~~~~~~~~~~~</span></span>
<span class="line"><span style="color:#7B7F8B;">// TypeScript reports an error under &#39;noImplicitAny&#39;,</span></span>
<span class="line"><span style="color:#7B7F8B;">// and this prints &#39;undefined&#39;.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">C</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">#foo</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">C</span><span style="color:#24292E;">().#foo); </span><span style="color:#6A737D;">// SyntaxError</span></span>
<span class="line"><span style="color:#6A737D;">//                  ~~~~</span></span>
<span class="line"><span style="color:#6A737D;">// TypeScript reports an error *and*</span></span>
<span class="line"><span style="color:#6A737D;">// this won&#39;t work at runtime!</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">C</span><span style="color:#24292E;">()[</span><span style="color:#032F62;">&quot;#foo&quot;</span><span style="color:#24292E;">]); </span><span style="color:#6A737D;">// prints undefined</span></span>
<span class="line"><span style="color:#6A737D;">//          ~~~~~~~~~~~~~~~</span></span>
<span class="line"><span style="color:#6A737D;">// TypeScript reports an error under &#39;noImplicitAny&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">// and this prints &#39;undefined&#39;.</span></span></code></pre></div><p>This hard privacy is really useful for strictly ensuring that nobody can take use of any of your internals. If you&#39;re a library author, removing or renaming a private field should never cause a breaking change.</p><p>As we mentioned, another benefit is that subclassing can be easier with ECMAScript&#39;s <code>#</code> privates because they <em>really</em> are private. When using ECMAScript <code>#</code> private fields, no subclass ever has to worry about collisions in field naming. When it comes to TypeScript&#39;s <code>private</code> property declarations, users still have to be careful not to trample over properties declared in superclasses.</p><p>One more thing to think about is where you intend for your code to run. TypeScript currently can&#39;t support this feature unless targeting ECMAScript 2015 (ES6) targets or higher. This is because our downleveled implementation uses <code>WeakMap</code>s to enforce privacy, and <code>WeakMap</code>s can&#39;t be polyfilled in a way that doesn&#39;t cause memory leaks. In contrast, TypeScript&#39;s <code>private</code>-declared properties work with all targets - even ECMAScript 3!</p><p>A final consideration might be speed: <code>private</code> properties are no different from any other property, so accessing them is as fast as any other property access no matter which runtime you target. In contrast, because <code>#</code> private fields are downleveled using <code>WeakMap</code>s, they may be slower to use. While some runtimes might optimize their actual implementations of <code>#</code> private fields, and even have speedy <code>WeakMap</code> implementations, that might not be the case in all runtimes.</p><h2 id="export-as-ns-syntax" tabindex="-1"><code>export * as ns</code> Syntax <a class="header-anchor" href="#export-as-ns-syntax" aria-label="Permalink to &quot;\`export * as ns\` Syntax&quot;">â€‹</a></h2><p>It&#39;s often common to have a single entry-point that exposes all the members of another module as a single member.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">as</span><span style="color:#F6F6F4;"> utilities </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">./utilities.js</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> { utilities };</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> utilities </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./utilities.js&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> { utilities };</span></span></code></pre></div><p>This is so common that ECMAScript 2020 recently added a new syntax to support this pattern!</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">as</span><span style="color:#F6F6F4;"> utilities </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">./utilities.js</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> utilities </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./utilities.js&quot;</span><span style="color:#24292E;">;</span></span></code></pre></div><p>This is a nice quality-of-life improvement to JavaScript, and TypeScript 3.8 implements this syntax. When your module target is earlier than <code>es2020</code>, TypeScript will output something along the lines of the first code snippet.</p><h2 id="top-level-await" tabindex="-1">Top-Level <code>await</code> <a class="header-anchor" href="#top-level-await" aria-label="Permalink to &quot;Top-Level \`await\`&quot;">â€‹</a></h2><p>TypeScript 3.8 provides support for a handy upcoming ECMAScript feature called &quot;top-level <code>await</code>&quot;.</p><p>JavaScript users often introduce an <code>async</code> function in order to use <code>await</code>, and then immediately called the function after defining it.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">async</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> response </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">await</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">fetch</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">...</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> greeting </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">await</span><span style="color:#F6F6F4;"> response.</span><span style="color:#62E884;">text</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(greeting);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">catch</span><span style="color:#F6F6F4;">((</span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> console.</span><span style="color:#62E884;">error</span><span style="color:#F6F6F4;">(e));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">response</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fetch</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;...&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">greeting</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> response.</span><span style="color:#6F42C1;">text</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(greeting);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">main</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;">((</span><span style="color:#E36209;">e</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> console.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(e));</span></span></code></pre></div><p>This is because previously in JavaScript (along with most other languages with a similar feature), <code>await</code> was only allowed within the body of an <code>async</code> function. However, with top-level <code>await</code>, we can use <code>await</code> at the top level of a module.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> response </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">await</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">fetch</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">...</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> greeting </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">await</span><span style="color:#F6F6F4;"> response.</span><span style="color:#62E884;">text</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(greeting);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// Make sure we&#39;re a module</span></span>
<span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> {};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">response</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fetch</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;...&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">greeting</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> response.</span><span style="color:#6F42C1;">text</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(greeting);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Make sure we&#39;re a module</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> {};</span></span></code></pre></div><p>Note there&#39;s a subtlety: top-level <code>await</code> only works at the top level of a <em>module</em>, and files are only considered modules when TypeScript finds an <code>import</code> or an <code>export</code>. In some basic cases, you might need to write out <code>export {}</code> as some boilerplate to make sure of this.</p><p>Top level <code>await</code> may not work in all environments where you might expect at this point. Currently, you can only use top level <code>await</code> when the <a href="/tsdoc-vitepress/tsconfig#target"><code>target</code></a> compiler option is <code>es2017</code> or above, and <code>module</code> is <code>esnext</code> or <code>system</code>. Support within several environments and bundlers may be limited or may require enabling experimental support.</p><p>For more information on our implementation, you can <a href="https://github.com/microsoft/TypeScript/pull/35813" target="_blank" rel="noreferrer">check out the original pull request</a>.</p><h2 id="es2020-for-target-and-module" tabindex="-1"><code>es2020</code> for <code>target</code> and <code>module</code> <a class="header-anchor" href="#es2020-for-target-and-module" aria-label="Permalink to &quot;\`es2020\` for \`target\` and \`module\`&quot;">â€‹</a></h2><p>TypeScript 3.8 supports <code>es2020</code> as an option for <code>module</code> and <a href="/tsdoc-vitepress/tsconfig#target"><code>target</code></a>. This will preserve newer ECMAScript 2020 features like optional chaining, nullish coalescing, <code>export * as ns</code>, and dynamic <code>import(...)</code> syntax. It also means <code>bigint</code> literals now have a stable <a href="/tsdoc-vitepress/tsconfig#target"><code>target</code></a> below <code>esnext</code>.</p><h2 id="jsdoc-property-modifiers" tabindex="-1">JSDoc Property Modifiers <a class="header-anchor" href="#jsdoc-property-modifiers" aria-label="Permalink to &quot;JSDoc Property Modifiers&quot;">â€‹</a></h2><p>TypeScript 3.8 supports JavaScript files by turning on the <a href="/tsdoc-vitepress/tsconfig#allowJs"><code>allowJs</code></a> flag, and also supports <em>type-checking</em> those JavaScript files via the <a href="/tsdoc-vitepress/tsconfig#checkJs"><code>checkJs</code></a> option or by adding a <code>// @ts-check</code> comment to the top of your <code>.js</code> files.</p><p>Because JavaScript files don&#39;t have dedicated syntax for type-checking, TypeScript leverages JSDoc. TypeScript 3.8 understands a few new JSDoc tags for properties.</p><p>First are the accessibility modifiers: <code>@public</code>, <code>@private</code>, and <code>@protected</code>. These tags work exactly like <code>public</code>, <code>private</code>, and <code>protected</code> respectively work in TypeScript.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// @ts-check</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Foo</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">constructor</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">/** </span><span style="color:#F286C4;">@private</span><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.stuff </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">100</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">printStuff</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.stuff);</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Foo</span><span style="color:#F6F6F4;">().stuff;</span></span>
<span class="line"><span style="color:#7B7F8B;">//        ~~~~~</span></span>
<span class="line"><span style="color:#7B7F8B;">// error! Property &#39;stuff&#39; is private and only accessible within class &#39;Foo&#39;.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// @ts-check</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Foo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">constructor</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/** </span><span style="color:#D73A49;">@private</span><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.stuff </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">printStuff</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.stuff);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Foo</span><span style="color:#24292E;">().stuff;</span></span>
<span class="line"><span style="color:#6A737D;">//        ~~~~~</span></span>
<span class="line"><span style="color:#6A737D;">// error! Property &#39;stuff&#39; is private and only accessible within class &#39;Foo&#39;.</span></span></code></pre></div><ul><li><code>@public</code> is always implied and can be left off, but means that a property can be reached from anywhere.</li><li><code>@private</code> means that a property can only be used within the containing class.</li><li><code>@protected</code> means that a property can only be used within the containing class, and all derived subclasses, but not on dissimilar instances of the containing class.</li></ul><p>Next, we&#39;ve also added the <code>@readonly</code> modifier to ensure that a property is only ever written to during initialization.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// @ts-check</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Foo</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">constructor</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">/** </span><span style="color:#F286C4;">@readonly</span><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.stuff </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">100</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">writeToStuff</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.stuff </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">200</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//   ~~~~~</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// Cannot assign to &#39;stuff&#39; because it is a read-only property.</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Foo</span><span style="color:#F6F6F4;">().stuff</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#7B7F8B;">//        ~~~~~</span></span>
<span class="line"><span style="color:#7B7F8B;">// Cannot assign to &#39;stuff&#39; because it is a read-only property.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// @ts-check</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Foo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">constructor</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/** </span><span style="color:#D73A49;">@readonly</span><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.stuff </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">writeToStuff</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.stuff </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">200</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//   ~~~~~</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Cannot assign to &#39;stuff&#39; because it is a read-only property.</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Foo</span><span style="color:#24292E;">().stuff</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">//        ~~~~~</span></span>
<span class="line"><span style="color:#6A737D;">// Cannot assign to &#39;stuff&#39; because it is a read-only property.</span></span></code></pre></div><h2 id="better-directory-watching-on-linux-and-watchoptions" tabindex="-1">Better Directory Watching on Linux and <code>watchOptions</code> <a class="header-anchor" href="#better-directory-watching-on-linux-and-watchoptions" aria-label="Permalink to &quot;Better Directory Watching on Linux and \`watchOptions\`&quot;">â€‹</a></h2><p>TypeScript 3.8 ships a new strategy for watching directories, which is crucial for efficiently picking up changes to <code>node_modules</code>.</p><p>For some context, on operating systems like Linux, TypeScript installs directory watchers (as opposed to file watchers) on <code>node_modules</code> and many of its subdirectories to detect changes in dependencies. This is because the number of available file watchers is often eclipsed by the of files in <code>node_modules</code>, whereas there are way fewer directories to track.</p><p>Older versions of TypeScript would <em>immediately</em> install directory watchers on folders, and at startup that would be fine; however, during an npm install, a lot of activity will take place within <code>node_modules</code> and that can overwhelm TypeScript, often slowing editor sessions to a crawl. To prevent this, TypeScript 3.8 waits slightly before installing directory watchers to give these highly volatile directories some time to stabilize.</p><p>Because every project might work better under different strategies, and this new approach might not work well for your workflows, TypeScript 3.8 introduces a new <code>watchOptions</code> field in <code>tsconfig.json</code> and <code>jsconfig.json</code> which allows users to tell the compiler/language service which watching strategies should be used to keep track of files and directories.</p><div class="language-jsonc"><button title="Copy Code" class="copy"></button><span class="lang">jsonc</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// Some typical compiler options</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">compilerOptions</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">target</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">es2020</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">moduleResolution</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">node</span><span style="color:#DEE492;">&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// ...</span></span>
<span class="line"><span style="color:#F6F6F4;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// NEW: Options for file/directory watching</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">watchOptions</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// Use native file system events for files and directories</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">watchFile</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">useFsEvents</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">watchDirectory</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">useFsEvents</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// Poll files for updates more frequently</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// when they&#39;re updated a lot.</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">fallbackPolling</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">dynamicPriority</span><span style="color:#DEE492;">&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Some typical compiler options</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;target&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;es2020&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;moduleResolution&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;node&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// NEW: Options for file/directory watching</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;watchOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Use native file system events for files and directories</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;watchFile&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;useFsEvents&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;watchDirectory&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;useFsEvents&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Poll files for updates more frequently</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// when they&#39;re updated a lot.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;fallbackPolling&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;dynamicPriority&quot;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>watchOptions</code> contains 4 new options that can be configured:</p><ul><li><p><a href="/tsdoc-vitepress/tsconfig#watchFile"><code>watchFile</code></a>: the strategy for how individual files are watched. This can be set to</p><ul><li><code>fixedPollingInterval</code>: Check every file for changes several times a second at a fixed interval.</li><li><code>priorityPollingInterval</code>: Check every file for changes several times a second, but use heuristics to check certain types of files less frequently than others.</li><li><code>dynamicPriorityPolling</code>: Use a dynamic queue where less-frequently modified files will be checked less often.</li><li><code>useFsEvents</code> (the default): Attempt to use the operating system/file system&#39;s native events for file changes.</li><li><code>useFsEventsOnParentDirectory</code>: Attempt to use the operating system/file system&#39;s native events to listen for changes on a file&#39;s containing directories. This can use fewer file watchers, but might be less accurate.</li></ul></li><li><p><a href="/tsdoc-vitepress/tsconfig#watchDirectory"><code>watchDirectory</code></a>: the strategy for how entire directory trees are watched under systems that lack recursive file-watching functionality. This can be set to:</p><ul><li><code>fixedPollingInterval</code>: Check every directory for changes several times a second at a fixed interval.</li><li><code>dynamicPriorityPolling</code>: Use a dynamic queue where less-frequently modified directories will be checked less often.</li><li><code>useFsEvents</code> (the default): Attempt to use the operating system/file system&#39;s native events for directory changes.</li></ul></li><li><p><a href="/tsdoc-vitepress/tsconfig#fallbackPolling"><code>fallbackPolling</code></a>: when using file system events, this option specifies the polling strategy that gets used when the system runs out of native file watchers and/or doesn&#39;t support native file watchers. This can be set to</p><ul><li><code>fixedPollingInterval</code>: <em>(See above.)</em></li><li><code>priorityPollingInterval</code>: <em>(See above.)</em></li><li><code>dynamicPriorityPolling</code>: <em>(See above.)</em></li><li><code>synchronousWatchDirectory</code>: Disable deferred watching on directories. Deferred watching is useful when lots of file changes might occur at once (e.g. a change in <code>node_modules</code> from running <code>npm install</code>), but you might want to disable it with this flag for some less-common setups.</li></ul></li></ul><p>For more information on these changes, <a href="https://github.com/microsoft/TypeScript/pull/35615" target="_blank" rel="noreferrer">head over to GitHub to see the pull request</a> to read more.</p><h2 id="fast-and-loose-incremental-checking" tabindex="-1">&quot;Fast and Loose&quot; Incremental Checking <a class="header-anchor" href="#fast-and-loose-incremental-checking" aria-label="Permalink to &quot;&quot;Fast and Loose&quot; Incremental Checking&quot;">â€‹</a></h2><p>TypeScript 3.8 introduces a new compiler option called <a href="/tsdoc-vitepress/tsconfig#assumeChangesOnlyAffectDirectDependencies"><code>assumeChangesOnlyAffectDirectDependencies</code></a>. When this option is enabled, TypeScript will avoid rechecking/rebuilding all truly possibly-affected files, and only recheck/rebuild files that have changed as well as files that directly import them.</p><p>For example, consider a file <code>fileD.ts</code> that imports <code>fileC.ts</code> that imports <code>fileB.ts</code> that imports <code>fileA.ts</code> as follows:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">fileA.ts &lt;- fileB.ts &lt;- fileC.ts &lt;- fileD.ts</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">fileA.ts &lt;- fileB.ts &lt;- fileC.ts &lt;- fileD.ts</span></span></code></pre></div><p>In <code>--watch</code> mode, a change in <code>fileA.ts</code> would typically mean that TypeScript would need to at least re-check <code>fileB.ts</code>, <code>fileC.ts</code>, and <code>fileD.ts</code>. Under <a href="/tsdoc-vitepress/tsconfig#assumeChangesOnlyAffectDirectDependencies"><code>assumeChangesOnlyAffectDirectDependencies</code></a>, a change in <code>fileA.ts</code> means that only <code>fileA.ts</code> and <code>fileB.ts</code> need to be re-checked.</p><p>In a codebase like Visual Studio Code, this reduced rebuild times for changes in certain files from about 14 seconds to about 1 second. While we don&#39;t necessarily recommend this option for all codebases, you might be interested if you have an extremely large codebase and are willing to defer full project errors until later (e.g. a dedicated build via a <code>tsconfig.fullbuild.json</code> or in CI).</p><p>For more details, you can <a href="https://github.com/microsoft/TypeScript/pull/35711" target="_blank" rel="noreferrer">see the original pull request</a>.</p>`,80),p=[e];function t(c,r,i,y,F,d){return n(),a("div",null,p)}const h=s(o,[["render",t]]);export{E as __pageData,h as default};
