import{_ as s,o as e,c as o,V as n}from"./chunks/framework.ced88878.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{"display":"Base URL","oneline":"Specify the base directory to resolve non-relative module names."},"headers":[],"relativePath":"zh/tsconfig-reference/options/baseUrl.md","lastUpdated":1681915487000}'),a={name:"zh/tsconfig-reference/options/baseUrl.md"},l=n(`<p>Sets a base directory from which to resolve non-relative module names. For example, in the directory structure:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">project</span></span>
<span class="line"><span style="color:#f6f6f4;">├── ex.ts</span></span>
<span class="line"><span style="color:#f6f6f4;">├── hello</span></span>
<span class="line"><span style="color:#f6f6f4;">│   └── world.ts</span></span>
<span class="line"><span style="color:#f6f6f4;">└── tsconfig.json</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">project</span></span>
<span class="line"><span style="color:#24292e;">├── ex.ts</span></span>
<span class="line"><span style="color:#24292e;">├── hello</span></span>
<span class="line"><span style="color:#24292e;">│   └── world.ts</span></span>
<span class="line"><span style="color:#24292e;">└── tsconfig.json</span></span></code></pre></div><p>With <code>&quot;baseUrl&quot;: &quot;./&quot;</code>, TypeScript will look for files starting at the same folder as the <code>tsconfig.json</code>:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { helloWorld } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hello/world</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(helloWorld);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { helloWorld } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello/world&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(helloWorld);</span></span></code></pre></div><p>This resolution has higher priority than lookups from <code>node_modules</code>.</p><p>This feature was designed for use in conjunction with AMD module loaders in the browser, and is not recommended in any other context. As of TypeScript 4.1, <code>baseUrl</code> is no longer required to be set when using <a href="#paths"><code>paths</code></a>.</p>`,6),p=[l];function t(c,r,i,d,h,f){return e(),o("div",null,p)}const _=s(a,[["render",t]]);export{u as __pageData,_ as default};
