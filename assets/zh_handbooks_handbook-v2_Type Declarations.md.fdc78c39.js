import{_ as s,o as a,c as e,V as o}from"./chunks/framework.ced88878.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"zh/handbooks/handbook-v2/Type Declarations.md","lastUpdated":1682921420000}'),p={name:"zh/handbooks/handbook-v2/Type Declarations.md"},n=o('<p>在你目前阅读的所有部分中，我们一直在使用所有 JavaScript 运行时中存在的内置函数来演示基本的 TypeScript 概念。 然而，如今几乎所有 JavaScript 都包含许多库来完成常见任务。 为你的应用程序中_不是_你的代码的部分设置类型将极大地改善你的 TypeScript 体验。 这些类型从何而来？</p><h2 id="什么是类型声明" tabindex="-1">什么是类型声明？ <a class="header-anchor" href="#什么是类型声明" aria-label="Permalink to &quot;什么是类型声明？&quot;">​</a></h2><p>假设你写了一些这样的代码：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// @errors: 2339</span></span>\n<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> k </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Math.</span><span style="color:#62E884;">max</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">6</span><span style="color:#F6F6F4;">);</span></span>\n<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> j </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Math.</span><span style="color:#62E884;">mix</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">7</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">8</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// @errors: 2339</span></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">k</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">);</span></span>\n<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">j</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">mix</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">7</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">8</span><span style="color:#24292E;">);</span></span></code></pre></div><p>即使 <code>Math</code> 的实现不是您的代码的一部分，TypeScript 是如何知道存在 <code>max</code> 而不是 <code>mix</code> 的？</p><p>答案是有描述这些内置对象的 <em>声明文件</em>。 声明文件提供了一种方法来 <em>声明</em> 某些类型或值的存在，而无需实际提供这些值的实现。</p><h2 id="d-ts-声明文件" tabindex="-1"><code>.d.ts</code> 声明文件 <a class="header-anchor" href="#d-ts-声明文件" aria-label="Permalink to &quot;`.d.ts` 声明文件&quot;">​</a></h2><p>TypeScript 有两种主要的文件。 <code>.ts</code> 文件是包含类型和可执行代码的 <em>实现</em> 文件。 这些是产生 <code>.js</code> 输出的文件，也是您通常编写代码的地方。</p><p><code>.d.ts</code> 文件只包含类型信息的 <strong>声明</strong> 文件。 这些文件不会产生 .js 输出； 它们仅用于类型检查。 稍后我们将详细了解如何编写自己的声明文件。</p><h2 id="内置类型定义" tabindex="-1">内置类型定义 <a class="header-anchor" href="#内置类型定义" aria-label="Permalink to &quot;内置类型定义&quot;">​</a></h2><p>TypeScript 包含 JavaScript 运行时中可用的所有标准化内置 API 的声明文件。 这包括诸如<code>string</code>或<code>function</code>等内置类型的方法和属性、<code>Math</code>和<code>Object</code>等顶级名称及其相关类型。 默认情况下，TypeScript 还包括在浏览器中运行时可用的类型，例如<code>window</code>和<code>document</code>； 这些统称为 DOM API。</p><p>TypeScript 使用 <code>lib.[something].d.ts</code> 模式命名这些声明文件。 如果您导航到具有该名称的文件，您可以知道您正在处理平台的某些内置部分，而不是用户代码。</p><h3 id="target设置" tabindex="-1"><code>target</code>设置 <a class="header-anchor" href="#target设置" aria-label="Permalink to &quot;`target`设置&quot;">​</a></h3><p>您可以使用的方法、属性和函数实际上根据运行代码的 JavaScript 的 <em>版本</em> 而有所不同。 例如，字符串的 startsWith 方法仅适用于称为 <em>ECMAScript 6</em> 的 JavaScript 版本。</p><p>了解您的代码最终运行的 JavaScript 版本很重要，因为您不想使用来自比您部署到的平台更新版本的 API。 有关详细信息，请参阅 tsconfig 文档页面。</p><p>TypeScript 通过根据您的 <code>target</code> 设置改变默认包含哪些 <code>lib</code> 文件来帮助解决这个问题。 例如，如果 <code>target</code> 是 ES5，您在尝试使用 <code>startsWith</code> 方法时会看到错误，因为该方法仅在 ES6 或更高版本中可用。</p><h3 id="lib-设置" tabindex="-1"><code>lib</code> 设置 <a class="header-anchor" href="#lib-设置" aria-label="Permalink to &quot;`lib` 设置&quot;">​</a></h3><p><code>lib</code> 设置允许更细粒度地控制哪些内置声明文件被认为在您的程序中可用。 有关详细信息，请参阅 tsconfig 文档页面。</p><h2 id="额外声明" tabindex="-1">额外声明 <a class="header-anchor" href="#额外声明" aria-label="Permalink to &quot;额外声明&quot;">​</a></h2><p>对于非内置 API，您可以通过多种方式获取声明文件。 你如何做到这一点取决于你为哪个库获取类型。</p><h3 id="捆绑类型" tabindex="-1">捆绑类型 <a class="header-anchor" href="#捆绑类型" aria-label="Permalink to &quot;捆绑类型&quot;">​</a></h3><p>如果您使用的库作为 npm 包发布，它可能已经包含类型声明文件作为其分发的一部分。 您可以阅读项目的文档来找出答案，或者只是尝试导入包并查看 TypeScript 是否能够自动为您解析类型。</p><p>如果您是考虑将类型定义与您的包捆绑在一起的包作者，您可以阅读我们关于 捆绑类型定义 。</p><h3 id="确定类型-types" tabindex="-1">确定类型 / <code>@types</code> <a class="header-anchor" href="#确定类型-types" aria-label="Permalink to &quot;确定类型 / `@types`&quot;">​</a></h3><p><a href="https://github.com/DefinitelyTyped/DefinitelyTyped/" target="_blank" rel="noreferrer">DefinitelyTyped 存储库</a> 是一个集中式存储库，用于存储数千个库的声明文件。 绝大多数常用库在 DefinitelyTyped 上都有可用的声明文件。</p><p>DefinitelyTyped 上的定义也会自动发布到 <code>@types</code> 范围内的 npm。 类型包的名称始终与底层包本身的名称相同。 例如，如果你安装了 <code>react</code> npm 包，你可以通过运行来安装它对应的类型</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">npm </span><span style="color:#E7EE98;">install</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--save-dev</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">@types/react</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--save-dev</span><span style="color:#24292E;"> </span><span style="color:#032F62;">@types/react</span></span></code></pre></div><p>TypeScript 会自动在 <code>node_modules/@types</code> 下查找类型定义，因此无需其他步骤即可在您的程序中使用这些类型。</p><h3 id="自定义声明文件" tabindex="-1">自定义声明文件 <a class="header-anchor" href="#自定义声明文件" aria-label="Permalink to &quot;自定义声明文件&quot;">​</a></h3><p>在库没有捆绑自己的类型并且没有关于 DefinitelyTyped 的定义的罕见情况下，您可以自己编写一个声明文件。 有关指南，请参阅附录 <strong>声明文件</strong> 编写</p><p>如果您想在不编写声明文件的情况下消除有关特定模块的警告，您还可以通过在项目的 .d.ts 文件中放置一个空声明来快速将该模块声明为类型 any 。 例如，如果你想使用一个名为“some-untyped-module”但没有定义的模块，你可以这样写：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">declare</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">module</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">some-untyped-module</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">declare</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">module</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;some-untyped-module&quot;</span><span style="color:#24292E;">;</span></span></code></pre></div>',32),l=[n];function t(c,r,d,i,y,h){return a(),e("div",null,l)}const E=s(p,[["render",t]]);export{u as __pageData,E as default};
