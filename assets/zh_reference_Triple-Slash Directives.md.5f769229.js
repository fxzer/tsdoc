import{_ as s,o as a,c as o,V as e}from"./chunks/framework.ced88878.js";const E=JSON.parse('{"title":"三斜线指令","description":"","frontmatter":{},"headers":[],"relativePath":"zh/reference/Triple-Slash Directives.md","lastUpdated":1682668835000}'),n={name:"zh/reference/Triple-Slash Directives.md"},l=e(`<h1 id="三斜线指令" tabindex="-1">三斜线指令 <a class="header-anchor" href="#三斜线指令" aria-label="Permalink to &quot;三斜线指令&quot;">​</a></h1><p>三斜线指令是包含单个XML标签的单行注释。 注释的内容会做为编译器指令使用。</p><p>三斜线指令_仅_可放在包含它的文件的最顶端。 一个三斜线指令的前面只能出现单行或多行注释，这包括其它的三斜线指令。 如果它们出现在一个语句或声明之后，那么它们会被当做普通的单行注释，并且不具有特殊的涵义。</p><h2 id="reference-path" tabindex="-1"><code>/// &lt;reference path=&quot;...&quot; /&gt;</code> <a class="header-anchor" href="#reference-path" aria-label="Permalink to &quot;\`/// &lt;reference path=&quot;...&quot; /&gt;\`&quot;">​</a></h2><p><code>/// &lt;reference path=&quot;...&quot; /&gt;</code>指令是三斜线指令中最常见的一种。 它用于声明文件间的_依赖_。</p><p>三斜线引用告诉编译器在编译过程中要引入的额外的文件。</p><p>当使用<code>--out</code>或<code>--outFile</code>时，它也可以做为调整输出内容顺序的一种方法。 文件在输出文件内容中的位置与经过预处理后的输入顺序一致。</p><h3 id="预处理输入文件" tabindex="-1">预处理输入文件 <a class="header-anchor" href="#预处理输入文件" aria-label="Permalink to &quot;预处理输入文件&quot;">​</a></h3><p>编译器会对输入文件进行预处理来解析所有三斜线引用指令。 在这个过程中，额外的文件会加到编译过程中。</p><p>这个过程会以一些_根文件_开始； 它们是在命令行中指定的文件或是在<code>tsconfig.json</code>中的<code>&quot;files&quot;</code>列表里的文件。 这些根文件按指定的顺序进行预处理。 在一个文件被加入列表前，它包含的所有三斜线引用都要被处理，还有它们包含的目标。 三斜线引用以它们在文件里出现的顺序，使用深度优先的方式解析。</p><p>一个三斜线引用路径是相对于包含它的文件的，如果不是根文件。</p><h3 id="错误" tabindex="-1">错误 <a class="header-anchor" href="#错误" aria-label="Permalink to &quot;错误&quot;">​</a></h3><p>引用不存在的文件会报错。 一个文件用三斜线指令引用自己会报错。</p><h3 id="使用-noresolve" tabindex="-1">使用 <code>--noResolve</code> <a class="header-anchor" href="#使用-noresolve" aria-label="Permalink to &quot;使用 \`--noResolve\`&quot;">​</a></h3><p>如果指定了<code>--noResolve</code>编译选项，三斜线引用会被忽略；它们不会增加新文件，也不会改变给定文件的顺序。</p><h2 id="reference-types" tabindex="-1"><code>/// &lt;reference types=&quot;...&quot; /&gt;</code> <a class="header-anchor" href="#reference-types" aria-label="Permalink to &quot;\`/// &lt;reference types=&quot;...&quot; /&gt;\`&quot;">​</a></h2><p>与<code>/// &lt;reference path=&quot;...&quot; /&gt;</code>指令相似（用于声明_依赖_），<code>/// &lt;reference types=&quot;...&quot; /&gt;</code>指令声明了对某个包的依赖。</p><p>对这些包的名字的解析与在<code>import</code>语句里对模块名的解析类似。 可以简单地把三斜线类型引用指令当做<code>import</code>声明的包。</p><p>例如，把<code>/// &lt;reference types=&quot;node&quot; /&gt;</code>引入到声明文件，表明这个文件使用了<code>@types/node/index.d.ts</code>里面声明的名字； 并且，这个包需要在编译阶段与声明文件一起被包含进来。</p><p>仅当在你需要写一个<code>d.ts</code>文件时才使用这个指令。</p><p>对于那些在编译阶段生成的声明文件，编译器会自动地添加<code>/// &lt;reference types=&quot;...&quot; /&gt;</code>； _当且仅当_结果文件中使用了引用的包里的声明时才会在生成的声明文件里添加<code>/// &lt;reference types=&quot;...&quot; /&gt;</code>语句。</p><p>若要在<code>.ts</code>文件里声明一个对<code>@types</code>包的依赖，使用<code>--types</code>命令行选项或在<code>tsconfig.json</code>里指定。 查看<a href="./../project-config/tsconfig.json#types-typeroots-and-types">在<code>tsconfig.json</code>里使用<code>@types</code>，<code>typeRoots</code>和<code>types</code></a>了解详情。</p><h2 id="reference-no-default-lib-true" tabindex="-1"><code>/// &lt;reference no-default-lib=&quot;true&quot;/&gt;</code> <a class="header-anchor" href="#reference-no-default-lib-true" aria-label="Permalink to &quot;\`/// &lt;reference no-default-lib=&quot;true&quot;/&gt;\`&quot;">​</a></h2><p>这个指令把一个文件标记成_默认库_。 你会在<code>lib.d.ts</code>文件和它不同的变体的顶端看到这个注释。</p><p>这个指令告诉编译器在编译过程中_不要_包含这个默认库（比如，<code>lib.d.ts</code>）。 这与在命令行上使用<code>--noLib</code>相似。</p><p>还要注意，当传递了<code>--skipDefaultLibCheck</code>时，编译器只会忽略检查带有<code>/// &lt;reference no-default-lib=&quot;true&quot;/&gt;</code>的文件。</p><h2 id="amd-module" tabindex="-1"><code>/// &lt;amd-module /&gt;</code> <a class="header-anchor" href="#amd-module" aria-label="Permalink to &quot;\`/// &lt;amd-module /&gt;\`&quot;">​</a></h2><p>默认情况下生成的AMD模块都是匿名的。 但是，当一些工具需要处理生成的模块时会产生问题，比如<code>r.js</code>。</p><p><code>amd-module</code>指令允许给编译器传入一个可选的模块名：</p><h4 id="amdmodule-ts" tabindex="-1">amdModule.ts <a class="header-anchor" href="#amdmodule-ts" aria-label="Permalink to &quot;amdModule.ts&quot;">​</a></h4><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">///&lt;</span><span style="color:#F286C4;">amd-module</span><span style="color:#7B7F8B;"> </span><span style="color:#62E884;font-style:italic;">name</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">NamedModule</span><span style="color:#DEE492;">&#39;</span><span style="color:#7B7F8B;">/&gt;</span></span>
<span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">C</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">///&lt;</span><span style="color:#22863A;">amd-module</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;NamedModule&#39;</span><span style="color:#6A737D;">/&gt;</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">C</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这会将<code>NamedModule</code>传入到AMD <code>define</code>函数里：</p><h4 id="amdmodule-js" tabindex="-1">amdModule.js <a class="header-anchor" href="#amdmodule-js" aria-label="Permalink to &quot;amdModule.js&quot;">​</a></h4><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">define</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">NamedModule</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, [</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">require</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">exports</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">], </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">require</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">exports</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> C </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> () {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">C</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> C;</span></span>
<span class="line"><span style="color:#F6F6F4;">    })();</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">exports</span><span style="color:#F6F6F4;">.</span><span style="color:#BF9EEE;">C</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> C;</span></span>
<span class="line"><span style="color:#F6F6F4;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">define</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;NamedModule&quot;</span><span style="color:#24292E;">, [</span><span style="color:#032F62;">&quot;require&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;exports&quot;</span><span style="color:#24292E;">], </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">require</span><span style="color:#24292E;">, </span><span style="color:#E36209;">exports</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">C</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">C</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">C</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    })();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">exports</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">C</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">C</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><h2 id="amd-dependency" tabindex="-1"><code>/// &lt;amd-dependency /&gt;</code> <a class="header-anchor" href="#amd-dependency" aria-label="Permalink to &quot;\`/// &lt;amd-dependency /&gt;\`&quot;">​</a></h2><blockquote><p><strong>注意</strong>：这个指令被废弃了。使用<code>import &quot;moduleName&quot;;</code>语句代替。</p></blockquote><p><code>/// &lt;amd-dependency path=&quot;x&quot; /&gt;</code>告诉编译器有一个非TypeScript模块依赖需要被注入，做为目标模块<code>require</code>调用的一部分。</p><p><code>amd-dependency</code>指令也可以带一个可选的<code>name</code>属性；它允许我们为amd-dependency传入一个可选名字：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/// &lt;</span><span style="color:#F286C4;">amd-dependency</span><span style="color:#7B7F8B;"> </span><span style="color:#62E884;font-style:italic;">path</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">legacy/moduleA</span><span style="color:#DEE492;">&quot;</span><span style="color:#7B7F8B;"> </span><span style="color:#62E884;font-style:italic;">name</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">moduleA</span><span style="color:#DEE492;">&quot;</span><span style="color:#7B7F8B;">/&gt;</span></span>
<span class="line"><span style="color:#F286C4;">declare</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> moduleA</span><span style="color:#F286C4;">:</span><span style="color:#97E1F1;font-style:italic;">MyType</span></span>
<span class="line"><span style="color:#F6F6F4;">moduleA.</span><span style="color:#62E884;">callStuff</span><span style="color:#F6F6F4;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/// &lt;</span><span style="color:#22863A;">amd-dependency</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">path</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;legacy/moduleA&quot;</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;moduleA&quot;</span><span style="color:#6A737D;">/&gt;</span></span>
<span class="line"><span style="color:#D73A49;">declare</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> moduleA</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;">MyType</span></span>
<span class="line"><span style="color:#24292E;">moduleA.</span><span style="color:#6F42C1;">callStuff</span><span style="color:#24292E;">()</span></span></code></pre></div><p>生成的JavaScript代码：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">define</span><span style="color:#F6F6F4;">([</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">require</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">exports</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">legacy/moduleA</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">], </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">require</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">exports</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">moduleA</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    moduleA.</span><span style="color:#62E884;">callStuff</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">define</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&quot;require&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;exports&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;legacy/moduleA&quot;</span><span style="color:#24292E;">], </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">require</span><span style="color:#24292E;">, </span><span style="color:#E36209;">exports</span><span style="color:#24292E;">, </span><span style="color:#E36209;">moduleA</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    moduleA.</span><span style="color:#6F42C1;">callStuff</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div>`,41),p=[l];function t(c,r,d,y,i,F){return a(),o("div",null,p)}const q=s(n,[["render",t]]);export{E as __pageData,q as default};
