import{_ as e,o as t,c as s,V as o}from"./chunks/framework.ced88878.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{"display":"Preserve Symlinks","oneline":"Disable resolving symlinks to their realpath. This correlates to the same flag in node."},"headers":[],"relativePath":"zh/tsconfig-reference/options/preserveSymlinks.md","lastUpdated":1681915487000}'),r={name:"zh/tsconfig-reference/options/preserveSymlinks.md"},i=o("<p>This is to reflect the same flag in Node.js; which does not resolve the real path of symlinks.</p><p>This flag also exhibits the opposite behavior to Webpack’s <code>resolve.symlinks</code> option (i.e. setting TypeScript’s <code>preserveSymlinks</code> to true parallels setting Webpack’s <code>resolve.symlinks</code> to false, and vice-versa).</p><p>With this enabled, references to modules and packages (e.g. <code>import</code>s and <code>/// &lt;reference type=&quot;...&quot; /&gt;</code> directives) are all resolved relative to the location of the symbolic link file, rather than relative to the path that the symbolic link resolves to.</p>",3),a=[i];function n(l,c,p,d,h,_){return t(),s("div",null,a)}const v=e(r,[["render",n]]);export{f as __pageData,v as default};
