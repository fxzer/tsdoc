import{_ as s,o as a,c as n,V as l}from"./chunks/framework.ced88878.js";const u=JSON.parse('{"title":"代码库结构","description":"","frontmatter":{},"headers":[],"relativePath":"zh/declaration-files/Library Structures.md","lastUpdated":1682672879000}'),o={name:"zh/declaration-files/Library Structures.md"},p=l(`<h1 id="代码库结构" tabindex="-1">代码库结构 <a class="header-anchor" href="#代码库结构" aria-label="Permalink to &quot;代码库结构&quot;">​</a></h1><p>一般来讲，<em>组织</em>声明文件的方式取决于代码库是如何被使用的。 在 JavaScript 中一个代码库有很多使用方式，这就需要你书写声明文件去匹配它们。 这篇指南涵盖了如何识别常见代码库的模式，以及怎样书写符合相应模式的声明文件。</p><p>针对代码库的每种主要的组织模式，在<a href="./templates">模版</a>一节都有对应的文件。 你可以利用它们帮助你快速上手。</p><h2 id="识别代码库的类型" tabindex="-1">识别代码库的类型 <a class="header-anchor" href="#识别代码库的类型" aria-label="Permalink to &quot;识别代码库的类型&quot;">​</a></h2><p>首先，我们先看一下 TypeScript 声明文件能够表示的库的类型。 这里会简单展示每种类型的代码库的使用方式，以及如何去书写，还有一些真实案例。</p><p>识别代码库的类型是书写声明文件的第一步。 我们将会给出一些提示，关于怎样通过代码库的<em>使用方法</em>及其<em>源码</em>来识别库的类型。 根据库的文档及组织结构的不同，在这两种方式中可能一个会比另外的一个简单一些。 我们推荐你使用任意你喜欢的方式。</p><h2 id="你应该寻找什么" tabindex="-1">你应该寻找什么？ <a class="header-anchor" href="#你应该寻找什么" aria-label="Permalink to &quot;你应该寻找什么？&quot;">​</a></h2><p>在为代码库编写声明文件时，你需要问自己以下几个问题。</p><ol><li><p>如何获取代码库？</p><p>比如，是否只能够从 npm 或 CDN 获取。</p></li><li><p>如何导入代码库？</p><p>它是否添加了某个全局对象？它是否使用了<code>require</code>或<code>import</code>/<code>export</code>语句？</p></li></ol><h2 id="针对不同类型的代码库的示例" tabindex="-1">针对不同类型的代码库的示例 <a class="header-anchor" href="#针对不同类型的代码库的示例" aria-label="Permalink to &quot;针对不同类型的代码库的示例&quot;">​</a></h2><h3 id="模块化代码库" tabindex="-1">模块化代码库 <a class="header-anchor" href="#模块化代码库" aria-label="Permalink to &quot;模块化代码库&quot;">​</a></h3><p>几乎所有的 Node.js 代码库都属于这一类。 这类代码库只能工作在有模块加载器的环境下。 比如，<code>express</code>只能在 Node.js 里工作，所以必须使用 CommonJS 的<code>require</code>函数加载。</p><p>ECMAScript 2015（也就是 ES2015，ECMAScript 6 或 ES6），CommonJS 和 RequireJS 具有相似的<em>导入</em>一个<em>模块</em>的写法。 例如，对于 JavaScript CommonJS （Node.js），写法如下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> fs </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">require</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">fs</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> fs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;fs&#39;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>对于 TypeScript 或 ES6，<code>import</code>关键字也具有相同的作用：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">as</span><span style="color:#F6F6F4;"> fs </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">fs</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> fs </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;fs&#39;</span><span style="color:#24292E;">;</span></span></code></pre></div><p>你通常会在模块化代码库的文档里看到如下说明：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> someLib </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">require</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">someLib</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> someLib </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;someLib&#39;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>或</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">define</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">...</span><span style="color:#F6F6F4;">, [</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">someLib</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">], </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">someLib</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">define</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">, [</span><span style="color:#032F62;">&#39;someLib&#39;</span><span style="color:#24292E;">], </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">someLib</span><span style="color:#24292E;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>与全局模块一样，你也可能会在 <a href="#umd">UMD</a> 模块的文档里看到这些例子，因此要仔细查看源码和文档。</p><h4 id="从代码上识别模块化代码库" tabindex="-1">从代码上识别模块化代码库 <a class="header-anchor" href="#从代码上识别模块化代码库" aria-label="Permalink to &quot;从代码上识别模块化代码库&quot;">​</a></h4><p>模块化代码库至少会包含以下代表性条目之一：</p><ul><li>无条件的调用<code>require</code>或<code>define</code></li><li>像<code>import * as a from &#39;b&#39;;</code>或<code>export c;</code>这样的声明</li><li>赋值给<code>exports</code>或<code>module.exports</code></li></ul><p>它们极少包含：</p><ul><li>对<code>window</code>或<code>global</code>的赋值</li></ul><h4 id="模块化代码库的模版" tabindex="-1">模块化代码库的模版 <a class="header-anchor" href="#模块化代码库的模版" aria-label="Permalink to &quot;模块化代码库的模版&quot;">​</a></h4><p>有以下四个模版可用：</p><ul><li><a href="./templates/module.d.ts"><code>module.d.ts</code></a></li><li><a href="./templates/module-class.d.ts"><code>module-class.d.ts</code></a></li><li><a href="./templates/module-function.d.ts"><code>module-function.d.ts</code></a></li><li><a href="./templates/module-plugin.d.ts"><code>module-plugin.d.ts</code></a></li></ul><p>你应该先阅读<a href="./templates/module.d.ts"><code>module.d.ts</code></a>以便从整体上了解它们的工作方式。</p><p>然后，若一个模块可以当作函数调用，则使用<a href="./templates/module-function.d.ts"><code>module-function.d.ts</code></a>。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">require</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">foo</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#7B7F8B;">// Note: calling &#39;x&#39; as a function</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> y </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">x</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">42</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">x</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// Note: calling &#39;x&#39; as a function</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">y</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">x</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">42</span><span style="color:#24292E;">);</span></span></code></pre></div><p>如果一个模块可以使用<code>new</code>来构造，则使用<a href="./templates/module-class.d.ts"><code>module-class.d.ts</code></a>。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">require</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">bar</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#7B7F8B;">// Note: using &#39;new&#39; operator on the imported variable</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> y </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">x</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">hello</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;bar&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// Note: using &#39;new&#39; operator on the imported variable</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> y </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">x</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>如果一个模块在导入后会更改其它的模块，则使用<a href="./templates/module-plugin.d.ts"><code>module-plugin.d.ts</code></a>。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> jest </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">require</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">jest</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#62E884;">require</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">jest-matchers-files</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">jest</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;jest&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;jest-matchers-files&#39;</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="全局代码库" tabindex="-1">全局代码库 <a class="header-anchor" href="#全局代码库" aria-label="Permalink to &quot;全局代码库&quot;">​</a></h3><p>全局代码库可以通过全局作用域来访问（例如，不使用任何形式的<code>import</code>语句）。 许多代码库只是简单地导出一个或多个供使用的全局变量。 比如，如果你使用<a href="https://jquery.com/" target="_blank" rel="noreferrer">jQuery</a>，那么可以使用<code>$</code>变量来引用它。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">$</span><span style="color:#F6F6F4;">(() </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">hello!</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;hello!&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>你通常能够在文档里看到如何在 HTML 的 script 标签里引用代码库：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">script</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">src</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">http://a.great.cdn.for/someLib.js</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;&lt;/</span><span style="color:#F286C4;">script</span><span style="color:#F6F6F4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;http://a.great.cdn.for/someLib.js&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>目前，大多数流行的全局代码库都以 UMD 代码库发布。 UMD 代码库与全局代码库很难通过文档来识别。 在编写全局代码库的声明文件之前，确保代码库不是 UMD 代码库。</p><h4 id="从代码来识别全局代码库" tabindex="-1">从代码来识别全局代码库 <a class="header-anchor" href="#从代码来识别全局代码库" aria-label="Permalink to &quot;从代码来识别全局代码库&quot;">​</a></h4><p>通常，全局代码库的代码十分简单。 一个全局的“Hello, world”代码库可以如下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">createGreeting</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">s</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Hello, </span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> s;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createGreeting</span><span style="color:#24292E;">(</span><span style="color:#E36209;">s</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Hello, &#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> s;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>或者这样：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">window.</span><span style="color:#62E884;">createGreeting</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">s</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Hello, </span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> s;</span></span>
<span class="line"><span style="color:#F6F6F4;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">window.</span><span style="color:#6F42C1;">createGreeting</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">s</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Hello, &#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> s;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>在阅读全局代码库的代码时，你会看到：</p><ul><li>顶层的<code>var</code>语句或<code>function</code>声明</li><li>一个或多个<code>window.someName</code>赋值语句</li><li>假设 DOM 相关的原始值<code>document</code>或<code>window</code>存在</li></ul><p>你不会看到：</p><ul><li>检查或使用了模块加载器，如<code>require</code>或<code>define</code></li><li>CommonJS/Node.js 风格的导入语句，如<code>var fs = require(&quot;fs&quot;);</code></li><li><code>define(...)</code>调用</li><li>描述<code>require</code>或导入代码库的文档</li></ul><h4 id="全局代码库的示例" tabindex="-1">全局代码库的示例 <a class="header-anchor" href="#全局代码库的示例" aria-label="Permalink to &quot;全局代码库的示例&quot;">​</a></h4><p>由于将全局代码库转换为 UMD 代码库十分容易，因此很少有代码库仍然使用全局代码库风格。 然而，小型的代码库以及需要使用 DOM 的代码库仍然可以是全局的。</p><h4 id="全局代码库的模版" tabindex="-1">全局代码库的模版 <a class="header-anchor" href="#全局代码库的模版" aria-label="Permalink to &quot;全局代码库的模版&quot;">​</a></h4><p>模版文件<a href="./../doc/handbook/declaration files/templates/global.d.ts"><code>global.d.ts</code></a>定义了<code>myLib</code>示例代码库。 请务必阅读<a href="#es6-对模块调用签名的影响">脚注：&quot;防止命名冲突&quot;</a>。</p><h3 id="umd" tabindex="-1">UMD <a class="header-anchor" href="#umd" aria-label="Permalink to &quot;UMD&quot;">​</a></h3><p>一个 UMD 模块既可以用作 ES 模块（使用导入语句），也可以用作全局变量（在缺少模块加载器的环境中使用）。 许多流行的代码库，如<a href="http://momentjs.com/" target="_blank" rel="noreferrer">Moment.js</a>，都是使用这模式发布的。 例如，在 Node.js 中或使用了 RequireJS 时，你可以这样使用：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> moment </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">require</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">moment</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(moment.</span><span style="color:#62E884;">format</span><span style="color:#F6F6F4;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> moment </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;moment&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(moment.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">());</span></span></code></pre></div><p>在纯浏览器环境中，你可以这样使用：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(moment.</span><span style="color:#62E884;">format</span><span style="color:#F6F6F4;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(moment.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">());</span></span></code></pre></div><h3 id="识别-umd-代码库" tabindex="-1">识别 UMD 代码库 <a class="header-anchor" href="#识别-umd-代码库" aria-label="Permalink to &quot;识别 UMD 代码库&quot;">​</a></h3><p><a href="https://github.com/umdjs/umd" target="_blank" rel="noreferrer">UMD 模块</a>会检查运行环境中是否存在模块加载器。 这是一种常见模式，示例如下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">root</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">factory</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">typeof</span><span style="color:#F6F6F4;"> define </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">function</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> define.amd) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">define</span><span style="color:#F6F6F4;">([</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">libName</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">], factory);</span></span>
<span class="line"><span style="color:#F6F6F4;">    } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">typeof</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">module</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">object</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">module</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">exports</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">module</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">exports</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">factory</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">require</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">libName</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"><span style="color:#F6F6F4;">    } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        root.returnExports </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">factory</span><span style="color:#F6F6F4;">(root.libName);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">, </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">b</span><span style="color:#F6F6F4;">) {</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">root</span><span style="color:#24292E;">, </span><span style="color:#E36209;">factory</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> define </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;function&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> define.amd) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">define</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&quot;libName&quot;</span><span style="color:#24292E;">], factory);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">module</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;object&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">factory</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;libName&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        root.returnExports </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">factory</span><span style="color:#24292E;">(root.libName);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">b</span><span style="color:#24292E;">) {</span></span></code></pre></div><p>如果你看到代码库中存在类如<code>typeof define</code>，<code>typeof window</code>或<code>typeof module</code>的检测代码，尤其是在文件的顶端，那么它大概率是 UMD 代码库。</p><p>在 UMD 模块的文档中经常会提供在 Node.js 中结合<code>require</code>使用的示例，以及在浏览器中结合<code>&lt;script&gt;</code>标签使用的示例。</p><h3 id="umd-代码库的示例" tabindex="-1">UMD 代码库的示例 <a class="header-anchor" href="#umd-代码库的示例" aria-label="Permalink to &quot;UMD 代码库的示例&quot;">​</a></h3><p>大多数流行的代码库均提供了 UMD 格式的包。 例如，<a href="https://jquery.com/" target="_blank" rel="noreferrer">jQuery</a>，<a href="http://momentjs.com/" target="_blank" rel="noreferrer">Moment.js</a>和<a href="https://lodash.com/" target="_blank" rel="noreferrer">lodash</a>等。</p><h4 id="模版" tabindex="-1">模版 <a class="header-anchor" href="#模版" aria-label="Permalink to &quot;模版&quot;">​</a></h4><p>使用<a href="./templates/module-plugin.d.ts"><code>module-plugin.d.ts</code></a>模版。</p><h3 id="全局插件" tabindex="-1">全局插件 <a class="header-anchor" href="#全局插件" aria-label="Permalink to &quot;全局插件&quot;">​</a></h3><p>一个<em>全局插件</em>是全局代码，它们会改变全局对象的结构。 对于<em>全局修改的模块</em>，在运行时存在冲突的可能。</p><p>比如，一些库往<code>Array.prototype</code>或<code>String.prototype</code>里添加新的方法。</p><h4 id="识别全局插件" tabindex="-1">识别全局插件 <a class="header-anchor" href="#识别全局插件" aria-label="Permalink to &quot;识别全局插件&quot;">​</a></h4><p>全局通常很容易地从它们的文档识别出来。</p><p>你会看到像下面这样的例子：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">hello, world</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#7B7F8B;">// Creates new methods on built-in types</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(x.</span><span style="color:#62E884;">startsWithHello</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> y </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#7B7F8B;">// Creates new methods on built-in types</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(y.</span><span style="color:#62E884;">reverseAndSort</span><span style="color:#F6F6F4;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;hello, world&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// Creates new methods on built-in types</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(x.</span><span style="color:#6F42C1;">startsWithHello</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> y </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#6A737D;">// Creates new methods on built-in types</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(y.</span><span style="color:#6F42C1;">reverseAndSort</span><span style="color:#24292E;">());</span></span></code></pre></div><h4 id="模版-1" tabindex="-1">模版 <a class="header-anchor" href="#模版-1" aria-label="Permalink to &quot;模版&quot;">​</a></h4><p>使用<a href="./../doc/handbook/declaration files/templates/global-plugin.d.ts"><code>global-plugin.d.ts</code></a>模版。</p><h3 id="全局修改的模块" tabindex="-1">全局修改的模块 <a class="header-anchor" href="#全局修改的模块" aria-label="Permalink to &quot;全局修改的模块&quot;">​</a></h3><p>当一个<em>全局修改的模块</em>被导入的时候，它们会改变全局作用域里的值。 比如，存在一些库它们添加新的成员到<code>String.prototype</code>当导入它们的时候。 这种模式很危险，因为可能造成运行时的冲突， 但是我们仍然可以为它们书写声明文件。</p><h4 id="识别全局修改的模块" tabindex="-1">识别全局修改的模块 <a class="header-anchor" href="#识别全局修改的模块" aria-label="Permalink to &quot;识别全局修改的模块&quot;">​</a></h4><p>全局修改的模块通常可以很容易地从它们的文档识别出来。 通常来讲，它们与全局插件相似，但是需要<code>require</code>调用来激活它们的效果。</p><p>你可能会看到像下面这样的文档:</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// &#39;require&#39; call that doesn&#39;t use its return value</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> unused </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">require</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">magic-string-time</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#7B7F8B;">/* or */</span></span>
<span class="line"><span style="color:#62E884;">require</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">magic-string-time</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">hello, world</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#7B7F8B;">// Creates new methods on built-in types</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(x.</span><span style="color:#62E884;">startsWithHello</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> y </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#7B7F8B;">// Creates new methods on built-in types</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(y.</span><span style="color:#62E884;">reverseAndSort</span><span style="color:#F6F6F4;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// &#39;require&#39; call that doesn&#39;t use its return value</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> unused </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;magic-string-time&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">/* or */</span></span>
<span class="line"><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;magic-string-time&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;hello, world&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// Creates new methods on built-in types</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(x.</span><span style="color:#6F42C1;">startsWithHello</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> y </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#6A737D;">// Creates new methods on built-in types</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(y.</span><span style="color:#6F42C1;">reverseAndSort</span><span style="color:#24292E;">());</span></span></code></pre></div><h4 id="模版-2" tabindex="-1">模版 <a class="header-anchor" href="#模版-2" aria-label="Permalink to &quot;模版&quot;">​</a></h4><p>使用<a href="./../doc/handbook/declaration files/templates/global-modifying-module.d.ts"><code>global-modifying-module.d.ts</code></a>模版。</p><h2 id="利用依赖" tabindex="-1">利用依赖 <a class="header-anchor" href="#利用依赖" aria-label="Permalink to &quot;利用依赖&quot;">​</a></h2><p>你的代码库可能会有若干种依赖。 本节会介绍如何在声明文件中导入它们。</p><h3 id="对全局库的依赖" tabindex="-1">对全局库的依赖 <a class="header-anchor" href="#对全局库的依赖" aria-label="Permalink to &quot;对全局库的依赖&quot;">​</a></h3><p>如果你的代码库依赖于某个全局代码库，则使用<code>/// &lt;reference types=&quot;...&quot; /&gt;</code>指令：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/// &lt;</span><span style="color:#F286C4;">reference</span><span style="color:#7B7F8B;"> </span><span style="color:#62E884;font-style:italic;">types</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">someLib</span><span style="color:#DEE492;">&quot;</span><span style="color:#7B7F8B;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getThing</span><span style="color:#F6F6F4;">()</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">someLib</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">thing</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/// &lt;</span><span style="color:#22863A;">reference</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">types</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;someLib&quot;</span><span style="color:#6A737D;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getThing</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">someLib</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">thing</span><span style="color:#24292E;">;</span></span></code></pre></div><h3 id="对模块的依赖" tabindex="-1">对模块的依赖 <a class="header-anchor" href="#对模块的依赖" aria-label="Permalink to &quot;对模块的依赖&quot;">​</a></h3><p>如果你的代码库依赖于某个模块，则使用<code>import</code>语句：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">as</span><span style="color:#F6F6F4;"> moment </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">moment</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getThing</span><span style="color:#F6F6F4;">()</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">moment</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> moment </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;moment&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getThing</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">moment</span><span style="color:#24292E;">;</span></span></code></pre></div><h3 id="对-umd-模块的依赖" tabindex="-1">对 UMD 模块的依赖 <a class="header-anchor" href="#对-umd-模块的依赖" aria-label="Permalink to &quot;对 UMD 模块的依赖&quot;">​</a></h3><h4 id="全局代码库-1" tabindex="-1">全局代码库 <a class="header-anchor" href="#全局代码库-1" aria-label="Permalink to &quot;全局代码库&quot;">​</a></h4><p>如果你的全局代码库依赖于某个 UMD 模块，则使用<code>/// &lt;reference types</code>指令：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/// &lt;</span><span style="color:#F286C4;">reference</span><span style="color:#7B7F8B;"> </span><span style="color:#62E884;font-style:italic;">types</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">moment</span><span style="color:#DEE492;">&quot;</span><span style="color:#7B7F8B;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getThing</span><span style="color:#F6F6F4;">()</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">moment</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/// &lt;</span><span style="color:#22863A;">reference</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">types</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;moment&quot;</span><span style="color:#6A737D;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getThing</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">moment</span><span style="color:#24292E;">;</span></span></code></pre></div><h4 id="es-模块或-umd-模块代码库" tabindex="-1">ES 模块或 UMD 模块代码库 <a class="header-anchor" href="#es-模块或-umd-模块代码库" aria-label="Permalink to &quot;ES 模块或 UMD 模块代码库&quot;">​</a></h4><p>如果你的模块或 UMD 代码库依赖于某个 UMD 代码库，则使用<code>import</code>语句：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">as</span><span style="color:#F6F6F4;"> someLib </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">someLib</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> someLib </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;someLib&#39;</span><span style="color:#24292E;">;</span></span></code></pre></div><p>不要使用<code>/// &lt;reference</code>指令来声明对 UMD 代码库的依赖。</p><h2 id="脚注" tabindex="-1">脚注 <a class="header-anchor" href="#脚注" aria-label="Permalink to &quot;脚注&quot;">​</a></h2><h3 id="防止命名冲突" tabindex="-1">防止命名冲突 <a class="header-anchor" href="#防止命名冲突" aria-label="Permalink to &quot;防止命名冲突&quot;">​</a></h3><p>注意，虽说可以在全局作用域内定义许多类型。 但我们强烈建议不要这样做，因为当一个工程中存在多个声明文件时，它可能会导致难以解决的命名冲突。</p><p>可以遵循的一个简单规则是使用代码库提供的某个全局变量来声明拥有命名空间的类型。 例如，如果代码库提供了全局变量<code>cats</code>，那么可以这样写：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">declare</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">namespace</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">cats</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">KittySettings</span><span style="color:#F6F6F4;"> {}</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">declare</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">namespace</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cats</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">KittySettings</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>而不是：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// at top-level</span></span>
<span class="line"><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">CatsKittySettings</span><span style="color:#F6F6F4;"> {}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// at top-level</span></span>
<span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CatsKittySettings</span><span style="color:#24292E;"> {}</span></span></code></pre></div><p>这样做会保证代码库可以被转换成 UMD 模块，且不会影响声明文件的使用者。</p><h3 id="es6-对模块插件的影响" tabindex="-1">ES6 对模块插件的影响 <a class="header-anchor" href="#es6-对模块插件的影响" aria-label="Permalink to &quot;ES6 对模块插件的影响&quot;">​</a></h3><p>一些插件会对已有模块的顶层导出进行添加或修改。 这在 CommonJS 以及其它模块加载器里是合法的，但 ES6 模块是不可改变的，因此该模式是不可行的。 因为，TypeScript 是模块加载器无关的，所以在编译时不会对该行为加以限制，但是开发者若想要转换到 ES6 模块加载器则需要注意这一点。</p><h3 id="es6-对模块调用签名的影响" tabindex="-1">ES6 对模块调用签名的影响 <a class="header-anchor" href="#es6-对模块调用签名的影响" aria-label="Permalink to &quot;ES6 对模块调用签名的影响&quot;">​</a></h3><p>许多代码库，如 Express，将自身导出为可调用的函数。 例如，Express 的典型用法如下：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> exp </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">require</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">express</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> app </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">exp</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> exp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;express&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> app </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">exp</span><span style="color:#24292E;">();</span></span></code></pre></div><p>在 ES6 模块加载器中，顶层对象（此例中就<code>exp</code>）只能拥有属性； 顶层的模块对象永远不能够被调用。</p><p>最常见的解决方案是为可调用的/可构造的对象定义一个<code>default</code>导出； 有些模块加载器会自动检测这种情况并且将顶层对象替换为<code>default</code>导出。 如果在 tsconfig.json 里启用了<a href="/tsdoc-vitepress/tsconfig/#esModuleInterop"><code>&quot;esModuleInterop&quot;: true</code></a>，那么 Typescript 会自动为你处理。</p>`,117),e=[p];function t(c,r,y,i,F,d){return a(),n("div",null,e)}const h=s(o,[["render",t]]);export{u as __pageData,h as default};
