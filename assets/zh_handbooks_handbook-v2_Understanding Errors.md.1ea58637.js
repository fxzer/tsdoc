import{_ as s,o as a,c as n,V as o}from"./chunks/framework.ced88878.js";const E=JSON.parse('{"title":"了解错误","description":"","frontmatter":{},"headers":[],"relativePath":"zh/handbooks/handbook-v2/Understanding Errors.md","lastUpdated":1682921420000}'),l={name:"zh/handbooks/handbook-v2/Understanding Errors.md"},p=o(`<h1 id="了解错误" tabindex="-1">了解错误 <a class="header-anchor" href="#了解错误" aria-label="Permalink to &quot;了解错误&quot;">​</a></h1><p>每当 TypeScript 发现错误时，它都会尝试尽可能详细地解释问题所在。 因为它的类型系统是结构化的，所以这通常意味着对它发现问题的位置提供一些冗长的描述。</p><h2 id="术语" tabindex="-1">术语 <a class="header-anchor" href="#术语" aria-label="Permalink to &quot;术语&quot;">​</a></h2><p>您会经常在错误消息中看到一些有助于理解的术语。</p><h4 id="可分配" tabindex="-1">可分配 <a class="header-anchor" href="#可分配" aria-label="Permalink to &quot;可分配&quot;">​</a></h4><p>TypeScript 认为一种类型可分配给另一种类型，前提是一种类型可以接受另一种类型的替代。</p><p>换句话说，<code>Cat</code> 可分配给 <code>Animal</code> 因为 <code>Cat</code> 是 <code>Animal</code> 的可接受替代品。 顾名思义，此关系用于通过检查“t”和“s”的类型来检查赋值“t = s;”的有效性。 它还用于检查两种类型相互作用的大多数其他地方。 例如，调用函数时，每个参数的类型必须可分配给参数的声明类型。</p><p>通俗地说，如果您看到<code>T is not assignable to S</code>，您可以将其视为 TypeScript 说“<em><code>T</code> 和 <code>S</code> 不兼容”</em>。 但是，请注意这是一个定向的关系：<code>S</code> 可分配给 <code>T</code> 并不意味着 <code>T</code> 可分配给 <code>S</code>。</p><h2 id="例子" tabindex="-1">例子 <a class="header-anchor" href="#例子" aria-label="Permalink to &quot;例子&quot;">​</a></h2><p>让我们看一些示例错误消息并了解发生了什么。</p><h3 id="错误说明" tabindex="-1">错误说明 <a class="header-anchor" href="#错误说明" aria-label="Permalink to &quot;错误说明&quot;">​</a></h3><p>每个错误都以一条前导消息开头，有时后面跟着更多的子消息。 您可以将每条子消息视为对“为什么？”的回答。 关于它上面的消息的问题。 让我们通过一些例子来看看它们在实践中是如何工作的。</p><p>下面是一个生成比示例本身更长的错误消息的示例：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// @errors: 2322</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> a</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> { m</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">[] };</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> b </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> { m</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#DEE492;">&quot;&quot;</span><span style="color:#F6F6F4;">] };</span></span>
<span class="line"><span style="color:#F6F6F4;">a </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> b;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// @errors: 2322</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> a</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> { </span><span style="color:#E36209;">m</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">[] };</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { m: [</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">] };</span></span>
<span class="line"><span style="color:#24292E;">a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> b;</span></span></code></pre></div><p>TypeScript 在检查最后一行时发现错误。 它发出错误的逻辑遵循其确定分配是否正确的逻辑：</p><ol><li><code>b</code> 的类型可以分配给 <code>a</code> 吗？ 没有为什么？</li><li>因为 m 属性的类型不兼容。 为什么？</li><li>因为 <code>b</code> 的 <code>m</code> 属性（<code>string[]</code>）不可分配给 <code>a</code> 的 <code>m</code> 属性（<code>number[]</code>）。 为什么？</li><li>因为一个数组的元素类型（<code>string</code>）不能分配给另一个（<code>number</code>）</li></ol><h3 id="额外属性" tabindex="-1">额外属性 <a class="header-anchor" href="#额外属性" aria-label="Permalink to &quot;额外属性&quot;">​</a></h3><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// @errors: 2322</span></span>
<span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">A</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> { m</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;"> };</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> a</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">A</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> { m</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">, n</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;&quot;</span><span style="color:#F6F6F4;"> };</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// @errors: 2322</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">A</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { </span><span style="color:#E36209;">m</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">a</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">A</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { m: </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, n: </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;"> };</span></span></code></pre></div><h3 id="联合操作" tabindex="-1">联合操作 <a class="header-anchor" href="#联合操作" aria-label="Permalink to &quot;联合操作&quot;">​</a></h3><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// @errors: 2322</span></span>
<span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Thing</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">none</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> { name</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> a</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Thing</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> { name</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;"> };</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// @errors: 2322</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Thing</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;none&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> { </span><span style="color:#E36209;">name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">a</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Thing</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { name: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> };</span></span></code></pre></div>`,20),e=[p];function t(c,r,y,F,i,d){return a(),n("div",null,e)}const u=s(l,[["render",t]]);export{E as __pageData,u as default};
