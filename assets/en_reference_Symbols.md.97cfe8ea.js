import{_ as s,o as a,c as n,V as l}from"./chunks/framework.ced88878.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"en/reference/Symbols.md","lastUpdated":1682921420000}'),o={name:"en/reference/Symbols.md"},e=l(`<p>Starting with ECMAScript 2015, <code>symbol</code> is a primitive data type, just like <code>number</code> and <code>string</code>.</p><p><code>symbol</code> values are created by calling the <code>Symbol</code> constructor.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> sym1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Symbol</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> sym2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Symbol</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">key</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">// optional string key</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> sym1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> sym2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;key&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// optional string key</span></span></code></pre></div><p>Symbols are immutable, and unique.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> sym2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Symbol</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">key</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> sym3 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Symbol</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">key</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">sym2 </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;"> sym3; </span><span style="color:#7B7F8B;">// false, symbols are unique</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> sym2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;key&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> sym3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;key&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">sym2 </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> sym3; </span><span style="color:#6A737D;">// false, symbols are unique</span></span></code></pre></div><p>Just like strings, symbols can be used as keys for object properties.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> sym </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Symbol</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> obj </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  [sym]</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">value</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(obj[sym]); </span><span style="color:#7B7F8B;">// &quot;value&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">sym</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  [sym]: </span><span style="color:#032F62;">&quot;value&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(obj[sym]); </span><span style="color:#6A737D;">// &quot;value&quot;</span></span></code></pre></div><p>Symbols can also be combined with computed property declarations to declare object properties and class members.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> getClassNameSymbol </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Symbol</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">C</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  [getClassNameSymbol]() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">C</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> c </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">C</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> className </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> c[getClassNameSymbol](); </span><span style="color:#7B7F8B;">// &quot;C&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">getClassNameSymbol</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">C</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  [getClassNameSymbol]() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;C&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">C</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> className </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> c[getClassNameSymbol](); </span><span style="color:#6A737D;">// &quot;C&quot;</span></span></code></pre></div><h2 id="unique-symbol" tabindex="-1"><code>unique symbol</code> <a class="header-anchor" href="#unique-symbol" aria-label="Permalink to &quot;\`unique symbol\`&quot;">​</a></h2><p>To enable treating symbols as unique literals a special type <code>unique symbol</code> is available. <code>unique symbol</code> is a subtype of <code>symbol</code>, and are produced only from calling <code>Symbol()</code> or <code>Symbol.for()</code>, or from explicit type annotations. This type is only allowed on <code>const</code> declarations and <code>readonly static</code> properties, and in order to reference a specific unique symbol, you’ll have to use the <code>typeof</code> operator. Each reference to a unique symbol implies a completely unique identity that’s tied to a given declaration.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// @errors: 1332</span></span>
<span class="line"><span style="color:#F286C4;">declare</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> sym1</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">unique</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">symbol</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// sym2 can only be a constant reference.</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> sym2</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">unique</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">symbol</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Symbol</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// Works - refers to a unique symbol, but its identity is tied to &#39;sym1&#39;.</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> sym3</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">typeof</span><span style="color:#F6F6F4;"> sym1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> sym1;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// Also works.</span></span>
<span class="line"><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">C</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">readonly</span><span style="color:#F6F6F4;"> StaticSymbol</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">unique</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">symbol</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Symbol</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// @errors: 1332</span></span>
<span class="line"><span style="color:#D73A49;">declare</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">sym1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">unique</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">symbol</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// sym2 can only be a constant reference.</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> sym2</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">unique</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">symbol</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Works - refers to a unique symbol, but its identity is tied to &#39;sym1&#39;.</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> sym3</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> sym1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sym1;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Also works.</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">C</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">readonly</span><span style="color:#24292E;"> </span><span style="color:#E36209;">StaticSymbol</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">unique</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">symbol</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Because each <code>unique symbol</code> has a completely separate identity, no two <code>unique symbol</code> types are assignable or comparable to each other.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// @errors: 2367</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> sym2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Symbol</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> sym3 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Symbol</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (sym2 </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;"> sym3) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// ...</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// @errors: 2367</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">sym2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">sym3</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (sym2 </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> sym3) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="well-known-symbols" tabindex="-1">Well-known Symbols <a class="header-anchor" href="#well-known-symbols" aria-label="Permalink to &quot;Well-known Symbols&quot;">​</a></h2><p>In addition to user-defined symbols, there are well-known built-in symbols. Built-in symbols are used to represent internal language behaviors.</p><p>Here is a list of well-known symbols:</p><h2 id="symbol-hasinstance" tabindex="-1"><code>Symbol.hasInstance</code> <a class="header-anchor" href="#symbol-hasinstance" aria-label="Permalink to &quot;\`Symbol.hasInstance\`&quot;">​</a></h2><p>A method that determines if a constructor object recognizes an object as one of the constructor’s instances. Called by the semantics of the instanceof operator.</p><h2 id="symbol-isconcatspreadable" tabindex="-1"><code>Symbol.isConcatSpreadable</code> <a class="header-anchor" href="#symbol-isconcatspreadable" aria-label="Permalink to &quot;\`Symbol.isConcatSpreadable\`&quot;">​</a></h2><p>A Boolean value indicating that an object should be flattened to its array elements by Array.prototype.concat.</p><h2 id="symbol-iterator" tabindex="-1"><code>Symbol.iterator</code> <a class="header-anchor" href="#symbol-iterator" aria-label="Permalink to &quot;\`Symbol.iterator\`&quot;">​</a></h2><p>A method that returns the default iterator for an object. Called by the semantics of the for-of statement.</p><h2 id="symbol-match" tabindex="-1"><code>Symbol.match</code> <a class="header-anchor" href="#symbol-match" aria-label="Permalink to &quot;\`Symbol.match\`&quot;">​</a></h2><p>A regular expression method that matches the regular expression against a string. Called by the <code>String.prototype.match</code> method.</p><h2 id="symbol-replace" tabindex="-1"><code>Symbol.replace</code> <a class="header-anchor" href="#symbol-replace" aria-label="Permalink to &quot;\`Symbol.replace\`&quot;">​</a></h2><p>A regular expression method that replaces matched substrings of a string. Called by the <code>String.prototype.replace</code> method.</p><h2 id="symbol-search" tabindex="-1"><code>Symbol.search</code> <a class="header-anchor" href="#symbol-search" aria-label="Permalink to &quot;\`Symbol.search\`&quot;">​</a></h2><p>A regular expression method that returns the index within a string that matches the regular expression. Called by the <code>String.prototype.search</code> method.</p><h2 id="symbol-species" tabindex="-1"><code>Symbol.species</code> <a class="header-anchor" href="#symbol-species" aria-label="Permalink to &quot;\`Symbol.species\`&quot;">​</a></h2><p>A function valued property that is the constructor function that is used to create derived objects.</p><h2 id="symbol-split" tabindex="-1"><code>Symbol.split</code> <a class="header-anchor" href="#symbol-split" aria-label="Permalink to &quot;\`Symbol.split\`&quot;">​</a></h2><p>A regular expression method that splits a string at the indices that match the regular expression. Called by the <code>String.prototype.split</code> method.</p><h2 id="symbol-toprimitive" tabindex="-1"><code>Symbol.toPrimitive</code> <a class="header-anchor" href="#symbol-toprimitive" aria-label="Permalink to &quot;\`Symbol.toPrimitive\`&quot;">​</a></h2><p>A method that converts an object to a corresponding primitive value. Called by the <code>ToPrimitive</code> abstract operation.</p><h2 id="symbol-tostringtag" tabindex="-1"><code>Symbol.toStringTag</code> <a class="header-anchor" href="#symbol-tostringtag" aria-label="Permalink to &quot;\`Symbol.toStringTag\`&quot;">​</a></h2><p>A String value that is used in the creation of the default string description of an object. Called by the built-in method <code>Object.prototype.toString</code>.</p><h2 id="symbol-unscopables" tabindex="-1"><code>Symbol.unscopables</code> <a class="header-anchor" href="#symbol-unscopables" aria-label="Permalink to &quot;\`Symbol.unscopables\`&quot;">​</a></h2><p>An Object whose own property names are property names that are excluded from the &#39;with&#39; environment bindings of the associated objects.</p>`,39),p=[e];function t(c,r,y,i,F,d){return a(),n("div",null,p)}const u=s(o,[["render",t]]);export{b as __pageData,u as default};
