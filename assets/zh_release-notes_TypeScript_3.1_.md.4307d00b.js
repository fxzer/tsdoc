import{_ as s,o as a,c as n,V as o}from"./chunks/framework.ced88878.js";const u=JSON.parse('{"title":"TypeScript 3.1","description":"","frontmatter":{},"headers":[],"relativePath":"zh/release-notes/TypeScript[3.1].md","lastUpdated":1682670826000}'),p={name:"zh/release-notes/TypeScript[3.1].md"},l=o(`<h1 id="typescript-3-1" tabindex="-1">TypeScript 3.1 <a class="header-anchor" href="#typescript-3-1" aria-label="Permalink to &quot;TypeScript 3.1&quot;">​</a></h1><h2 id="元组和数组上的映射类型" tabindex="-1">元组和数组上的映射类型 <a class="header-anchor" href="#元组和数组上的映射类型" aria-label="Permalink to &quot;元组和数组上的映射类型&quot;">​</a></h2><p>TypeScript 3.1，在元组和数组上的映射对象类型现在会生成新的元组/数组，而非创建一个新的类型并且这个类型上具有如<code>push()</code>，<code>pop()</code>和<code>length</code>这样的成员。 例子：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">MapToPromise</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F6F6F4;">&gt; </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> { [</span><span style="color:#FFB86C;font-style:italic;">K</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">in</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">keyof</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F6F6F4;">]</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Promise</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F6F6F4;">[</span><span style="color:#FFB86C;font-style:italic;">K</span><span style="color:#F6F6F4;">]&gt; };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Coordinate</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">PromiseCoordinate</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">MapToPromise</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">Coordinate</span><span style="color:#F6F6F4;">&gt;; </span><span style="color:#7B7F8B;">// [Promise&lt;number&gt;, Promise&lt;number&gt;]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MapToPromise</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { [</span><span style="color:#6F42C1;">K</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">keyof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Promise</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">[</span><span style="color:#6F42C1;">K</span><span style="color:#24292E;">]&gt; };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Coordinate</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">number</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PromiseCoordinate</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MapToPromise</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Coordinate</span><span style="color:#24292E;">&gt;; </span><span style="color:#6A737D;">// [Promise&lt;number&gt;, Promise&lt;number&gt;]</span></span></code></pre></div><p><code>MapToPromise</code>接收参数<code>T</code>，当它是个像<code>Coordinate</code>这样的元组时，只有数值型属性会被转换。 <code>[number, number]</code>具有两个数值型属性：<code>0</code>和<code>1</code>。 针对这样的数组，<code>MapToPromise</code>会创建一个新的元组，<code>0</code>和<code>1</code>属性是原类型的一个<code>Promise</code>。 因此<code>PromiseCoordinate</code>的类型为<code>[Promise&lt;number&gt;, Promise&lt;number&gt;]</code>。</p><h2 id="函数上的属性声明" tabindex="-1">函数上的属性声明 <a class="header-anchor" href="#函数上的属性声明" aria-label="Permalink to &quot;函数上的属性声明&quot;">​</a></h2><p>TypeScript 3.1提供了在函数声明上定义属性的能力，还支持<code>const</code>声明的函数。只需要在函数直接给属性赋值就可以了。 这样我们就可以规范JavaScript代码，不必再借助于<code>namespace</code>。 例子：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">readImage</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">path</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">, </span><span style="color:#62E884;">callback</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">err</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">any</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">image</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Image</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// ...</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">readImage.</span><span style="color:#62E884;">sync</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">path</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> contents </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> fs.</span><span style="color:#62E884;">readFileSync</span><span style="color:#F6F6F4;">(path);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">decodeImageSync</span><span style="color:#F6F6F4;">(contents);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">readImage</span><span style="color:#24292E;">(</span><span style="color:#E36209;">path</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">callback</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">err</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;">, </span><span style="color:#E36209;">image</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Image</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">void</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">readImage.</span><span style="color:#6F42C1;">sync</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">path</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">contents</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fs.</span><span style="color:#6F42C1;">readFileSync</span><span style="color:#24292E;">(path);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">decodeImageSync</span><span style="color:#24292E;">(contents);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里，<code>readImage</code>函数异步地读取一张图片。 此外，我们还在<code>readImage</code>上提供了一个便捷的函数<code>readImage.sync</code>。</p><p>一般来说，使用ECMAScript导出是个更好的方式，但这个新功能支持此风格的代码能够在TypeScript里执行。 此外，这种属性声明的方式允许我们表达一些常见的模式，例如React函数组件（之前叫做SFC）里的<code>defaultProps</code>和<code>propTpes</code> 。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FooComponent</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ({ </span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F6F6F4;"> }) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> (</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#97E1F1;font-style:italic;">div</span><span style="color:#F6F6F4;">&gt;Hello</span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;"> I am {</span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F6F6F4;">}</span><span style="color:#F286C4;">&lt;/</span><span style="color:#F6F6F4;">div</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">FooComponent.defaultProps </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    name</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">(anonymous)</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FooComponent</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ({ </span><span style="color:#E36209;">name</span><span style="color:#24292E;"> }) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#6F42C1;">div</span><span style="color:#24292E;">&gt;Hello</span><span style="color:#D73A49;">!</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">I</span><span style="color:#24292E;"> am {</span><span style="color:#E36209;">name</span><span style="color:#24292E;">}</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">div</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">FooComponent.defaultProps </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    name: </span><span style="color:#032F62;">&quot;(anonymous)&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>[1] 更确切地说，是上面那种同态映射类型。</p><h2 id="使用typesversions选择版本" tabindex="-1">使用<code>typesVersions</code>选择版本 <a class="header-anchor" href="#使用typesversions选择版本" aria-label="Permalink to &quot;使用\`typesVersions\`选择版本&quot;">​</a></h2><p>由社区的反馈还有我们的经验得知，利用最新的TypeScript功能的同时容纳旧版本的用户很困难。 TypeScript引入了叫做<code>typesVersions</code>的新特性来解决这种情况。</p><p>在TypeScript 3.1里使用Node模块解析时，TypeScript会读取<code>package.json</code>文件，找到它需要读取的文件，它首先会查看名字为<code>typesVersions</code>的字段。 一个带有<code>typesVersions</code>字段的<code>package.json</code>文件：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">name</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">: </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">package-name</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">version</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">: </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">1.0</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">types</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">: </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">./index.d.ts</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">typesVersions</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">: {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">&gt;=3.1</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> { </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">*</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">ts3.1/*</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">] }</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;package-name&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;version&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;1.0&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;types&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./index.d.ts&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;typesVersions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;&gt;=3.1&quot;</span><span style="color:#24292E;">: { </span><span style="color:#032F62;">&quot;*&quot;</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;ts3.1/*&quot;</span><span style="color:#24292E;">] }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>package.json</code>告诉TypeScript去检查当前版本的TypeScript是否正在运行。 如果是3.1或以上的版本，它会找出你导入的包的路径，然后读取这个包里面的<code>ts3.1</code>文件夹里的内容。 这就是<code>{ &quot;*&quot;: [&quot;ts3.1/*&quot;] }</code>的意义 - 如果你对路径映射熟悉，它们的工作方式类似。</p><p>因此在上例中，如果我们正在从<code>&quot;package-name&quot;</code>中导入，并且正在运行的TypeScript版本为3.1，我们会尝试从<code>[...]/node_modules/package-name/ts3.1/index.d.ts</code>开始解析。 如果是从<code>package-name/foo</code>导入，由会查找<code>[...]/node_modules/package-name/ts3.1/foo.d.ts</code>和<code>[...]/node_modules/package-name/ts3.1/foo/index.d.ts</code>。</p><p>那如果当前运行的TypeScript版本不是3.1呢？ 如果<code>typesVersions</code>里没有能匹配上的版本，TypeScript将回退到查看<code>types</code>字段，因此TypeScript 3.0及之前的版本会重定向到<code>[...]/node_modules/package-name/index.d.ts</code>。</p><h3 id="匹配行为" tabindex="-1">匹配行为 <a class="header-anchor" href="#匹配行为" aria-label="Permalink to &quot;匹配行为&quot;">​</a></h3><p>TypeScript使用Node的<a href="https://github.com/npm/node-semver#ranges" target="_blank" rel="noreferrer">semver ranges</a>去决定编译器和语言版本。</p><h3 id="多个字段" tabindex="-1">多个字段 <a class="header-anchor" href="#多个字段" aria-label="Permalink to &quot;多个字段&quot;">​</a></h3><p><code>typesVersions</code>支持多个字段，每个字段都指定了一个匹配范围。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">name</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">: </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">package-name</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">version</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">: </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">1.0</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">types</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">: </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">./index.d.ts</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">typesVersions</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">: {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">&gt;=3.2</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> { </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">*</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">ts3.2/*</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">] },</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">&gt;=3.1</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> { </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">*</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">ts3.1/*</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">] }</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;package-name&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;version&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;1.0&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;types&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./index.d.ts&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;typesVersions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;&gt;=3.2&quot;</span><span style="color:#24292E;">: { </span><span style="color:#032F62;">&quot;*&quot;</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;ts3.2/*&quot;</span><span style="color:#24292E;">] },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;&gt;=3.1&quot;</span><span style="color:#24292E;">: { </span><span style="color:#032F62;">&quot;*&quot;</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;ts3.1/*&quot;</span><span style="color:#24292E;">] }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>因为范围可能会重叠，因此指定的顺序是有意义的。 在上例中，尽管<code>&gt;=3.2</code>和<code>&gt;=3.1</code>都匹配TypeScript 3.2及以上版本，反转它们的顺序将会有不同的结果，因此上例与下面的代码并不等同。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">{</span></span>
<span class="line"><span style="color:#f6f6f4;">  &quot;name&quot;: &quot;package-name&quot;,</span></span>
<span class="line"><span style="color:#f6f6f4;">  &quot;version&quot;: &quot;1.0&quot;,</span></span>
<span class="line"><span style="color:#f6f6f4;">  &quot;types&quot;: &quot;./index.d.ts&quot;,</span></span>
<span class="line"><span style="color:#f6f6f4;">  &quot;typesVersions&quot;: {</span></span>
<span class="line"><span style="color:#f6f6f4;">    // 注意，这样写不生效</span></span>
<span class="line"><span style="color:#f6f6f4;">    &quot;&gt;=3.1&quot;: { &quot;*&quot;: [&quot;ts3.1/*&quot;] },</span></span>
<span class="line"><span style="color:#f6f6f4;">    &quot;&gt;=3.2&quot;: { &quot;*&quot;: [&quot;ts3.2/*&quot;] }</span></span>
<span class="line"><span style="color:#f6f6f4;">  }</span></span>
<span class="line"><span style="color:#f6f6f4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">{</span></span>
<span class="line"><span style="color:#24292e;">  &quot;name&quot;: &quot;package-name&quot;,</span></span>
<span class="line"><span style="color:#24292e;">  &quot;version&quot;: &quot;1.0&quot;,</span></span>
<span class="line"><span style="color:#24292e;">  &quot;types&quot;: &quot;./index.d.ts&quot;,</span></span>
<span class="line"><span style="color:#24292e;">  &quot;typesVersions&quot;: {</span></span>
<span class="line"><span style="color:#24292e;">    // 注意，这样写不生效</span></span>
<span class="line"><span style="color:#24292e;">    &quot;&gt;=3.1&quot;: { &quot;*&quot;: [&quot;ts3.1/*&quot;] },</span></span>
<span class="line"><span style="color:#24292e;">    &quot;&gt;=3.2&quot;: { &quot;*&quot;: [&quot;ts3.2/*&quot;] }</span></span>
<span class="line"><span style="color:#24292e;">  }</span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre></div>`,26),e=[l];function t(c,r,y,F,i,E){return a(),n("div",null,e)}const q=s(p,[["render",t]]);export{u as __pageData,q as default};
