import{_ as s,o as n,c as a,V as l}from"./chunks/framework.ced88878.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"zh/handbooks/handbook-v2/Everyday Types.md","lastUpdated":1682921420000}'),o={name:"zh/handbooks/handbook-v2/Everyday Types.md"},p=l(`<p>在本章中，我们将介绍一些在 JavaScript 代码中最常见的值类型，并解释在 TypeScript 中描述这些类型的相应方法。 这不是一个详尽的列表，以后的章节将描述更多命名和使用其他类型的方法。</p><p>类型还可以出现在更多 <em>地方</em>，而不仅仅是类型注释。 当我们了解类型本身时，我们还将了解我们可以引用这些类型以形成新结构的地方。</p><p>我们将从回顾您在编写 JavaScript 或 TypeScript 代码时可能遇到的最基本和最常见的类型开始。 这些稍后将形成更复杂类型的核心构建块。</p><h2 id="原始类型-string-number-and-boolean" tabindex="-1">原始类型: <code>string</code>, <code>number</code>, and <code>boolean</code> <a class="header-anchor" href="#原始类型-string-number-and-boolean" aria-label="Permalink to &quot;原始类型: \`string\`, \`number\`, and \`boolean\`&quot;">​</a></h2><p>JavaScript 具有三个非常常用的<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Primitive" target="_blank" rel="noreferrer">原生类型</a>：<code>string</code>、<code>number</code> 和<code>boolean</code>。 每个在 TypeScript 中都有相应的类型。 如您所料，这些名称与您在这些类型的值上使用 JavaScript <code>typeof</code> 运算符时看到的名称相同：</p><ul><li><code>string</code> 表示字符串值，例如 <code>&quot;Hello, world&quot;</code></li><li><code>number</code> 适用于像 <code>42</code> 这样的数字。 JavaScript 没有整数的特殊运行时值，因此没有等同于 <code>int</code> 或 <code>float</code> - 一切都是简单的 <code>number</code></li><li><code>boolean</code> 用于两个值 <code>true</code> 和 <code>false</code></li></ul><blockquote><p>类型名称 <code>String</code>、<code>Number</code> 和 <code>Boolean</code>（以大写字母开头）是合法的，但指的是一些很少出现在您的代码中的特殊内置类型。 <em>始终</em> 使用<code>string</code>, <code>number</code>, or <code>boolean</code> 作为类型。</p></blockquote><h2 id="arrays" tabindex="-1">Arrays <a class="header-anchor" href="#arrays" aria-label="Permalink to &quot;Arrays&quot;">​</a></h2><p>要指定数组的类型，如 <code>[1, 2, 3]</code>，您可以使用语法 <code>number[]</code>； 此语法适用于任何类型（例如，<code>string[]</code> 是一个字符串数组，等等）。 您可能还会看到它写成 <code>Array&lt;number&gt;</code>，意思是一样的。 当我们介绍_泛型_时，我们将学习更多关于语法<code>T&lt;U&gt;</code>的知识。</p><blockquote><p>注意 <code>[number]</code> 中定义不同的类型； 请参阅有关 <strong>元组</strong> 的部分。</p></blockquote><h2 id="any" tabindex="-1"><code>any</code> <a class="header-anchor" href="#any" aria-label="Permalink to &quot;\`any\`&quot;">​</a></h2><p>TypeScript 还有一种特殊类型，<code>any</code>，只要您不希望特定值导致类型检查错误，就可以使用它。</p><p>当一个值是<code>any</code>类型时，您可以访问它的任何属性（它又是<code>any</code>类型），像调用函数一样调用它，将它赋值给（或从）任何类型的值，或者 几乎任何其他语法上合法的东西：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> obj</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">any</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> { x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;"> };</span></span>
<span class="line"><span style="color:#7B7F8B;">// 以下代码行都不会抛出编译器错误。</span></span>
<span class="line"><span style="color:#7B7F8B;">// 使用 \`any\` 禁用所有进一步的类型检查，并且假定</span></span>
<span class="line"><span style="color:#7B7F8B;">// 你比 TypeScript 更了解环境。</span></span>
<span class="line"><span style="color:#F6F6F4;">obj.</span><span style="color:#62E884;">foo</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#62E884;">obj</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">obj.bar </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">100</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">obj </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> n</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> obj;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> obj</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { x: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#6A737D;">// 以下代码行都不会抛出编译器错误。</span></span>
<span class="line"><span style="color:#6A737D;">// 使用 \`any\` 禁用所有进一步的类型检查，并且假定</span></span>
<span class="line"><span style="color:#6A737D;">// 你比 TypeScript 更了解环境。</span></span>
<span class="line"><span style="color:#24292E;">obj.</span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6F42C1;">obj</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">obj.bar </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">n</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> obj;</span></span></code></pre></div><p>当您不想为了让 TypeScript 相信某行特定代码没问题时，<code>any</code> 类型很有用。</p><h3 id="noimplicitany" tabindex="-1"><code>noImplicitAny</code> <a class="header-anchor" href="#noimplicitany" aria-label="Permalink to &quot;\`noImplicitAny\`&quot;">​</a></h3><p>当您不指定类型，并且 TypeScript 无法从上下文中推断出它时，编译器通常会默认为 <code>any</code> 。</p><p>不过，您通常希望避免这种情况，因为没有对 <code>any</code> 进行类型检查。 使用编译器配置项 <code>noImplicitAny</code> 将任何隐式的 <code>any</code> 标记为错误。</p><h2 id="变量类型注解" tabindex="-1">变量类型注解 <a class="header-anchor" href="#变量类型注解" aria-label="Permalink to &quot;变量类型注解&quot;">​</a></h2><p>当您使用 <code>const</code>、<code>var</code> 或 <code>let</code> 声明变量时，您可以选择添加类型注释以显式指定变量的类型：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> myName</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Alice</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#7B7F8B;">//        ^^^^^^^^ Type annotation</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> myName</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Alice&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">//        ^^^^^^^^ Type annotation</span></span></code></pre></div><blockquote><p>TypeScript 不使用“左侧类型”式的声明，例如 <code>int x = 0;</code> 类型注解总是_在_被输入的东西之后。</p></blockquote><p>但是，在大多数情况下，这不是必需的。 只要有可能，TypeScript 就会尝试自动_推断_代码中的类型。 例如，变量的类型是根据其初始值设定项的类型推断的：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// No type annotation needed -- &#39;myName&#39; inferred as type &#39;string&#39;</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> myName </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Alice</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// No type annotation needed -- &#39;myName&#39; inferred as type &#39;string&#39;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> myName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Alice&quot;</span><span style="color:#24292E;">;</span></span></code></pre></div><p>在大多数情况下，您不需要明确学习推理规则。 如果您刚开始，请尝试使用比您想象的更少的类型注释——您可能会惊讶于 TypeScript 完全理解正在发生的事情所需的类型注释如此之少。</p><h2 id="函数" tabindex="-1">函数 <a class="header-anchor" href="#函数" aria-label="Permalink to &quot;函数&quot;">​</a></h2><p>函数是在 JavaScript 中传递数据的主要方式。 TypeScript 允许您指定函数的输入值和输出值的类型。</p><h3 id="参数类型注解" tabindex="-1">参数类型注解 <a class="header-anchor" href="#参数类型注解" aria-label="Permalink to &quot;参数类型注解&quot;">​</a></h3><p>当你声明一个函数时，你可以在每个参数后面加上类型注解来声明函数接受什么类型的参数。 参数类型注释位于参数名称之后：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// Parameter type annotation</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">greet</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">//                 ^^^^^^^^</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Hello, </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> name.</span><span style="color:#62E884;">toUpperCase</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">!!</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Parameter type annotation</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">greet</span><span style="color:#24292E;">(</span><span style="color:#E36209;">name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//                 ^^^^^^^^</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hello, &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> name.</span><span style="color:#6F42C1;">toUpperCase</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;!!&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>当参数具有类型注释时，将检查该函数的参数：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// @errors: 2345</span></span>
<span class="line"><span style="color:#F286C4;">declare</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">greet</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#7B7F8B;">// ---cut---</span></span>
<span class="line"><span style="color:#7B7F8B;">// Would be a runtime error if executed!</span></span>
<span class="line"><span style="color:#62E884;">greet</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">42</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// @errors: 2345</span></span>
<span class="line"><span style="color:#D73A49;">declare</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">greet</span><span style="color:#24292E;">(</span><span style="color:#E36209;">name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">void</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// ---cut---</span></span>
<span class="line"><span style="color:#6A737D;">// Would be a runtime error if executed!</span></span>
<span class="line"><span style="color:#6F42C1;">greet</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">42</span><span style="color:#24292E;">);</span></span></code></pre></div><blockquote><p>即使您的参数没有类型注释，TypeScript 仍会检查您是否传递了正确数量的参数。 当参数具有类型注释时，将检查该函数的参数：</p></blockquote><h3 id="返回值类型注解" tabindex="-1">返回值类型注解 <a class="header-anchor" href="#返回值类型注解" aria-label="Permalink to &quot;返回值类型注解&quot;">​</a></h3><p>您还可以添加返回类型注释。 返回类型注释出现在参数列表之后：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getFavoriteNumber</span><span style="color:#F6F6F4;">()</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">//                        ^^^^^^^^</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">26</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getFavoriteNumber</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//                        ^^^^^^^^</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">26</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Here&#39;s an example: 与变量类型注释非常相似，您通常不需要返回类型注释，因为 TypeScript 会根据函数的<code>return</code> 语句推断函数的返回类型。 上面示例中的类型注释不会改变任何东西。 一些代码库会出于文档目的明确指定返回类型，以防止意外更改或仅出于个人喜好。</p><h3 id="匿名函数" tabindex="-1">匿名函数 <a class="header-anchor" href="#匿名函数" aria-label="Permalink to &quot;匿名函数&quot;">​</a></h3><p>匿名函数与函数声明有点不同。 当函数出现在 TypeScript 可以确定将如何调用它的地方时，该函数的参数会自动指定类型。</p><p>这是一个例子：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// @errors: 2551</span></span>
<span class="line"><span style="color:#7B7F8B;">// No type annotations here, but TypeScript can spot the bug</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> names </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Alice</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Bob</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Eve</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// Contextual typing for function</span></span>
<span class="line"><span style="color:#F6F6F4;">names.</span><span style="color:#62E884;">forEach</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">s</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(s.</span><span style="color:#62E884;">toUppercase</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// Contextual typing also applies to arrow functions</span></span>
<span class="line"><span style="color:#F6F6F4;">names.</span><span style="color:#62E884;">forEach</span><span style="color:#F6F6F4;">((</span><span style="color:#FFB86C;font-style:italic;">s</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(s.</span><span style="color:#62E884;">toUppercase</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// @errors: 2551</span></span>
<span class="line"><span style="color:#6A737D;">// No type annotations here, but TypeScript can spot the bug</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">names</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;Alice&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Bob&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Eve&quot;</span><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Contextual typing for function</span></span>
<span class="line"><span style="color:#24292E;">names.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">s</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(s.</span><span style="color:#6F42C1;">toUppercase</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Contextual typing also applies to arrow functions</span></span>
<span class="line"><span style="color:#24292E;">names.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">s</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(s.</span><span style="color:#6F42C1;">toUppercase</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>即使参数 <code>s</code> 没有类型注释，TypeScript 使用 <code>forEach</code> 函数的类型以及数组的推断类型来确定 s 将具有的类型。</p><p>这个过程称为 <em>上下文推断</em>，因为函数发生的上下文告诉它应该有什么类型。</p><p>与推理规则类似，您无需明确了解这是如何发生的，但了解它_确实_发生了可以帮助您注意到何时不需要类型注释。 稍后，我们将看到更多示例，说明值出现的上下文如何影响其类型。</p><h2 id="对象类型" tabindex="-1">对象类型 <a class="header-anchor" href="#对象类型" aria-label="Permalink to &quot;对象类型&quot;">​</a></h2><p>除了基元之外，您会遇到的最常见类型是_对象类型_。 这是指任何具有属性的 JavaScript 值，几乎是所有的值！ 要定义对象类型，我们只需列出其属性及其类型。</p><p>例如，这是一个接受点状对象的函数：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// The parameter&#39;s type annotation is an object type</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">printCoord</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">pt</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> { x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">; y</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;"> }) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">//                      ^^^^^^^^^^^^^^^^^^^^^^^^</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">The coordinate&#39;s x value is </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> pt.x);</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">The coordinate&#39;s y value is </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> pt.y);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#62E884;">printCoord</span><span style="color:#F6F6F4;">({ x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">, y</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">7</span><span style="color:#F6F6F4;"> });</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// The parameter&#39;s type annotation is an object type</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printCoord</span><span style="color:#24292E;">(</span><span style="color:#E36209;">pt</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> { </span><span style="color:#E36209;">x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">; </span><span style="color:#E36209;">y</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;"> }) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//                      ^^^^^^^^^^^^^^^^^^^^^^^^</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;The coordinate&#39;s x value is &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> pt.x);</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;The coordinate&#39;s y value is &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> pt.y);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">printCoord</span><span style="color:#24292E;">({ x: </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, y: </span><span style="color:#005CC5;">7</span><span style="color:#24292E;"> });</span></span></code></pre></div><p>在这里，我们用具有两个属性的类型注释参数 - <code>x</code> 和 <code>y</code> - 都是 <code>number</code> 类型。 您可以使用 <code>,</code> 或 <code>;</code> 来分隔属性，最后一个分隔符是可选的。</p><p>每个属性的类型部分也是可选的。 如果您不指定类型，它将被假定为 <code>any</code>.。</p><h3 id="可选属性" tabindex="-1">可选属性 <a class="header-anchor" href="#可选属性" aria-label="Permalink to &quot;可选属性&quot;">​</a></h3><p>对象类型还可以指定它们的部分或全部属性是_可选的_。 为此，请在属性名称后添加一个 <code>?</code> ：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">printName</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">obj</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> { first</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">; last</span><span style="color:#F286C4;">?:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;"> }) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// ...</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#7B7F8B;">// Both OK</span></span>
<span class="line"><span style="color:#62E884;">printName</span><span style="color:#F6F6F4;">({ first</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Bob</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> });</span></span>
<span class="line"><span style="color:#62E884;">printName</span><span style="color:#F6F6F4;">({ first</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Alice</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, last</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Alisson</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> });</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printName</span><span style="color:#24292E;">(</span><span style="color:#E36209;">obj</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> { </span><span style="color:#E36209;">first</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">; </span><span style="color:#E36209;">last</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> }) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// Both OK</span></span>
<span class="line"><span style="color:#6F42C1;">printName</span><span style="color:#24292E;">({ first: </span><span style="color:#032F62;">&quot;Bob&quot;</span><span style="color:#24292E;"> });</span></span>
<span class="line"><span style="color:#6F42C1;">printName</span><span style="color:#24292E;">({ first: </span><span style="color:#032F62;">&quot;Alice&quot;</span><span style="color:#24292E;">, last: </span><span style="color:#032F62;">&quot;Alisson&quot;</span><span style="color:#24292E;"> });</span></span></code></pre></div><p>在 JavaScript 中，如果您访问一个不存在的属性，您将得到值<code>undefined</code>而不是运行时错误。 因此，当您 <em>读取</em> 可选属性时，您必须在使用它之前检查<code>undefined</code>。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// @errors: 18048</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">printName</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">obj</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> { first</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">; last</span><span style="color:#F286C4;">?:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;"> }) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// Error - might crash if &#39;obj.last&#39; wasn&#39;t provided!</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(obj.last.</span><span style="color:#62E884;">toUpperCase</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (obj.last </span><span style="color:#F286C4;">!==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">undefined</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// OK</span></span>
<span class="line"><span style="color:#F6F6F4;">    console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(obj.last.</span><span style="color:#62E884;">toUpperCase</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// A safe alternative using modern JavaScript syntax:</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(obj.last?.</span><span style="color:#62E884;">toUpperCase</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// @errors: 18048</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printName</span><span style="color:#24292E;">(</span><span style="color:#E36209;">obj</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> { </span><span style="color:#E36209;">first</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">; </span><span style="color:#E36209;">last</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> }) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Error - might crash if &#39;obj.last&#39; wasn&#39;t provided!</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(obj.last.</span><span style="color:#6F42C1;">toUpperCase</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (obj.last </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// OK</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(obj.last.</span><span style="color:#6F42C1;">toUpperCase</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// A safe alternative using modern JavaScript syntax:</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(obj.last?.</span><span style="color:#6F42C1;">toUpperCase</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="联合类型" tabindex="-1">联合类型 <a class="header-anchor" href="#联合类型" aria-label="Permalink to &quot;联合类型&quot;">​</a></h2><p>TypeScript 的类型系统允许您使用各种运算符从现有类型构建新类型。 现在我们知道如何编写一些类型，是时候开始以有趣的方式 <em>组合</em> 它们了。</p><h3 id="定义联合类型" tabindex="-1">定义联合类型 <a class="header-anchor" href="#定义联合类型" aria-label="Permalink to &quot;定义联合类型&quot;">​</a></h3><p>您可能会看到的第一种组合类型的方法是<strong>联合类型</strong>。 联合类型是由两个或多个其他类型组成的类型，表示可能是这些类型中的 <em>任何一个</em> 的值。 我们将这些类型中的每一种称为工会的 <em>成员</em>。</p><p>让我们编写一个可以对字符串或数字进行操作的函数：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// @errors: 2345</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">printId</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">id</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Your ID is: </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> id);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#7B7F8B;">// OK</span></span>
<span class="line"><span style="color:#62E884;">printId</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">101</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#7B7F8B;">// OK</span></span>
<span class="line"><span style="color:#62E884;">printId</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">202</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#7B7F8B;">// Error</span></span>
<span class="line"><span style="color:#62E884;">printId</span><span style="color:#F6F6F4;">({ myID</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">22342</span><span style="color:#F6F6F4;"> });</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// @errors: 2345</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printId</span><span style="color:#24292E;">(</span><span style="color:#E36209;">id</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Your ID is: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> id);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// OK</span></span>
<span class="line"><span style="color:#6F42C1;">printId</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">101</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// OK</span></span>
<span class="line"><span style="color:#6F42C1;">printId</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;202&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// Error</span></span>
<span class="line"><span style="color:#6F42C1;">printId</span><span style="color:#24292E;">({ myID: </span><span style="color:#005CC5;">22342</span><span style="color:#24292E;"> });</span></span></code></pre></div><h3 id="使用联合类型" tabindex="-1">使用联合类型 <a class="header-anchor" href="#使用联合类型" aria-label="Permalink to &quot;使用联合类型&quot;">​</a></h3><p>提供一个匹配联合类型的值很容易 --- 只需提供一个匹配联合的任何成员的类型。 如果你_有_一个联合类型的值，你如何使用它？</p><p>TypeScript 将只允许一个对联合体的每个成员有效的操作。 例如，如果你有联合<code>string | number</code>，您不能使用仅适用于 <code>string</code> 的方法：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// @errors: 2339</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">printId</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">id</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(id.</span><span style="color:#62E884;">toUpperCase</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// @errors: 2339</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printId</span><span style="color:#24292E;">(</span><span style="color:#E36209;">id</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(id.</span><span style="color:#6F42C1;">toUpperCase</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>解决方案是 <em>缩小</em> 与代码的联合，就像在没有类型注释的 JavaScript 中一样。 当 TypeScript 可以根据代码结构为值推断出更具体的类型时，就会发生 <em>Narrowing</em>。</p><p>例如，TypeScript 知道只有 <code>string</code> 值才会有 <code>typeof</code> 值 <code>&quot;string&quot;</code>：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">printId</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">id</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">typeof</span><span style="color:#F6F6F4;"> id </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">string</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// In this branch, id is of type &#39;string&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">    console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(id.</span><span style="color:#62E884;">toUpperCase</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">  } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// Here, id is of type &#39;number&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">    console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(id);</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printId</span><span style="color:#24292E;">(</span><span style="color:#E36209;">id</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> id </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;string&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// In this branch, id is of type &#39;string&#39;</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(id.</span><span style="color:#6F42C1;">toUpperCase</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Here, id is of type &#39;number&#39;</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(id);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>另一个例子是使用像这样的函数 <code>Array.isArray</code>:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">welcomePeople</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">[] </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (Array.</span><span style="color:#62E884;">isArray</span><span style="color:#F6F6F4;">(x)) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// Here: &#39;x&#39; is &#39;string[]&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">    console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Hello, </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> x.</span><span style="color:#62E884;">join</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;"> and </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"><span style="color:#F6F6F4;">  } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// Here: &#39;x&#39; is &#39;string&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">    console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Welcome lone traveler </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> x);</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">welcomePeople</span><span style="color:#24292E;">(</span><span style="color:#E36209;">x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">[] </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (Array.</span><span style="color:#6F42C1;">isArray</span><span style="color:#24292E;">(x)) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Here: &#39;x&#39; is &#39;string[]&#39;</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hello, &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> x.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot; and &quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Here: &#39;x&#39; is &#39;string&#39;</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Welcome lone traveler &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> x);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>请注意，在 <code>else</code> 分支中，我们不需要做任何特殊的事情——如果 <code>x</code> 不是<code>string[]</code>，那么它一定有一个 <code>string</code></p><p>有时你会有一个工会，其中所有成员都有一些共同点。 例如，数组和字符串都有一个 <code>slice</code> 方法。 如果联合中的每个成员都有一个共同的属性，您可以使用该属性而无需缩小：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// Return type is inferred as number[] | string</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getFirstThree</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">[] </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> x.</span><span style="color:#62E884;">slice</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Return type is inferred as number[] | string</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getFirstThree</span><span style="color:#24292E;">(</span><span style="color:#E36209;">x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">[] </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> x.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>类型的_union_似乎具有这些类型属性的 <em>交叉</em>，这可能会造成混淆。 这不是偶然的——<em>union</em> 这个名字来自类型论。 联合<code>number | string</code> 是由每种类型的 <em>值</em> 的并集组成的。 请注意，给定两个集合以及关于每个集合的相应事实，只有这些事实的 <em>交集</em> 适用于集合本身的 <em>并集</em>。 例如，如果我们有一个房间是戴帽子的高个子人，另一个房间是戴帽子的说西班牙语的人，在合并这些房间之后，我们唯一知道的是 <em>每个人</em> 都必须戴帽子。</p></blockquote><h2 id="类型别名" tabindex="-1">类型别名 <a class="header-anchor" href="#类型别名" aria-label="Permalink to &quot;类型别名&quot;">​</a></h2><p>我们一直在使用对象类型和联合类型，方法是将它们直接写在类型注释中。 这很方便，但是想要多次使用同一类型并通过一个名称引用它是很常见的。</p><p><em>类型别名</em> --- 任何名称的类型。 类型别名的语法是：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Point</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  y</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// Exactly the same as the earlier example</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">printCoord</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">pt</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Point</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">The coordinate&#39;s x value is </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> pt.x);</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">The coordinate&#39;s y value is </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> pt.y);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">printCoord</span><span style="color:#F6F6F4;">({ x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">100</span><span style="color:#F6F6F4;">, y</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">100</span><span style="color:#F6F6F4;"> });</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Point</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">y</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Exactly the same as the earlier example</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printCoord</span><span style="color:#24292E;">(</span><span style="color:#E36209;">pt</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Point</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;The coordinate&#39;s x value is &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> pt.x);</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;The coordinate&#39;s y value is &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> pt.y);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">printCoord</span><span style="color:#24292E;">({ x: </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">, y: </span><span style="color:#005CC5;">100</span><span style="color:#24292E;"> });</span></span></code></pre></div><p>实际上，您可以使用类型别名为任何类型命名，而不仅仅是对象类型。 例如，一个类型别名可以命名一个联合类型：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ID</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ID</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">;</span></span></code></pre></div><p>请注意，别名只是别名——您不能使用类型别名来创建同一类型的不同/不同“版本”。 当您使用别名时，就像您编写了别名类型一样。 换句话说，这段代码可能 <em>看起来</em> 是非法的，但根据 TypeScript 是可以的，因为这两种类型都是同一类型的别名：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">declare</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getInput</span><span style="color:#F6F6F4;">()</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">declare</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">sanitize</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">str</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#7B7F8B;">// ---cut---</span></span>
<span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">UserInputSanitizedString</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">sanitizeInput</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">str</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">UserInputSanitizedString</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">sanitize</span><span style="color:#F6F6F4;">(str);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// Create a sanitized input</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> userInput </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">sanitizeInput</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">getInput</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// Can still be re-assigned with a string though</span></span>
<span class="line"><span style="color:#F6F6F4;">userInput </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">new input</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">declare</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getInput</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">declare</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sanitize</span><span style="color:#24292E;">(</span><span style="color:#E36209;">str</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// ---cut---</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserInputSanitizedString</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sanitizeInput</span><span style="color:#24292E;">(</span><span style="color:#E36209;">str</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserInputSanitizedString</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sanitize</span><span style="color:#24292E;">(str);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Create a sanitized input</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> userInput </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sanitizeInput</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getInput</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Can still be re-assigned with a string though</span></span>
<span class="line"><span style="color:#24292E;">userInput </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;new input&quot;</span><span style="color:#24292E;">;</span></span></code></pre></div><h2 id="接口" tabindex="-1">接口 <a class="header-anchor" href="#接口" aria-label="Permalink to &quot;接口&quot;">​</a></h2><p><em>接口声明</em> 是另一种命名对象类型的方法：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Point</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  y</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">printCoord</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">pt</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Point</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">The coordinate&#39;s x value is </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> pt.x);</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">The coordinate&#39;s y value is </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> pt.y);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">printCoord</span><span style="color:#F6F6F4;">({ x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">100</span><span style="color:#F6F6F4;">, y</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">100</span><span style="color:#F6F6F4;"> });</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Point</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">y</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printCoord</span><span style="color:#24292E;">(</span><span style="color:#E36209;">pt</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Point</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;The coordinate&#39;s x value is &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> pt.x);</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;The coordinate&#39;s y value is &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> pt.y);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">printCoord</span><span style="color:#24292E;">({ x: </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">, y: </span><span style="color:#005CC5;">100</span><span style="color:#24292E;"> });</span></span></code></pre></div><p>就像我们在上面使用类型别名时一样，该示例就像我们使用匿名对象类型一样工作。 TypeScript 只关心我们传递给 <code>printCoord</code> 的值的 <em>结构</em>——它只关心它是否具有预期的属性。 只关心类型的结构和功能是我们将 TypeScript 称为 <em>结构类型</em> 类型系统的原因。</p><h3 id="type-和-interfaces区别" tabindex="-1">Type 和 Interfaces区别 <a class="header-anchor" href="#type-和-interfaces区别" aria-label="Permalink to &quot;Type 和 Interfaces区别&quot;">​</a></h3><p>类型别名和接口非常相似，在很多情况下您可以在它们之间自由选择。 <code>interface</code> 的几乎所有功能都在 <code>type</code> 中可用，关键区别在于：<code>type</code>无法重新添加属性，<code>interface</code>是可扩展的。</p><table class="full-width-table"><tbody><tr><th><code>Interface</code></th><th><code>Type</code></th></tr><tr><td><p>Extending an interface</p><code><pre>interface Animal {
  name: string
}<br>
interface Bear extends Animal {
  honey: boolean
}<br>
const bear = getBear() 
bear.name
bear.honey
        </pre></code></td><td><p>Extending a type via intersections</p><code><pre>type Animal = {
  name: string
}<br>
type Bear = Animal &amp; { 
  honey: boolean 
}<br>
const bear = getBear();
bear.name;
bear.honey;
        </pre></code></td></tr><tr><td><p>Adding new fields to an existing interface</p><code><pre>interface Window {
  title: string
}<br>
interface Window {
  ts: TypeScriptAPI
}<br>
const src = &#39;const a = &quot;Hello World&quot;&#39;;
window.ts.transpileModule(src, {});
        </pre></code></td><td><p>A type cannot be changed after being created</p><code><pre>type Window = {
  title: string
}<br>
type Window = {
  ts: TypeScriptAPI
}<br>
<span style="color:#A31515;"> // Error: Duplicate identifier &#39;Window&#39;.</span><br>
        </pre></code></td></tr></tbody></table><p>您将在后面的章节中了解有关这些概念的更多信息，所以如果您不能立即理解所有这些，请不要担心。</p><ul><li>在 TypeScript 4.2 版之前，类型别名 <a href="https://tinyurl.com/2jjdat8g" target="_blank" rel="noreferrer"><em>可能</em> 出现在错误消息中</a>，有时会代替等效的匿名类型（可能需要也可能不需要）。 接口将始终在错误消息中命名。</li><li>类型别名可能不参与<a href="https://tinyurl.com/2lexbu5y" target="_blank" rel="noreferrer">声明合并，但接口可以</a>。</li><li>接口只能用于<a href="https://tinyurl.com/2hxq274q" target="_blank" rel="noreferrer">声明对象的形状，而不是重命名基元</a>。</li><li>接口名称将<a href="https://tinyurl.com/2f4x6f9y" target="_blank" rel="noreferrer"><em>始终</em> 以其原始形式出现</a> 在错误消息中， <em>仅</em> 当它们按名称使用时。 大多数情况下，您可以根据个人喜好进行选择，TypeScript 会告诉您是否需要另一种声明。 如果您想要启发式方法，请使用 <code>interface</code> ；否则，您需要使用 <code>type</code> 中的功能。</li></ul><h2 id="类型断言" tabindex="-1">类型断言 <a class="header-anchor" href="#类型断言" aria-label="Permalink to &quot;类型断言&quot;">​</a></h2><p>有时，您会获得 TypeScript 无法知道的有关值类型的信息。</p><p>例如，如果您正在使用 <code>document.getElementById</code>，TypeScript 只知道这将返回几种 <code>HTMLElement</code>，但您可能知道您的页面将始终有一个带有给定 ID 的 <code>HTMLCanvasElement</code>。</p><p>在这种情况下，您可以使用 <em>类型断言</em> 来指定更具体的类型：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> myCanvas </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> document.</span><span style="color:#62E884;">getElementById</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">main_canvas</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">as</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">HTMLCanvasElement</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">myCanvas</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;main_canvas&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HTMLCanvasElement</span><span style="color:#24292E;">;</span></span></code></pre></div><p>与类型注释一样，类型断言会被编译器删除，不会影响代码的运行时行为。</p><p>您还可以使用尖括号语法（除非代码在 <code>.tsx</code> 文件中），这是等效的：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> myCanvas </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> &lt;</span><span style="color:#97E1F1;font-style:italic;">HTMLCanvasElement</span><span style="color:#F6F6F4;">&gt;document.</span><span style="color:#62E884;">getElementById</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">main_canvas</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">myCanvas</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> &lt;</span><span style="color:#6F42C1;">HTMLCanvasElement</span><span style="color:#24292E;">&gt;document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;main_canvas&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><blockquote><p>提醒：因为类型断言在编译时被移除，所以没有与类型断言关联的运行时检查。 如果类型断言错误，则不会产生异常或生成 <code>null</code>。</p></blockquote><p>TypeScript 只允许转换为类型的 <em>更具体</em> 或 <em>不具体</em> 版本的类型断言。 此规则可防止“不可能”的强制转换，例如：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// @errors: 2352</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">as</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// @errors: 2352</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">x</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">;</span></span></code></pre></div><p>有时此规则可能过于保守，并且会禁止可能有效的更复杂的强制转换。 如果发生这种情况，您可以使用两个断言，首先是“any”（或“unknown”，我们将在后面介绍），然后是所需的类型：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">declare</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> expr</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">any</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> { a</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">; b</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">; c</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;"> };</span></span>
<span class="line"><span style="color:#7B7F8B;">// ---cut---</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> a </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (expr </span><span style="color:#F286C4;">as</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">any</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">as</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">declare</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">expr</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { </span><span style="color:#E36209;">a</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; </span><span style="color:#E36209;">b</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">; </span><span style="color:#E36209;">c</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#6A737D;">// ---cut---</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">a</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (expr </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">;</span></span></code></pre></div><h2 id="字面量类型" tabindex="-1">字面量类型 <a class="header-anchor" href="#字面量类型" aria-label="Permalink to &quot;字面量类型&quot;">​</a></h2><p>除了一般类型 <code>string</code> 和 <code>number</code> 之外，我们还可以在类型位置引用具体 <code>string</code> 和 <code>number</code>类型值。</p><p>考虑这一点的一种方法是考虑 JavaScript 如何以不同的方式来声明变量。 <code>var</code> 和 <code>let</code> 都允许更改变量中保存的内容，而 <code>const</code> 则不允许。 这反映在 TypeScript 如何为文字创建类型上。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> changingString </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Hello World</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">changingString </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Olá Mundo</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#7B7F8B;">// Because \`changingString\` can represent any possible string, that</span></span>
<span class="line"><span style="color:#7B7F8B;">// is how TypeScript describes it in the type system</span></span>
<span class="line"><span style="color:#F6F6F4;">changingString;</span></span>
<span class="line"><span style="color:#7B7F8B;">// ^?</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> constantString </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Hello World</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#7B7F8B;">// Because \`constantString\` can only represent 1 possible string, it</span></span>
<span class="line"><span style="color:#7B7F8B;">// has a literal type representation</span></span>
<span class="line"><span style="color:#F6F6F4;">constantString;</span></span>
<span class="line"><span style="color:#7B7F8B;">// ^?</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> changingString </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Hello World&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">changingString </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Olá Mundo&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// Because \`changingString\` can represent any possible string, that</span></span>
<span class="line"><span style="color:#6A737D;">// is how TypeScript describes it in the type system</span></span>
<span class="line"><span style="color:#24292E;">changingString;</span></span>
<span class="line"><span style="color:#6A737D;">// ^?</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">constantString</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Hello World&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// Because \`constantString\` can only represent 1 possible string, it</span></span>
<span class="line"><span style="color:#6A737D;">// has a literal type representation</span></span>
<span class="line"><span style="color:#24292E;">constantString;</span></span>
<span class="line"><span style="color:#6A737D;">// ^?</span></span></code></pre></div><p>就其本身而言，文字类型不是很有价值：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// @errors: 2322</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#7B7F8B;">// OK</span></span>
<span class="line"><span style="color:#F6F6F4;">x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#7B7F8B;">// ...</span></span>
<span class="line"><span style="color:#F6F6F4;">x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">howdy</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// @errors: 2322</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// OK</span></span>
<span class="line"><span style="color:#24292E;">x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;howdy&quot;</span><span style="color:#24292E;">;</span></span></code></pre></div><p>拥有一个只能有一个值的变量并没有多大用处！</p><p>但是通过将文字组合成联合类型，您可以表达一个更有用的概念——例如，只接受一组特定已知值的函数：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// @errors: 2345</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">printText</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">s</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">alignment</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">left</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">right</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">center</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// ...</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#62E884;">printText</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Hello, world</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">left</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#62E884;">printText</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">G&#39;day, mate</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">centre</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// @errors: 2345</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printText</span><span style="color:#24292E;">(</span><span style="color:#E36209;">s</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">, </span><span style="color:#E36209;">alignment</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;left&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;right&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;center&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">printText</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hello, world&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;left&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">printText</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;G&#39;day, mate&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;centre&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>数字文字类型的工作方式相同：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">compare</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">a</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">b</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> -</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> a </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;"> b </span><span style="color:#F286C4;">?</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> a </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> b </span><span style="color:#F286C4;">?</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">compare</span><span style="color:#24292E;">(</span><span style="color:#E36209;">a</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">, </span><span style="color:#E36209;">b</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> -</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>当然，您可以将这些与非文字类型结合起来：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// @errors: 2345</span></span>
<span class="line"><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Options</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  width</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">configure</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Options</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">auto</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// ...</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#62E884;">configure</span><span style="color:#F6F6F4;">({ width</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">100</span><span style="color:#F6F6F4;"> });</span></span>
<span class="line"><span style="color:#62E884;">configure</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">auto</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#62E884;">configure</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">automatic</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// @errors: 2345</span></span>
<span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Options</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">width</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">configure</span><span style="color:#24292E;">(</span><span style="color:#E36209;">x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Options</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;auto&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">configure</span><span style="color:#24292E;">({ width: </span><span style="color:#005CC5;">100</span><span style="color:#24292E;"> });</span></span>
<span class="line"><span style="color:#6F42C1;">configure</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;auto&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">configure</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;automatic&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>还有一种文字类型：布尔文字。 只有两种布尔文字类型，正如您可能猜到的那样，它们是类型“true”和“false”。 <code>boolean</code> 类型本身实际上只是 union <code>true | 的别名。 假</code>。</p><h3 id="字面量推导" tabindex="-1">字面量推导 <a class="header-anchor" href="#字面量推导" aria-label="Permalink to &quot;字面量推导&quot;">​</a></h3><p>当您使用对象初始化变量时，TypeScript 假定该对象的属性稍后可能会更改值。 例如，如果您编写如下代码：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">declare</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> someCondition</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#7B7F8B;">// ---cut---</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> obj </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> { counter</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;"> };</span></span>
<span class="line"><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (someCondition) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  obj.counter </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">declare</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">someCondition</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">boolean</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// ---cut---</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">obj</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { counter: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (someCondition) {</span></span>
<span class="line"><span style="color:#24292E;">  obj.counter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>TypeScript 不会假设将 <code>1</code> 分配给之前有<code>0</code>的字段是错误的。 另一种方式是 <code>obj.counter</code> 必须具有 <code>number</code> 类型，并且不是 <code>0</code>，因为类型用于确定读写行为。</p><p>这同样适用于字符串：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// @errors: 2345</span></span>
<span class="line"><span style="color:#F286C4;">declare</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">handleRequest</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">url</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">method</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">GET</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">POST</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#7B7F8B;">// ---cut---</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> req </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> { url</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">https://example.com</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, method</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">GET</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> };</span></span>
<span class="line"><span style="color:#62E884;">handleRequest</span><span style="color:#F6F6F4;">(req.url, req.method);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// @errors: 2345</span></span>
<span class="line"><span style="color:#D73A49;">declare</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handleRequest</span><span style="color:#24292E;">(</span><span style="color:#E36209;">url</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">, </span><span style="color:#E36209;">method</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;GET&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;POST&quot;</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">void</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// ---cut---</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">req</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { url: </span><span style="color:#032F62;">&quot;https://example.com&quot;</span><span style="color:#24292E;">, method: </span><span style="color:#032F62;">&quot;GET&quot;</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#6F42C1;">handleRequest</span><span style="color:#24292E;">(req.url, req.method);</span></span></code></pre></div><p>在上面的示例中，<code>req.method</code> 被推断为 <code>string</code>，而不是 <code>&quot;GET&quot;</code>。 因为可以在创建 <code>req</code> 和调用 <code>handleRequest</code> 之间评估代码，这可能会将一个新字符串（如 <code>&quot;GUESS&quot;</code> 分配给 <code>req.method</code>，所以 TypeScript 认为此代码有错误。</p><p>有两种方法可以解决这个问题。</p><ol><li><p>您可以通过在任一位置添加类型断言来更改推断：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">declare</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">handleRequest</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">url</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">method</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">GET</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">POST</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#7B7F8B;">// ---cut---</span></span>
<span class="line"><span style="color:#7B7F8B;">// Change 1:</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> req </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> { url</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">https://example.com</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, method</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">GET</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">as</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">GET</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> };</span></span>
<span class="line"><span style="color:#7B7F8B;">// Change 2</span></span>
<span class="line"><span style="color:#62E884;">handleRequest</span><span style="color:#F6F6F4;">(req.url, req.method </span><span style="color:#F286C4;">as</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">GET</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">declare</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handleRequest</span><span style="color:#24292E;">(</span><span style="color:#E36209;">url</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">, </span><span style="color:#E36209;">method</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;GET&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;POST&quot;</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">void</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// ---cut---</span></span>
<span class="line"><span style="color:#6A737D;">// Change 1:</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">req</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { url: </span><span style="color:#032F62;">&quot;https://example.com&quot;</span><span style="color:#24292E;">, method: </span><span style="color:#032F62;">&quot;GET&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;GET&quot;</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#6A737D;">// Change 2</span></span>
<span class="line"><span style="color:#6F42C1;">handleRequest</span><span style="color:#24292E;">(req.url, req.method </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;GET&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>Change 1 means &quot;I dvert the entire object to be type literals: 更改 1 意味着“我打算让 <code>req.method</code> 始终具有_文字类型_ <code>&quot;GET&quot;</code>&quot;，防止之后可能将 <code>&quot;GUESS&quot;</code> 分配给该字段。 更改 2 表示“由于其他原因，我知道 <code>req.method</code> 的值为 <code>&quot;GET&quot;</code>&quot;。</p></li><li><p>你可以使用 <code>as const</code> 将整个对象转换为类型字面量：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">declare</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">handleRequest</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">url</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">method</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">GET</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">POST</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#7B7F8B;">// ---cut---</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> req </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> { url</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">https://example.com</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, method</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">GET</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> } </span><span style="color:#F286C4;">as</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#62E884;">handleRequest</span><span style="color:#F6F6F4;">(req.url, req.method);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">declare</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handleRequest</span><span style="color:#24292E;">(</span><span style="color:#E36209;">url</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">, </span><span style="color:#E36209;">method</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;GET&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;POST&quot;</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">void</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// ---cut---</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">req</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { url: </span><span style="color:#032F62;">&quot;https://example.com&quot;</span><span style="color:#24292E;">, method: </span><span style="color:#032F62;">&quot;GET&quot;</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6F42C1;">handleRequest</span><span style="color:#24292E;">(req.url, req.method);</span></span></code></pre></div></li></ol><p><code>as const</code> 后缀的作用类似于 <code>const</code>，但对于类型系统而言，它确保所有属性都被赋予文字类型，而不是更通用的版本，如 <code>string</code> 或 <code>number</code>。</p><h2 id="null-和-undefined" tabindex="-1"><code>null</code> 和 <code>undefined</code> <a class="header-anchor" href="#null-和-undefined" aria-label="Permalink to &quot;\`null\` 和 \`undefined\`&quot;">​</a></h2><p>JavaScript 有两个原始值用于表示值不存在或未初始化的值： <code>null</code> 和 <code>undefined</code>。</p><p>TypeScript 有两个对应的同名的类型。 这些类型的检查行为方式取决于您是否启用了 <code>strictNullChecks</code>配置选项。</p><h2 id="空值检查" tabindex="-1">空值检查 <a class="header-anchor" href="#空值检查" aria-label="Permalink to &quot;空值检查&quot;">​</a></h2><p>关闭空值检查，仍然可以正常访问可能为 <code>null</code> 或 <code>undefined</code> 的值，并且可以将值 <code>null</code> 和 <code>undefined</code> 分配给任何类型的属性 . 这类似于没有空值检查的语言（例如 C#、Java）的行为方式。 缺乏对这些值的检查往往是错误的主要来源； 我们总是建议人们打开 <code>strictNullChecks</code> 如果在他们的代码库中这样做是可行的。</p><p>开启空值检查配置项<code>strictNullChecks</code>，会对变量进行 <code>null</code> 或 <code>undefined</code> 检查 。 就像在使用可选属性之前检查 <code>undefined</code> 一样，我们可以使用 <em>narrowing</em> 来检查可能为 <code>null</code> 的值：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">doSomething</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">null</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (x </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// do nothing</span></span>
<span class="line"><span style="color:#F6F6F4;">  } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Hello, </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> x.</span><span style="color:#62E884;">toUpperCase</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doSomething</span><span style="color:#24292E;">(</span><span style="color:#E36209;">x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (x </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// do nothing</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hello, &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> x.</span><span style="color:#6F42C1;">toUpperCase</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="非空断言" tabindex="-1">非空断言 <code>!</code> <a class="header-anchor" href="#非空断言" aria-label="Permalink to &quot;非空断言 \`!\`&quot;">​</a></h3><p>TypeScript 还有一种特殊的语法，可以在不进行任何显式检查的情况下从类型中删除<code>null</code> 和 <code>undefined</code>。 在任何表达式后写 <code>!</code> 实际上是一种类型断言，即值不是 <code>null</code> 或 <code>undefined</code>：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">liveDangerously</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F286C4;">?:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">null</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// No error</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(x</span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">toFixed</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">liveDangerously</span><span style="color:#24292E;">(</span><span style="color:#E36209;">x</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// No error</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(x</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">toFixed</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>就像其他类型断言一样，这不会改变代码的运行时行为，当值不能为<code>null</code> 或 <code>undefined</code>时使用<code>!</code>很重要。</p><h4 id="bigint" tabindex="-1"><code>bigint</code> <a class="header-anchor" href="#bigint" aria-label="Permalink to &quot;\`bigint\`&quot;">​</a></h4><p>从 ES2020 开始，JavaScript 中有一个原语用于非常大的整数，<code>BigInt</code>：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// @target: es2020</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// Creating a bigint via the BigInt function</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> oneHundred</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">bigint</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">BigInt</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">100</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// Creating a BigInt via the literal syntax</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> anotherHundred</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">bigint</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">100</span><span style="color:#F286C4;">n</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// @target: es2020</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Creating a bigint via the BigInt function</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">oneHundred</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">bigint</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BigInt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Creating a BigInt via the literal syntax</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">anotherHundred</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">bigint</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#D73A49;">n</span><span style="color:#24292E;">;</span></span></code></pre></div><p>您可以在 <strong>TypeScript 3.2 发行说明</strong> 中了解有关 BigInt 的更多信息。</p><h4 id="symbol" tabindex="-1"><code>symbol</code> <a class="header-anchor" href="#symbol" aria-label="Permalink to &quot;\`symbol\`&quot;">​</a></h4><p>JavaScript原始类型，用于通过函数 <code>Symbol()</code>创建全局唯一引用：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// @errors: 2367</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> firstName </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Symbol</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">name</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> secondName </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Symbol</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">name</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (firstName </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;"> secondName) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// Can&#39;t ever happen</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// @errors: 2367</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">firstName</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">secondName</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (firstName </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> secondName) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Can&#39;t ever happen</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,146),e=[p];function t(c,r,y,F,i,E){return n(),a("div",null,e)}const C=s(o,[["render",t]]);export{u as __pageData,C as default};
