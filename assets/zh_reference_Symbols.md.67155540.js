import{_ as s,o as a,c as o,V as l}from"./chunks/framework.ced88878.js";const b=JSON.parse('{"title":"Symbols","description":"","frontmatter":{},"headers":[],"relativePath":"zh/reference/Symbols.md","lastUpdated":1682668835000}'),n={name:"zh/reference/Symbols.md"},p=l(`<h1 id="symbols" tabindex="-1">Symbols <a class="header-anchor" href="#symbols" aria-label="Permalink to &quot;Symbols&quot;">​</a></h1><h2 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h2><p>自ECMAScript 2015起，<code>symbol</code>成为了一种新的原生类型，就像<code>number</code>和<code>string</code>一样。</p><p><code>symbol</code>类型的值是通过<code>Symbol</code>构造函数创建的。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> sym1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Symbol</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> sym2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Symbol</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">key</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">// 可选的字符串key</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> sym1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> sym2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;key&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 可选的字符串key</span></span></code></pre></div><p>Symbols是不可改变且唯一的。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> sym2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Symbol</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">key</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> sym3 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Symbol</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">key</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">sym2 </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;"> sym3; </span><span style="color:#7B7F8B;">// false, symbols是唯一的</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> sym2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;key&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> sym3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;key&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">sym2 </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> sym3; </span><span style="color:#6A737D;">// false, symbols是唯一的</span></span></code></pre></div><p>像字符串一样，symbols也可以被用做对象属性的键。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> sym </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Symbol</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> obj </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    [sym]</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">value</span><span style="color:#DEE492;">&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(obj[sym]); </span><span style="color:#7B7F8B;">// &quot;value&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">sym</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    [sym]: </span><span style="color:#032F62;">&quot;value&quot;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(obj[sym]); </span><span style="color:#6A737D;">// &quot;value&quot;</span></span></code></pre></div><p>Symbols也可以与计算出的属性名声明相结合来声明对象的属性和类成员。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> getClassNameSymbol </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Symbol</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">C</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    [getClassNameSymbol](){</span></span>
<span class="line"><span style="color:#F6F6F4;">       </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">C</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> c </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">C</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> className </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> c[getClassNameSymbol](); </span><span style="color:#7B7F8B;">// &quot;C&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">getClassNameSymbol</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">C</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    [getClassNameSymbol](){</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;C&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">C</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> className </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> c[getClassNameSymbol](); </span><span style="color:#6A737D;">// &quot;C&quot;</span></span></code></pre></div><h2 id="众所周知的symbols" tabindex="-1">众所周知的Symbols <a class="header-anchor" href="#众所周知的symbols" aria-label="Permalink to &quot;众所周知的Symbols&quot;">​</a></h2><p>除了用户定义的symbols，还有一些已经众所周知的内置symbols。 内置symbols用来表示语言内部的行为。</p><p>以下为这些symbols的列表：</p><h3 id="symbol-hasinstance" tabindex="-1"><code>Symbol.hasInstance</code> <a class="header-anchor" href="#symbol-hasinstance" aria-label="Permalink to &quot;\`Symbol.hasInstance\`&quot;">​</a></h3><p>方法，会被<code>instanceof</code>运算符调用。构造器对象用来识别一个对象是否是其实例。</p><h3 id="symbol-isconcatspreadable" tabindex="-1"><code>Symbol.isConcatSpreadable</code> <a class="header-anchor" href="#symbol-isconcatspreadable" aria-label="Permalink to &quot;\`Symbol.isConcatSpreadable\`&quot;">​</a></h3><p>布尔值，表示当在一个对象上调用<code>Array.prototype.concat</code>时，这个对象的数组元素是否可展开。</p><h3 id="symbol-iterator" tabindex="-1"><code>Symbol.iterator</code> <a class="header-anchor" href="#symbol-iterator" aria-label="Permalink to &quot;\`Symbol.iterator\`&quot;">​</a></h3><p>方法，被<code>for-of</code>语句调用。返回对象的默认迭代器。</p><h3 id="symbol-match" tabindex="-1"><code>Symbol.match</code> <a class="header-anchor" href="#symbol-match" aria-label="Permalink to &quot;\`Symbol.match\`&quot;">​</a></h3><p>方法，被<code>String.prototype.match</code>调用。正则表达式用来匹配字符串。</p><h3 id="symbol-replace" tabindex="-1"><code>Symbol.replace</code> <a class="header-anchor" href="#symbol-replace" aria-label="Permalink to &quot;\`Symbol.replace\`&quot;">​</a></h3><p>方法，被<code>String.prototype.replace</code>调用。正则表达式用来替换字符串中匹配的子串。</p><h3 id="symbol-search" tabindex="-1"><code>Symbol.search</code> <a class="header-anchor" href="#symbol-search" aria-label="Permalink to &quot;\`Symbol.search\`&quot;">​</a></h3><p>方法，被<code>String.prototype.search</code>调用。正则表达式返回被匹配部分在字符串中的索引。</p><h3 id="symbol-species" tabindex="-1"><code>Symbol.species</code> <a class="header-anchor" href="#symbol-species" aria-label="Permalink to &quot;\`Symbol.species\`&quot;">​</a></h3><p>函数值，为一个构造函数。用来创建派生对象。</p><h3 id="symbol-split" tabindex="-1"><code>Symbol.split</code> <a class="header-anchor" href="#symbol-split" aria-label="Permalink to &quot;\`Symbol.split\`&quot;">​</a></h3><p>方法，被<code>String.prototype.split</code>调用。正则表达式来用分割字符串。</p><h3 id="symbol-toprimitive" tabindex="-1"><code>Symbol.toPrimitive</code> <a class="header-anchor" href="#symbol-toprimitive" aria-label="Permalink to &quot;\`Symbol.toPrimitive\`&quot;">​</a></h3><p>方法，被<code>ToPrimitive</code>抽象操作调用。把对象转换为相应的原始值。</p><h3 id="symbol-tostringtag" tabindex="-1"><code>Symbol.toStringTag</code> <a class="header-anchor" href="#symbol-tostringtag" aria-label="Permalink to &quot;\`Symbol.toStringTag\`&quot;">​</a></h3><p>方法，被内置方法<code>Object.prototype.toString</code>调用。返回创建对象时默认的字符串描述。</p><h3 id="symbol-unscopables" tabindex="-1"><code>Symbol.unscopables</code> <a class="header-anchor" href="#symbol-unscopables" aria-label="Permalink to &quot;\`Symbol.unscopables\`&quot;">​</a></h3><p>对象，它自己拥有的属性会被<code>with</code>作用域排除在外。</p>`,36),e=[p];function t(c,r,y,i,F,d){return a(),o("div",null,e)}const h=s(n,[["render",t]]);export{b as __pageData,h as default};
