import{_ as e,o as t,c as d,V as o}from"./chunks/framework.ced88878.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{"display":"Lib","oneline":"Specify a set of bundled library declaration files that describe the target runtime environment."},"headers":[],"relativePath":"zh/tsconfig-reference/options/lib.md","lastUpdated":1681915487000}'),r={name:"zh/tsconfig-reference/options/lib.md"},c=o('<p>TypeScript includes a default set of type definitions for built-in JS APIs (like <code>Math</code>), as well as type definitions for things found in browser environments (like <code>document</code>). TypeScript also includes APIs for newer JS features matching the <a href="#target"><code>target</code></a> you specify; for example the definition for <code>Map</code> is available if <a href="#target"><code>target</code></a> is <code>ES6</code> or newer.</p><p>You may want to change these for a few reasons:</p><ul><li>Your program doesn&#39;t run in a browser, so you don&#39;t want the <code>&quot;dom&quot;</code> type definitions</li><li>Your runtime platform provides certain JavaScript API objects (maybe through polyfills), but doesn&#39;t yet support the full syntax of a given ECMAScript version</li><li>You have polyfills or native implementations for some, but not all, of a higher level ECMAScript version</li></ul><p>In TypeScript 4.5, lib files can be overriden by npm modules, find out more <a href="https://devblogs.microsoft.com/typescript/announcing-typescript-4-5-beta/#supporting-lib-from-node_modules" target="_blank" rel="noreferrer">in the blog</a>.</p><h3 id="high-level-libraries" tabindex="-1">High Level libraries <a class="header-anchor" href="#high-level-libraries" aria-label="Permalink to &quot;High Level libraries&quot;">​</a></h3><table><thead><tr><th>Name</th><th>Contents</th></tr></thead><tbody><tr><td><code>ES5</code></td><td>Core definitions for all ES3 and ES5 functionality</td></tr><tr><td><code>ES2015</code></td><td>Additional APIs available in ES2015 (also known as ES6) - <code>array.find</code>, <code>Promise</code>, <code>Proxy</code>, <code>Symbol</code>, <code>Map</code>, <code>Set</code>, <code>Reflect</code>, etc.</td></tr><tr><td><code>ES6</code></td><td>Alias for &quot;ES2015&quot;</td></tr><tr><td><code>ES2016</code></td><td>Additional APIs available in ES2016 - <code>array.include</code>, etc.</td></tr><tr><td><code>ES7</code></td><td>Alias for &quot;ES2016&quot;</td></tr><tr><td><code>ES2017</code></td><td>Additional APIs available in ES2017 - <code>Object.entries</code>, <code>Object.values</code>, <code>Atomics</code>, <code>SharedArrayBuffer</code>, <code>date.formatToParts</code>, typed arrays, etc.</td></tr><tr><td><code>ES2018</code></td><td>Additional APIs available in ES2018 - <code>async</code> iterables, <code>promise.finally</code>, <code>Intl.PluralRules</code>, <code>regexp.groups</code>, etc.</td></tr><tr><td><code>ES2019</code></td><td>Additional APIs available in ES2019 - <code>array.flat</code>, <code>array.flatMap</code>, <code>Object.fromEntries</code>, <code>string.trimStart</code>, <code>string.trimEnd</code>, etc.</td></tr><tr><td><code>ES2020</code></td><td>Additional APIs available in ES2020 - <code>string.matchAll</code>, etc.</td></tr><tr><td><code>ES2021</code></td><td>Additional APIs available in ES2021 - <code>promise.any</code>, <code>string.replaceAll</code> etc.</td></tr><tr><td><code>ESNext</code></td><td>Additional APIs available in ESNext - This changes as the JavaScript specification evolves</td></tr><tr><td><code>DOM</code></td><td><a href="https://developer.mozilla.org/docs/Glossary/DOM" target="_blank" rel="noreferrer">DOM</a> definitions - <code>window</code>, <code>document</code>, etc.</td></tr><tr><td><code>WebWorker</code></td><td>APIs available in <a href="https://developer.mozilla.org/docs/Web/API/Web_Workers_API/Using_web_workers" target="_blank" rel="noreferrer">WebWorker</a> contexts</td></tr><tr><td><code>ScriptHost</code></td><td>APIs for the <a href="https://wikipedia.org/wiki/Windows_Script_Host" target="_blank" rel="noreferrer">Windows Script Hosting System</a></td></tr></tbody></table><h3 id="individual-library-components" tabindex="-1">Individual library components <a class="header-anchor" href="#individual-library-components" aria-label="Permalink to &quot;Individual library components&quot;">​</a></h3><table><thead><tr><th>Name</th></tr></thead><tbody><tr><td><code>DOM.Iterable</code></td></tr><tr><td><code>ES2015.Core</code></td></tr><tr><td><code>ES2015.Collection</code></td></tr><tr><td><code>ES2015.Generator</code></td></tr><tr><td><code>ES2015.Iterable</code></td></tr><tr><td><code>ES2015.Promise</code></td></tr><tr><td><code>ES2015.Proxy</code></td></tr><tr><td><code>ES2015.Reflect</code></td></tr><tr><td><code>ES2015.Symbol</code></td></tr><tr><td><code>ES2015.Symbol.WellKnown</code></td></tr><tr><td><code>ES2016.Array.Include</code></td></tr><tr><td><code>ES2017.object</code></td></tr><tr><td><code>ES2017.Intl</code></td></tr><tr><td><code>ES2017.SharedMemory</code></td></tr><tr><td><code>ES2017.String</code></td></tr><tr><td><code>ES2017.TypedArrays</code></td></tr><tr><td><code>ES2018.Intl</code></td></tr><tr><td><code>ES2018.Promise</code></td></tr><tr><td><code>ES2018.RegExp</code></td></tr><tr><td><code>ES2019.Array</code></td></tr><tr><td><code>ES2019.Object</code></td></tr><tr><td><code>ES2019.String</code></td></tr><tr><td><code>ES2019.Symbol</code></td></tr><tr><td><code>ES2020.String</code></td></tr><tr><td><code>ES2020.Symbol.wellknown</code></td></tr><tr><td><code>ES2021.Promise</code></td></tr><tr><td><code>ES2021.String</code></td></tr><tr><td><code>ES2021.Weakref</code></td></tr><tr><td><code>ESNext.AsyncIterable</code></td></tr><tr><td><code>ESNext.Array</code></td></tr><tr><td><code>ESNext.Intl</code></td></tr><tr><td><code>ESNext.Symbol</code></td></tr></tbody></table><p>This list may be out of date, you can see the full list in the <a href="https://github.com/microsoft/TypeScript/tree/main/lib" target="_blank" rel="noreferrer">TypeScript source code</a>.</p>',9),a=[c];function i(l,n,s,S,p,b){return t(),d("div",null,a)}const m=e(r,[["render",i]]);export{h as __pageData,m as default};
