import{_ as s,o as n,c as a,V as l}from"./chunks/framework.ced88878.js";const C=JSON.parse('{"title":"React","description":"","frontmatter":{},"headers":[],"relativePath":"zh/tutorials/React.md","lastUpdated":1682670826000}'),p={name:"zh/tutorials/React.md"},o=l(`<h1 id="react" tabindex="-1">React <a class="header-anchor" href="#react" aria-label="Permalink to &quot;React&quot;">​</a></h1><p>这篇快速上手指南会教你如何将TypeScript与<a href="https://reactjs.org/" target="_blank" rel="noreferrer">React</a>结合起来使用。 在最后，你将学到：</p><ul><li>使用TypeScript和React创建工程</li><li>使用<a href="https://github.com/palantir/tslint" target="_blank" rel="noreferrer">TSLint</a>进行代码检查</li><li>使用<a href="https://facebook.github.io/jest/" target="_blank" rel="noreferrer">Jest</a>和<a href="http://airbnb.io/enzyme/" target="_blank" rel="noreferrer">Enzyme</a>进行测试，以及</li><li>使用<a href="https://github.com/reactjs/react-redux" target="_blank" rel="noreferrer">Redux</a>管理状态</li></ul><p>我们会使用<a href="https://github.com/facebookincubator/create-react-app" target="_blank" rel="noreferrer">create-react-app</a>工具快速搭建工程环境。</p><p>这里假设你已经在使用<a href="https://nodejs.org/" target="_blank" rel="noreferrer">Node.js</a>和<a href="https://www.npmjs.com/" target="_blank" rel="noreferrer">npm</a>。 并且已经了解了<a href="https://reactjs.org/docs/hello-world.html" target="_blank" rel="noreferrer">React的基础知识</a>。</p><h2 id="创建新工程" tabindex="-1">创建新工程 <a class="header-anchor" href="#创建新工程" aria-label="Permalink to &quot;创建新工程&quot;">​</a></h2><p>让我们首先创建一个叫做<code>my-app</code>的新工程：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">npx create-react-app my-app --template typescript</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">npx create-react-app my-app --template typescript</span></span></code></pre></div><p><a href="https://www.npmjs.com/package/react-scripts-ts" target="_blank" rel="noreferrer">react-scripts-ts</a>是一系列适配器，它利用标准的create-react-app工程管道并把TypeScript混入进来。</p><p>此时的工程结构应如下所示：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">my-app/</span></span>
<span class="line"><span style="color:#f6f6f4;">├─ .gitignore</span></span>
<span class="line"><span style="color:#f6f6f4;">├─ node_modules/</span></span>
<span class="line"><span style="color:#f6f6f4;">├─ public/</span></span>
<span class="line"><span style="color:#f6f6f4;">├─ src/</span></span>
<span class="line"><span style="color:#f6f6f4;">│  └─ ...</span></span>
<span class="line"><span style="color:#f6f6f4;">├─ package.json</span></span>
<span class="line"><span style="color:#f6f6f4;">├─ tsconfig.json</span></span>
<span class="line"><span style="color:#f6f6f4;">└─ tslint.json</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">my-app/</span></span>
<span class="line"><span style="color:#24292e;">├─ .gitignore</span></span>
<span class="line"><span style="color:#24292e;">├─ node_modules/</span></span>
<span class="line"><span style="color:#24292e;">├─ public/</span></span>
<span class="line"><span style="color:#24292e;">├─ src/</span></span>
<span class="line"><span style="color:#24292e;">│  └─ ...</span></span>
<span class="line"><span style="color:#24292e;">├─ package.json</span></span>
<span class="line"><span style="color:#24292e;">├─ tsconfig.json</span></span>
<span class="line"><span style="color:#24292e;">└─ tslint.json</span></span></code></pre></div><p>注意：</p><ul><li><code>tsconfig.json</code>包含了工程里TypeScript特定的选项。</li><li><code>tslint.json</code>保存了要使用的代码检查器的设置，<a href="https://github.com/palantir/tslint" target="_blank" rel="noreferrer">TSLint</a>。</li><li><code>package.json</code>包含了依赖，还有一些命令的快捷方式，如测试命令，预览命令和发布应用的命令。</li><li><code>public</code>包含了静态资源如HTML页面或图片。除了<code>index.html</code>文件外，其它的文件都可以删除。</li><li><code>src</code>包含了TypeScript和CSS源码。<code>index.tsx</code>是强制使用的入口文件。</li></ul><h2 id="运行工程" tabindex="-1">运行工程 <a class="header-anchor" href="#运行工程" aria-label="Permalink to &quot;运行工程&quot;">​</a></h2><p>通过下面的方式即可轻松地运行这个工程。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">npm </span><span style="color:#E7EE98;">run</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">start</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">start</span></span></code></pre></div><p>它会执行<code>package.json</code>里面指定的<code>start</code>命令，并且会启动一个服务器，当我们保存文件时还会自动刷新页面。 通常这个服务器的地址是<code>http://localhost:3000</code>，页面应用会被自动地打开。</p><p>它会保持监听以方便我们快速地预览改动。</p><h2 id="测试工程" tabindex="-1">测试工程 <a class="header-anchor" href="#测试工程" aria-label="Permalink to &quot;测试工程&quot;">​</a></h2><p>测试也仅仅是一行命令的事儿：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">npm </span><span style="color:#E7EE98;">run</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">test</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span></span></code></pre></div><p>这个命令会运行Jest，一个非常好用的测试工具，它会运行所有扩展名是<code>.test.ts</code>或<code>.spec.ts</code>的文件。 好比是<code>npm run start</code>命令，当检测到有改动的时候Jest会自动地运行。 如果喜欢的话，你还可以同时运行<code>npm run start</code>和<code>npm run test</code>，这样你就可以在预览的同时进行测试。</p><h2 id="生成生产环境的构建版本" tabindex="-1">生成生产环境的构建版本 <a class="header-anchor" href="#生成生产环境的构建版本" aria-label="Permalink to &quot;生成生产环境的构建版本&quot;">​</a></h2><p>在使用<code>npm run start</code>运行工程的时候，我们并没有生成一个优化过的版本。 通常我们想给用户一个运行的尽可能快并在体积上尽可能小的代码。 像压缩这样的优化方法可以做到这一点，但是总是要耗费更多的时间。 我们把这样的构建版本称做“生产环境”版本（与开发版本相对）。</p><p>要执行生产环境的构建，可以运行如下命令：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">npm </span><span style="color:#E7EE98;">run</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">build</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">build</span></span></code></pre></div><p>这会相应地创建优化过的JS和CSS文件，<code>./build/static/js</code>和<code>./build/static/css</code>。</p><p>大多数情况下你不需要生成生产环境的构建版本， 但它可以帮助你衡量应用最终版本的体积大小。</p><h2 id="创建一个组件" tabindex="-1">创建一个组件 <a class="header-anchor" href="#创建一个组件" aria-label="Permalink to &quot;创建一个组件&quot;">​</a></h2><p>下面我们将要创建一个<code>Hello</code>组件。 这个组件接收任意一个我们想对之打招呼的名字（我们把它叫做<code>name</code>），并且有一个可选数量的感叹号做为结尾（通过<code>enthusiasmLevel</code>）。</p><p>若我们这样写<code>&lt;Hello name=&quot;Daniel&quot; enthusiasmLevel={3} /&gt;</code>，这个组件大至会渲染成<code>&lt;div&gt;Hello Daniel!!!&lt;/div&gt;</code>。 如果没指定<code>enthusiasmLevel</code>，组件将默认显示一个感叹号。 若<code>enthusiasmLevel</code>为<code>0</code>或负值将抛出一个错误。</p><p>下面来写一下<code>Hello.tsx</code>：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// src/components/Hello.tsx</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">as</span><span style="color:#F6F6F4;"> React </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">react</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Props</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  name</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  enthusiasmLevel</span><span style="color:#F286C4;">?:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Hello</span><span style="color:#F6F6F4;">({ </span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">enthusiasmLevel</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;"> }</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Props</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (enthusiasmLevel </span><span style="color:#F286C4;">&lt;=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">throw</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Error</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">You could be a little more enthusiastic. :D</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> (</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">div className</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">div className</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">greeting</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        Hello {</span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F6F6F4;"> + </span><span style="color:#FFB86C;font-style:italic;">getExclamationMarks</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">enthusiasmLevel</span><span style="color:#F6F6F4;">)}</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">&lt;/</span><span style="color:#F6F6F4;">div</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">&lt;/</span><span style="color:#F6F6F4;">div</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">  );</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">default</span><span style="color:#F6F6F4;"> Hello;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// helpers</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getExclamationMarks</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">numChars</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Array</span><span style="color:#F6F6F4;">(numChars </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">).</span><span style="color:#62E884;">join</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">!</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// src/components/Hello.tsx</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> React </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;react&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Props</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">enthusiasmLevel</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Hello</span><span style="color:#24292E;">({ </span><span style="color:#E36209;">name</span><span style="color:#24292E;">, </span><span style="color:#E36209;">enthusiasmLevel</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> }</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Props</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (enthusiasmLevel </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;You could be a little more enthusiastic. :D&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">div className</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">div className</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;greeting&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        Hello {</span><span style="color:#E36209;">name</span><span style="color:#24292E;"> + </span><span style="color:#E36209;">getExclamationMarks</span><span style="color:#24292E;">(</span><span style="color:#E36209;">enthusiasmLevel</span><span style="color:#24292E;">)}</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">div</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">div</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> Hello;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// helpers</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getExclamationMarks</span><span style="color:#24292E;">(</span><span style="color:#E36209;">numChars</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Array</span><span style="color:#24292E;">(numChars </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;!&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>注意我们定义了一个类型<code>Props</code>，它指定了我们组件要用到的属性。 <code>name</code>是必需的且为<code>string</code>类型，同时<code>enthusiasmLevel</code>是可选的且为<code>number</code>类型（你可以通过名字后面加<code>?</code>为指定可选参数）。</p><p>我们创建了一个函数组件<code>Hello</code>。 具体来讲，<code>Hello</code>是一个函数，接收一个<code>Props</code>对象并拆解它。 如果<code>Props</code>对象里没有设置<code>enthusiasmLevel</code>，默认值为<code>1</code>。</p><p>使用函数是React中定义组件的<a href="https://reactjs.org/docs/components-and-props.html#functional-and-class-components" target="_blank" rel="noreferrer">两种方式</a>之一。 如果你喜欢的话，也_可以_通过类的方式定义：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Hello</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">React</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">Component</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">Props</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">object</span><span style="color:#F6F6F4;">&gt; {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">render</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> { name, enthusiasmLevel </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;"> } </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.props;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (enthusiasmLevel </span><span style="color:#F286C4;">&lt;=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">throw</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Error</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">You could be a little more enthusiastic. :D</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> (</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">div className</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">div className</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">greeting</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">          Hello {</span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F6F6F4;"> + </span><span style="color:#FFB86C;font-style:italic;">getExclamationMarks</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">enthusiasmLevel</span><span style="color:#F6F6F4;">)}</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">&lt;/</span><span style="color:#F6F6F4;">div</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">&lt;/</span><span style="color:#F6F6F4;">div</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    );</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Hello</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">React</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Component</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Props</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">object</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">name</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">enthusiasmLevel</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.props;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (enthusiasmLevel </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;You could be a little more enthusiastic. :D&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">div className</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">div className</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;greeting&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">          Hello {</span><span style="color:#E36209;">name</span><span style="color:#24292E;"> + </span><span style="color:#E36209;">getExclamationMarks</span><span style="color:#24292E;">(</span><span style="color:#E36209;">enthusiasmLevel</span><span style="color:#24292E;">)}</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">div</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">div</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    );</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>当我们的<a href="https://reactjs.org/docs/state-and-lifecycle.html" target="_blank" rel="noreferrer">组件具有某些状态</a>的时候，使用类的方式是很有用处的。 但在这个例子里我们不需要考虑状态 - 事实上，在<code>React.Component&lt;Props, object&gt;</code>我们把状态指定为了<code>object</code>，因此使用函数组件更简洁。 当在创建可重用的通用UI组件的时候，在表现层使用组件局部状态比较适合。 针对我们应用的生命周期，我们会审视应用是如何通过Redux轻松地管理普通状态的。</p><p>现在我们已经写好了组件，让我们仔细看看<code>index.tsx</code>，把<code>&lt;App /&gt;</code>替换成<code>&lt;Hello ... /&gt;</code>。</p><p>首先我们在文件头部导入它：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> Hello </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">./components/Hello</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Hello </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./components/Hello&#39;</span><span style="color:#24292E;">;</span></span></code></pre></div><p>然后修改<code>render</code>调用：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">ReactDOM.</span><span style="color:#62E884;">render</span><span style="color:#F6F6F4;">(</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">Hello name</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">TypeScript</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> enthusiasmLevel</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">{</span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">} </span><span style="color:#F286C4;">/&gt;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  document.</span><span style="color:#62E884;">getElementById</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">root</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">as</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">HTMLElement</span></span>
<span class="line"><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ReactDOM.</span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Hello name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;TypeScript&quot;</span><span style="color:#24292E;"> enthusiasmLevel</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">} </span><span style="color:#D73A49;">/&gt;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;root&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HTMLElement</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="类型断言" tabindex="-1">类型断言 <a class="header-anchor" href="#类型断言" aria-label="Permalink to &quot;类型断言&quot;">​</a></h3><p>这里还有一点要指出，就是最后一行<code>document.getElementById(&#39;root&#39;) as HTMLElement</code>。 这个语法叫做_类型断言_，有时也叫做_转换_。 当你比类型检查器更清楚一个表达式的类型的时候，你可以通过这种方式通知TypeScript。</p><p>这里，我们之所以这么做是因为<code>getElementById</code>的返回值类型是<code>HTMLElement | null</code>。 简单地说，<code>getElementById</code>返回<code>null</code>是当无法找对对应<code>id</code>元素的时候。 我们假设<code>getElementById</code>总是成功的，因此我们要使用<code>as</code>语法告诉TypeScript这点。</p><p>TypeScript还有一种感叹号（<code>!</code>）结尾的语法，它会从前面的表达式里移除<code>null</code>和<code>undefined</code>。 所以我们也_可以_写成<code>document.getElementById(&#39;root&#39;)!</code>，但在这里我们想写的更清楚些。</p><h2 id="添加样式" tabindex="-1">😎添加样式 <a class="header-anchor" href="#添加样式" aria-label="Permalink to &quot;:sunglasses:添加样式&quot;">​</a></h2><p>通过我们的设置为一个组件添加样式很容易。 若要设置<code>Hello</code>组件的样式，我们可以创建这样一个CSS文件<code>src/components/Hello.css</code>。</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;font-style:italic;">.hello</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#97E1F1;">text-align</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">center</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#97E1F1;">margin</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">20</span><span style="color:#F286C4;">px</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#97E1F1;">font-size</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">48</span><span style="color:#F286C4;">px</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#97E1F1;">font-family</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Segoe UI</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">Tahoma</span><span style="color:#F6F6F4;">, Geneva, </span><span style="color:#BF9EEE;">Verdana</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">sans-serif</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;font-style:italic;">.hello</span><span style="color:#F286C4;"> button</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;">margin-left</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">25</span><span style="color:#F286C4;">px</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;">margin-right</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">25</span><span style="color:#F286C4;">px</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;">font-size</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">40</span><span style="color:#F286C4;">px</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;">min-width</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">50</span><span style="color:#F286C4;">px</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">.hello</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">text-align</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">center</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">margin</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">20</span><span style="color:#D73A49;">px</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">font-size</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">48</span><span style="color:#D73A49;">px</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">font-family</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;Segoe UI&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">Tahoma</span><span style="color:#24292E;">, Geneva, </span><span style="color:#005CC5;">Verdana</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">sans-serif</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">.hello</span><span style="color:#24292E;"> </span><span style="color:#22863A;">button</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">margin-left</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">25</span><span style="color:#D73A49;">px</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">margin-right</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">25</span><span style="color:#D73A49;">px</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">font-size</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">40</span><span style="color:#D73A49;">px</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">min-width</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">50</span><span style="color:#D73A49;">px</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>create-react-app</code>包含的工具（Webpack和一些加载器）允许我们导入样式表文件。 当我们构建应用的时候，所有导入的<code>.css</code>文件会被拼接成一个输出文件。 因此在<code>src/components/Hello.tsx</code>，我们需要添加如下导入语句。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">./Hello.css</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./Hello.css&#39;</span><span style="color:#24292E;">;</span></span></code></pre></div><h2 id="使用jest编写测试" tabindex="-1">使用Jest编写测试 <a class="header-anchor" href="#使用jest编写测试" aria-label="Permalink to &quot;使用Jest编写测试&quot;">​</a></h2><p>如果你没使用过Jest，你可能先要把它安装为开发依赖项。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">npm </span><span style="color:#E7EE98;">install</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">-D</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">jest</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">jest-cli</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">jest-config</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-D</span><span style="color:#24292E;"> </span><span style="color:#032F62;">jest</span><span style="color:#24292E;"> </span><span style="color:#032F62;">jest-cli</span><span style="color:#24292E;"> </span><span style="color:#032F62;">jest-config</span></span></code></pre></div><p>我们对<code>Hello</code>组件有一些假设。 让我们在此重申一下：</p><blockquote><ul><li>当这样写<code>&lt;Hello name=&quot;Daniel&quot; enthusiasmLevel={3} /&gt;</code>时，组件应被渲染成<code>&lt;div&gt;Hello Daniel!!!&lt;/div&gt;</code>。</li><li>若未指定<code>enthusiasmLevel</code>，组件应默认显示一个感叹号。</li><li>若<code>enthusiasmLevel</code>为<code>0</code>或负值，它应抛出一个错误。</li></ul></blockquote><p>我们将针对这些需求为组件写一些注释。</p><p>但首先，我们要安装Enzyme。 <a href="http://airbnb.io/enzyme/" target="_blank" rel="noreferrer">Enzyme</a>是React生态系统里一个通用工具，它方便了针对组件的行为编写测试。 默认地，我们的应用包含了一个叫做jsdom的库，它允许我们模拟DOM以及在非浏览器的环境下测试运行时的行为。 Enzyme与此类似，但是是基于jsdom的，并且方便我们查询组件。</p><p>让我们把它安装为开发依赖项。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">npm </span><span style="color:#E7EE98;">install</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">-D</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">enzyme</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">@types/enzyme</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">enzyme-adapter-react-</span><span style="color:#BF9EEE;">16</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">@types/enzyme-adapter-react-</span><span style="color:#BF9EEE;">16</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-D</span><span style="color:#24292E;"> </span><span style="color:#032F62;">enzyme</span><span style="color:#24292E;"> </span><span style="color:#032F62;">@types/enzyme</span><span style="color:#24292E;"> </span><span style="color:#032F62;">enzyme-adapter-react-</span><span style="color:#005CC5;">16</span><span style="color:#24292E;"> </span><span style="color:#032F62;">@types/enzyme-adapter-react-</span><span style="color:#005CC5;">16</span></span></code></pre></div><p>如果你的react版本低于15.5.0，还需安装如下</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">npm </span><span style="color:#E7EE98;">install</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">-D</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">react-addons-test-utils</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-D</span><span style="color:#24292E;"> </span><span style="color:#032F62;">react-addons-test-utils</span></span></code></pre></div><p>注意我们同时安装了<code>enzyme</code>和<code>@types/enzyme</code>。 <code>enzyme</code>包指的是包含了实际运行的JavaScript代码包，而<code>@types/enzyme</code>则包含了声明文件（<code>.d.ts</code>文件）的包，以便TypeScript能够了解该如何使用Enzyme。 你可以在<a href="https://www.typescriptlang.org/docs/handbook/declaration-files/consumption.html" target="_blank" rel="noreferrer">这里</a>了解更多关于<code>@types</code>包的信息。</p><p>我们还需要安装<code>enzyme-adapter</code>和<code>react-addons-test-utils</code>。 它们是使用<code>enzyme</code>所需要安装的包，前者作为配置适配器是必须的，而后者若采用的React版本在15.5.0之上则毋需安装。</p><p>现在我们已经设置好了Enzyme，下面开始编写测试！ 先创建一个文件<code>src/components/Hello.test.tsx</code>，与先前的<code>Hello.tsx</code>文件放在一起。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// src/components/Hello.test.tsx</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">as</span><span style="color:#F6F6F4;"> React </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">react</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">as</span><span style="color:#F6F6F4;"> enzyme </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">enzyme</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">as</span><span style="color:#F6F6F4;"> Adapter </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">enzyme-adapter-react-16</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> Hello </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">./Hello</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">enzyme.</span><span style="color:#62E884;">configure</span><span style="color:#F6F6F4;">({ adapter</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Adapter</span><span style="color:#F6F6F4;">() });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">it</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">renders the correct text when no enthusiasm level is given</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, () </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> hello </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> enzyme.</span><span style="color:#62E884;">shallow</span><span style="color:#F6F6F4;">(&lt;</span><span style="color:#97E1F1;font-style:italic;">Hello</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">name</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Daniel</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> /&gt;);</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">expect</span><span style="color:#F6F6F4;">(hello.</span><span style="color:#62E884;">find</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">.greeting</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">).</span><span style="color:#62E884;">text</span><span style="color:#F6F6F4;">()).</span><span style="color:#62E884;">toEqual</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Hello Daniel!</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">it</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">renders the correct text with an explicit enthusiasm of 1</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, () </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> hello </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> enzyme.</span><span style="color:#62E884;">shallow</span><span style="color:#F6F6F4;">(&lt;</span><span style="color:#97E1F1;font-style:italic;">Hello</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">name</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Daniel</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">enthusiasmLevel</span><span style="color:#F6F6F4;">={</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">}/&gt;);</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">expect</span><span style="color:#F6F6F4;">(hello.</span><span style="color:#62E884;">find</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">.greeting</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">).</span><span style="color:#62E884;">text</span><span style="color:#F6F6F4;">()).</span><span style="color:#62E884;">toEqual</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Hello Daniel!</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">it</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">renders the correct text with an explicit enthusiasm level of 5</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, () </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> hello </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> enzyme.</span><span style="color:#62E884;">shallow</span><span style="color:#F6F6F4;">(&lt;</span><span style="color:#97E1F1;font-style:italic;">Hello</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">name</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Daniel</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">enthusiasmLevel</span><span style="color:#F6F6F4;">={</span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">} /&gt;);</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">expect</span><span style="color:#F6F6F4;">(hello.</span><span style="color:#62E884;">find</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">.greeting</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">).</span><span style="color:#62E884;">text</span><span style="color:#F6F6F4;">()).</span><span style="color:#62E884;">toEqual</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Hello Daniel!!!!!</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">it</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">throws when the enthusiasm level is 0</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, () </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">expect</span><span style="color:#F6F6F4;">(() </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    enzyme.</span><span style="color:#62E884;">shallow</span><span style="color:#F6F6F4;">(&lt;</span><span style="color:#97E1F1;font-style:italic;">Hello</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">name</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Daniel</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">enthusiasmLevel</span><span style="color:#F6F6F4;">={</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">} /&gt;);</span></span>
<span class="line"><span style="color:#F6F6F4;">  }).</span><span style="color:#62E884;">toThrow</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">it</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">throws when the enthusiasm level is negative</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, () </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">expect</span><span style="color:#F6F6F4;">(() </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    enzyme.</span><span style="color:#62E884;">shallow</span><span style="color:#F6F6F4;">(&lt;</span><span style="color:#97E1F1;font-style:italic;">Hello</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">name</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Daniel</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">enthusiasmLevel</span><span style="color:#F6F6F4;">={-</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">} /&gt;);</span></span>
<span class="line"><span style="color:#F6F6F4;">  }).</span><span style="color:#62E884;">toThrow</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// src/components/Hello.test.tsx</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> React </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;react&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> enzyme </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;enzyme&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> Adapter </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;enzyme-adapter-react-16&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Hello </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./Hello&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">enzyme.</span><span style="color:#6F42C1;">configure</span><span style="color:#24292E;">({ adapter: </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Adapter</span><span style="color:#24292E;">() });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">it</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;renders the correct text when no enthusiasm level is given&#39;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">hello</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> enzyme.</span><span style="color:#6F42C1;">shallow</span><span style="color:#24292E;">(&lt;</span><span style="color:#6F42C1;">Hello</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&#39;Daniel&#39;</span><span style="color:#24292E;"> /&gt;);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(hello.</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;.greeting&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">text</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">toEqual</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Hello Daniel!&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">it</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;renders the correct text with an explicit enthusiasm of 1&#39;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">hello</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> enzyme.</span><span style="color:#6F42C1;">shallow</span><span style="color:#24292E;">(&lt;</span><span style="color:#6F42C1;">Hello</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&#39;Daniel&#39;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">enthusiasmLevel</span><span style="color:#24292E;">={</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">}/&gt;);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(hello.</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;.greeting&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">text</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">toEqual</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Hello Daniel!&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">it</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;renders the correct text with an explicit enthusiasm level of 5&#39;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">hello</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> enzyme.</span><span style="color:#6F42C1;">shallow</span><span style="color:#24292E;">(&lt;</span><span style="color:#6F42C1;">Hello</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&#39;Daniel&#39;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">enthusiasmLevel</span><span style="color:#24292E;">={</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">} /&gt;);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(hello.</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;.greeting&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">text</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">toEqual</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Hello Daniel!!!!!&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">it</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;throws when the enthusiasm level is 0&#39;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    enzyme.</span><span style="color:#6F42C1;">shallow</span><span style="color:#24292E;">(&lt;</span><span style="color:#6F42C1;">Hello</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&#39;Daniel&#39;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">enthusiasmLevel</span><span style="color:#24292E;">={</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">} /&gt;);</span></span>
<span class="line"><span style="color:#24292E;">  }).</span><span style="color:#6F42C1;">toThrow</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">it</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;throws when the enthusiasm level is negative&#39;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    enzyme.</span><span style="color:#6F42C1;">shallow</span><span style="color:#24292E;">(&lt;</span><span style="color:#6F42C1;">Hello</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&#39;Daniel&#39;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">enthusiasmLevel</span><span style="color:#24292E;">={-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">} /&gt;);</span></span>
<span class="line"><span style="color:#24292E;">  }).</span><span style="color:#6F42C1;">toThrow</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>这些测试都十分基础，但你可以从中得到启发。</p><h2 id="添加state管理" tabindex="-1">添加state管理 <a class="header-anchor" href="#添加state管理" aria-label="Permalink to &quot;添加state管理&quot;">​</a></h2><p>到此为止，如果你使用React的目的是只获取一次数据并显示，那么你已经完成了。 但是如果你想开发一个可以交互的应用，那么你需要添加state管理。</p><h3 id="state管理概述" tabindex="-1">state管理概述 <a class="header-anchor" href="#state管理概述" aria-label="Permalink to &quot;state管理概述&quot;">​</a></h3><p>React本身就是一个适合于创建可组合型视图的库。 但是，React并没有任何在应用间同步数据的功能。 就React组件而言，数据是通过每个元素上指定的props向子元素传递。</p><p>因为React本身并没有提供内置的state管理功能，React社区选择了Redux和MobX库。</p><p><a href="http://redux.js.org" target="_blank" rel="noreferrer">Redux</a>依靠一个统一且不可变的数据存储来同步数据，并且更新那里的数据时会触发应用的更新渲染。 state的更新是以一种不可变的方式进行，它会发布一条明确的action消息，这个消息必须被reducer函数处理。 由于使用了这样明确的方式，很容易弄清楚一个action是如何影响程序的state。</p><p><a href="https://mobx.js.org/" target="_blank" rel="noreferrer">MobX</a>借助于函数式响应型模式，state被包装在了可观察对象里，并通过props传递。 通过将state标记为可观察的，即可在所有观察者之间保持state的同步性。 另一个好处是，这个库已经使用TypeScript实现了。</p><p>这两者各有优缺点。 但Redux使用得更广泛，因此在这篇教程里，我们主要看如何使用Redux； 但是也鼓励大家两者都去了解一下。</p><p>后面的小节学习曲线比较陡。 因此强烈建议大家先去<a href="http://redux.js.org/" target="_blank" rel="noreferrer">熟悉一下Redux</a>。</p><h3 id="设置actions" tabindex="-1">设置actions <a class="header-anchor" href="#设置actions" aria-label="Permalink to &quot;设置actions&quot;">​</a></h3><p>只有当应用里的state会改变的时候，我们才需要去添加Redux。 我们需要一个action的来源，它将触发改变。 它可以是一个定时器或者UI上的一个按钮。</p><p>为此，我们将增加两个按钮来控制<code>Hello</code>组件的感叹级别。</p><h3 id="安装redux" tabindex="-1">安装Redux <a class="header-anchor" href="#安装redux" aria-label="Permalink to &quot;安装Redux&quot;">​</a></h3><p>安装<code>redux</code>和<code>react-redux</code>以及它们的类型文件做为依赖。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">npm </span><span style="color:#E7EE98;">install</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">-S</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">redux</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">react-redux</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">@types/react-redux</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-S</span><span style="color:#24292E;"> </span><span style="color:#032F62;">redux</span><span style="color:#24292E;"> </span><span style="color:#032F62;">react-redux</span><span style="color:#24292E;"> </span><span style="color:#032F62;">@types/react-redux</span></span></code></pre></div><p>这里我们不需要安装<code>@types/redux</code>，因为Redux已经自带了声明文件（<code>.d.ts</code>文件）。</p><h3 id="定义应用的状态" tabindex="-1">定义应用的状态 <a class="header-anchor" href="#定义应用的状态" aria-label="Permalink to &quot;定义应用的状态&quot;">​</a></h3><p>我们需要定义Redux保存的state的结构。 创建<code>src/types/index.tsx</code>文件，它保存了类型的定义，我们在整个程序里都可能用到。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// src/types/index.tsx</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">StoreState</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    languageName</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    enthusiasmLevel</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// src/types/index.tsx</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StoreState</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">languageName</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">enthusiasmLevel</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里我们想让<code>languageName</code>表示应用使用的编程语言（例如，TypeScript或者JavaScript），<code>enthusiasmLevel</code>是可变的。 在写我们的第一个容器的时候，就会明白为什么要令state与props稍有不同。</p><h3 id="添加actions" tabindex="-1">添加actions <a class="header-anchor" href="#添加actions" aria-label="Permalink to &quot;添加actions&quot;">​</a></h3><p>下面我们创建这个应用将要响应的消息类型，<code>src/constants/index.tsx</code>。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// src/constants/index.tsx</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> INCREMENT_ENTHUSIASM </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">INCREMENT_ENTHUSIASM</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">INCREMENT_ENTHUSIASM</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">typeof</span><span style="color:#F6F6F4;"> INCREMENT_ENTHUSIASM;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> DECREMENT_ENTHUSIASM </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">DECREMENT_ENTHUSIASM</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">DECREMENT_ENTHUSIASM</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">typeof</span><span style="color:#F6F6F4;"> DECREMENT_ENTHUSIASM;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// src/constants/index.tsx</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">INCREMENT_ENTHUSIASM</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;INCREMENT_ENTHUSIASM&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">INCREMENT_ENTHUSIASM</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">INCREMENT_ENTHUSIASM</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">DECREMENT_ENTHUSIASM</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;DECREMENT_ENTHUSIASM&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DECREMENT_ENTHUSIASM</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">DECREMENT_ENTHUSIASM</span><span style="color:#24292E;">;</span></span></code></pre></div><p>这里的<code>const</code>/<code>type</code>模式允许我们以容易访问和重构的方式使用TypeScript的字符串字面量类型。</p><p>接下来，我们创建一些actions以及创建这些actions的函数，<code>src/actions/index.tsx</code>。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">as</span><span style="color:#F6F6F4;"> constants </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">../constants</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">IncrementEnthusiasm</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    type</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">constants</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">INCREMENT_ENTHUSIASM</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">DecrementEnthusiasm</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    type</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">constants</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">DECREMENT_ENTHUSIASM</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">EnthusiasmAction</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">IncrementEnthusiasm</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">DecrementEnthusiasm</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">incrementEnthusiasm</span><span style="color:#F6F6F4;">()</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">IncrementEnthusiasm</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        type</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> constants.</span><span style="color:#BF9EEE;">INCREMENT_ENTHUSIASM</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">decrementEnthusiasm</span><span style="color:#F6F6F4;">()</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">DecrementEnthusiasm</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        type</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> constants.</span><span style="color:#BF9EEE;">DECREMENT_ENTHUSIASM</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> constants </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;../constants&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IncrementEnthusiasm</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">type</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">constants</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">INCREMENT_ENTHUSIASM</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DecrementEnthusiasm</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">type</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">constants</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">DECREMENT_ENTHUSIASM</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EnthusiasmAction</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IncrementEnthusiasm</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DecrementEnthusiasm</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">incrementEnthusiasm</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IncrementEnthusiasm</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        type: constants.</span><span style="color:#005CC5;">INCREMENT_ENTHUSIASM</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">decrementEnthusiasm</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DecrementEnthusiasm</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        type: constants.</span><span style="color:#005CC5;">DECREMENT_ENTHUSIASM</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们创建了两个类型，它们负责增加操作和减少操作的行为。 我们还定义了一个类型（<code>EnthusiasmAction</code>），它描述了哪些action是可以增加或减少的。 最后，我们定义了两个函数用来创建实际的actions。</p><p>这里有一些清晰的模版，你可以参考类似<a href="https://www.npmjs.com/package/redux-actions" target="_blank" rel="noreferrer">redux-actions</a>的库。</p><h3 id="添加reducer" tabindex="-1">添加reducer <a class="header-anchor" href="#添加reducer" aria-label="Permalink to &quot;添加reducer&quot;">​</a></h3><p>现在我们可以开始写第一个reducer了！ Reducers是函数，它们负责生成应用state的拷贝使之产生变化，但它并没有_副作用_。 它们是一种<a href="https://en.wikipedia.org/wiki/Pure_function" target="_blank" rel="noreferrer"><em>纯函数</em></a>。</p><p>我们的reducer将放在<code>src/reducers/index.tsx</code>文件里。 它的功能是保证增加操作会让感叹级别加1，减少操作则要将感叹级别减1，但是这个级别永远不能小于1。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// src/reducers/index.tsx</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { EnthusiasmAction } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">../actions</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { StoreState } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">../types/index</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { INCREMENT_ENTHUSIASM, DECREMENT_ENTHUSIASM } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">../constants/index</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">enthusiasm</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">state</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">StoreState</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">action</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">EnthusiasmAction</span><span style="color:#F6F6F4;">)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">StoreState</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">switch</span><span style="color:#F6F6F4;"> (action.type) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">case</span><span style="color:#F6F6F4;"> INCREMENT_ENTHUSIASM:</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> { </span><span style="color:#F286C4;">...</span><span style="color:#F6F6F4;">state, enthusiasmLevel</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> state.enthusiasmLevel </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;"> };</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">case</span><span style="color:#F6F6F4;"> DECREMENT_ENTHUSIASM:</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> { </span><span style="color:#F286C4;">...</span><span style="color:#F6F6F4;">state, enthusiasmLevel</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> Math.</span><span style="color:#62E884;">max</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, state.enthusiasmLevel </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">) };</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> state;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// src/reducers/index.tsx</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { EnthusiasmAction } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;../actions&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { StoreState } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;../types/index&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { INCREMENT_ENTHUSIASM, DECREMENT_ENTHUSIASM } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;../constants/index&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">enthusiasm</span><span style="color:#24292E;">(</span><span style="color:#E36209;">state</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StoreState</span><span style="color:#24292E;">, </span><span style="color:#E36209;">action</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EnthusiasmAction</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StoreState</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (action.type) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">INCREMENT_ENTHUSIASM</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> { </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">state, enthusiasmLevel: state.enthusiasmLevel </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">DECREMENT_ENTHUSIASM</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> { </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">state, enthusiasmLevel: Math.</span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, state.enthusiasmLevel </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) };</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> state;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>注意我们使用了_对象展开_（<code>...state</code>），当替换<code>enthusiasmLevel</code>时，它可以对状态进行浅拷贝。 将<code>enthusiasmLevel</code>属性放在末尾是十分关键的，否则它将被旧的状态覆盖。</p><p>你可能想要对reducer写一些测试。 因为reducers是纯函数，它们可以传入任意的数据。 针对每个输入，可以测试reducers生成的新的状态。 可以考虑使用Jest的<a href="https://facebook.github.io/jest/docs/en/expect.html#toequalvalue" target="_blank" rel="noreferrer">toEqual</a>方法。</p><h3 id="创建容器" tabindex="-1">创建容器 <a class="header-anchor" href="#创建容器" aria-label="Permalink to &quot;创建容器&quot;">​</a></h3><p>在使用Redux时，我们常常要创建组件和容器。 组件是数据无关的，且工作在表现层。 _容器_通常包裹组件及其使用的数据，用以显示和修改状态。 你可以在这里阅读更多关于这个概念的细节：<a href="https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0" target="_blank" rel="noreferrer">Dan Abramov写的_表现层的容器组件_</a>。</p><p>现在我们修改<code>src/components/Hello.tsx</code>，让它可以修改状态。 我们将添加两个可选的回调属性到<code>Props</code>，它们分别是<code>onIncrement</code>和<code>onDecrement</code>：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Props</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  name</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  enthusiasmLevel</span><span style="color:#F286C4;">?:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">onIncrement</span><span style="color:#F286C4;">?:</span><span style="color:#F6F6F4;"> () </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">onDecrement</span><span style="color:#F286C4;">?:</span><span style="color:#F6F6F4;"> () </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Props</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">enthusiasmLevel</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">onIncrement</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">void</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">onDecrement</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">void</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>然后将这两个回调绑定到两个新按钮上，将按钮添加到我们的组件里。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Hello</span><span style="color:#F6F6F4;">({ </span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">enthusiasmLevel</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">onIncrement</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">onDecrement</span><span style="color:#F6F6F4;"> }</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Props</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (enthusiasmLevel </span><span style="color:#F286C4;">&lt;=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">throw</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Error</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">You could be a little more enthusiastic. :D</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> (</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">div className</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">div className</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">greeting</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        Hello {</span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F6F6F4;"> + </span><span style="color:#FFB86C;font-style:italic;">getExclamationMarks</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">enthusiasmLevel</span><span style="color:#F6F6F4;">)}</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">&lt;/</span><span style="color:#F6F6F4;">div</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">      &lt;</span><span style="color:#97E1F1;font-style:italic;">div</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">button onClick</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">{onDecrement}</span><span style="color:#F286C4;">&gt;-</span><span style="color:#F6F6F4;">&lt;/</span><span style="color:#97E1F1;font-style:italic;">button</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">button onClick</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">{onIncrement}</span><span style="color:#F286C4;">&gt;+</span><span style="color:#F6F6F4;">&lt;/</span><span style="color:#97E1F1;font-style:italic;">button</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">&lt;/</span><span style="color:#F6F6F4;">div</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">&lt;/</span><span style="color:#F6F6F4;">div</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">  );</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Hello</span><span style="color:#24292E;">({ </span><span style="color:#E36209;">name</span><span style="color:#24292E;">, </span><span style="color:#E36209;">enthusiasmLevel</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#E36209;">onIncrement</span><span style="color:#24292E;">, </span><span style="color:#E36209;">onDecrement</span><span style="color:#24292E;"> }</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Props</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (enthusiasmLevel </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;You could be a little more enthusiastic. :D&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">div className</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">div className</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;greeting&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        Hello {</span><span style="color:#E36209;">name</span><span style="color:#24292E;"> + </span><span style="color:#E36209;">getExclamationMarks</span><span style="color:#24292E;">(</span><span style="color:#E36209;">enthusiasmLevel</span><span style="color:#24292E;">)}</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">div</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#6F42C1;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">button onClick</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{onDecrement}</span><span style="color:#D73A49;">&gt;-</span><span style="color:#24292E;">&lt;/</span><span style="color:#6F42C1;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">button onClick</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{onIncrement}</span><span style="color:#D73A49;">&gt;+</span><span style="color:#24292E;">&lt;/</span><span style="color:#6F42C1;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">div</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">div</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>通常情况下，我们应该给<code>onIncrement</code>和<code>onDecrement</code>写一些测试，它们是在各自的按钮被点击时调用。 试一试以便掌握编写测试的窍门。</p><p>现在我们的组件更新好了，可以把它放在一个容器里了。 让我们来创建一个文件<code>src/containers/Hello.tsx</code>，在开始的地方使用下列导入语句。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> Hello </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">../components/Hello</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">as</span><span style="color:#F6F6F4;"> actions </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">../actions/</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { StoreState } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">../types/index</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { connect, Dispatch } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">react-redux</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Hello </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;../components/Hello&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> actions </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;../actions/&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { StoreState } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;../types/index&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { connect, Dispatch } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;react-redux&#39;</span><span style="color:#24292E;">;</span></span></code></pre></div><p>两个关键点是初始的<code>Hello</code>组件和react-redux的<code>connect</code>函数。 <code>connect</code>可以将我们的<code>Hello</code>组件转换成一个容器，通过以下两个函数：</p><ul><li><code>mapStateToProps</code>将当前store里的数据以我们的组件需要的形式传递到组件。</li><li><code>mapDispatchToProps</code>利用<code>dispatch</code>函数，创建回调props将actions送到store。</li></ul><p>回想一下，我们的应用包含两个属性：<code>languageName</code>和<code>enthusiasmLevel</code>。 我们的<code>Hello</code>组件，希望得到一个<code>name</code>和一个<code>enthusiasmLevel</code>。 <code>mapStateToProps</code>会从store得到相应的数据，如果需要的话将针对组件的props调整它。 下面让我们继续往下写。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">mapStateToProps</span><span style="color:#F6F6F4;">({ </span><span style="color:#FFB86C;font-style:italic;">enthusiasmLevel</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">languageName</span><span style="color:#F6F6F4;"> }</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">StoreState</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    enthusiasmLevel,</span></span>
<span class="line"><span style="color:#F6F6F4;">    name</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> languageName,</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mapStateToProps</span><span style="color:#24292E;">({ </span><span style="color:#E36209;">enthusiasmLevel</span><span style="color:#24292E;">, </span><span style="color:#E36209;">languageName</span><span style="color:#24292E;"> }</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StoreState</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    enthusiasmLevel,</span></span>
<span class="line"><span style="color:#24292E;">    name: languageName,</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>注意<code>mapStateToProps</code>仅创建了<code>Hello</code>组件需要的四个属性中的两个。 我们还想要传入<code>onIncrement</code>和<code>onDecrement</code>回调函数。 <code>mapDispatchToProps</code>是一个函数，它需要传入一个调度函数。 这个调度函数可以将actions传入store来触发更新，因此我们可以创建一对回调函数，它们会在需要的时候调用调度函数。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">mapDispatchToProps</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">dispatch</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Dispatch</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">actions</span><span style="color:#F6F6F4;">.</span><span style="color:#FFB86C;font-style:italic;">EnthusiasmAction</span><span style="color:#F6F6F4;">&gt;) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">onIncrement</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> () </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">dispatch</span><span style="color:#F6F6F4;">(actions.</span><span style="color:#62E884;">incrementEnthusiasm</span><span style="color:#F6F6F4;">()),</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">onDecrement</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> () </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">dispatch</span><span style="color:#F6F6F4;">(actions.</span><span style="color:#62E884;">decrementEnthusiasm</span><span style="color:#F6F6F4;">()),</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mapDispatchToProps</span><span style="color:#24292E;">(</span><span style="color:#E36209;">dispatch</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Dispatch</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">actions</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">EnthusiasmAction</span><span style="color:#24292E;">&gt;) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">onIncrement</span><span style="color:#24292E;">: () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dispatch</span><span style="color:#24292E;">(actions.</span><span style="color:#6F42C1;">incrementEnthusiasm</span><span style="color:#24292E;">()),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">onDecrement</span><span style="color:#24292E;">: () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dispatch</span><span style="color:#24292E;">(actions.</span><span style="color:#6F42C1;">decrementEnthusiasm</span><span style="color:#24292E;">()),</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>最后，我们可以调用<code>connect</code>了。 <code>connect</code>首先会接收<code>mapStateToProps</code>和<code>mapDispatchToProps</code>，然后返回另一个函数，我们用它来包裹我们的组件。 最终的容器是通过下面的代码定义的：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">default</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">connect</span><span style="color:#F6F6F4;">(mapStateToProps, mapDispatchToProps)(Hello);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">connect</span><span style="color:#24292E;">(mapStateToProps, mapDispatchToProps)(Hello);</span></span></code></pre></div><p>现在，我们的文件应该是下面这个样子：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// src/containers/Hello.tsx</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> Hello </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">../components/Hello</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">as</span><span style="color:#F6F6F4;"> actions </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">../actions/</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { StoreState } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">../types/index</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { connect, Dispatch } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">react-redux</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">mapStateToProps</span><span style="color:#F6F6F4;">({ </span><span style="color:#FFB86C;font-style:italic;">enthusiasmLevel</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">languageName</span><span style="color:#F6F6F4;"> }</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">StoreState</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    enthusiasmLevel,</span></span>
<span class="line"><span style="color:#F6F6F4;">    name</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> languageName,</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">mapDispatchToProps</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">dispatch</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Dispatch</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">actions</span><span style="color:#F6F6F4;">.</span><span style="color:#FFB86C;font-style:italic;">EnthusiasmAction</span><span style="color:#F6F6F4;">&gt;) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">onIncrement</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> () </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">dispatch</span><span style="color:#F6F6F4;">(actions.</span><span style="color:#62E884;">incrementEnthusiasm</span><span style="color:#F6F6F4;">()),</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">onDecrement</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> () </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">dispatch</span><span style="color:#F6F6F4;">(actions.</span><span style="color:#62E884;">decrementEnthusiasm</span><span style="color:#F6F6F4;">()),</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">default</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">connect</span><span style="color:#F6F6F4;">(mapStateToProps, mapDispatchToProps)(Hello);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// src/containers/Hello.tsx</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Hello </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;../components/Hello&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> actions </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;../actions/&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { StoreState } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;../types/index&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { connect, Dispatch } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;react-redux&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mapStateToProps</span><span style="color:#24292E;">({ </span><span style="color:#E36209;">enthusiasmLevel</span><span style="color:#24292E;">, </span><span style="color:#E36209;">languageName</span><span style="color:#24292E;"> }</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StoreState</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    enthusiasmLevel,</span></span>
<span class="line"><span style="color:#24292E;">    name: languageName,</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mapDispatchToProps</span><span style="color:#24292E;">(</span><span style="color:#E36209;">dispatch</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Dispatch</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">actions</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">EnthusiasmAction</span><span style="color:#24292E;">&gt;) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">onIncrement</span><span style="color:#24292E;">: () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dispatch</span><span style="color:#24292E;">(actions.</span><span style="color:#6F42C1;">incrementEnthusiasm</span><span style="color:#24292E;">()),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">onDecrement</span><span style="color:#24292E;">: () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dispatch</span><span style="color:#24292E;">(actions.</span><span style="color:#6F42C1;">decrementEnthusiasm</span><span style="color:#24292E;">()),</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">connect</span><span style="color:#24292E;">(mapStateToProps, mapDispatchToProps)(Hello);</span></span></code></pre></div><h3 id="创建store" tabindex="-1">创建store <a class="header-anchor" href="#创建store" aria-label="Permalink to &quot;创建store&quot;">​</a></h3><p>让我们回到<code>src/index.tsx</code>。 要把所有的东西合到一起，我们需要创建一个带初始状态的store，并用我们所有的reducers来设置它。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { createStore } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">redux</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { enthusiasm } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">./reducers/index</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { StoreState } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">./types/index</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> store </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">createStore</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">StoreState</span><span style="color:#F6F6F4;">&gt;(enthusiasm, {</span></span>
<span class="line"><span style="color:#F6F6F4;">  enthusiasmLevel</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  languageName</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">TypeScript</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { createStore } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;redux&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { enthusiasm } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./reducers/index&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { StoreState } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./types/index&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">store</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createStore</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">StoreState</span><span style="color:#24292E;">&gt;(enthusiasm, {</span></span>
<span class="line"><span style="color:#24292E;">  enthusiasmLevel: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  languageName: </span><span style="color:#032F62;">&#39;TypeScript&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p><code>store</code>可能正如你想的那样，它是我们应用全局状态的核心store。</p><p>接下来，我们将要用<code>./src/containers/Hello</code>来包裹<code>./src/components/Hello</code>，然后使用react-redux的<code>Provider</code>将props与容器连通起来。 我们将导入它们：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> Hello </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">./containers/Hello</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { Provider } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">react-redux</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Hello </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./containers/Hello&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { Provider } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;react-redux&#39;</span><span style="color:#24292E;">;</span></span></code></pre></div><p>将<code>store</code>以<code>Provider</code>的属性形式传入：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">ReactDOM.</span><span style="color:#62E884;">render</span><span style="color:#F6F6F4;">(</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">Provider store</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">{store}</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">Hello </span><span style="color:#F286C4;">/&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">&lt;/</span><span style="color:#F6F6F4;">Provider</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  document.</span><span style="color:#62E884;">getElementById</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">root</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">as</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">HTMLElement</span></span>
<span class="line"><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ReactDOM.</span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Provider store</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{store}</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Hello </span><span style="color:#D73A49;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">Provider</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;root&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HTMLElement</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><p>注意，<code>Hello</code>不再需要props了，因为我们使用了<code>connect</code>函数为包裹起来的<code>Hello</code>组件的props适配了应用的状态。</p><h2 id="退出" tabindex="-1">退出 <a class="header-anchor" href="#退出" aria-label="Permalink to &quot;退出&quot;">​</a></h2><p>如果你发现create-react-app使一些自定义设置变得困难，那么你就可以选择不使用它，使用你需要配置。 比如，你要添加一个Webpack插件，你就可以利用create-react-app提供的“eject”功能。</p><p>运行：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">npm </span><span style="color:#E7EE98;">run</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">eject</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">eject</span></span></code></pre></div><p>这样就可以了！</p><p>你要注意，在运行eject前最好保存你的代码。 你不能撤销eject命令，因此退出操作是永久性的除非你从一个运行eject前的提交来恢复工程。</p><h2 id="下一步" tabindex="-1">下一步 <a class="header-anchor" href="#下一步" aria-label="Permalink to &quot;下一步&quot;">​</a></h2><p>create-react-app带有很多很棒的功能。 它们的大多数都在我们工程生成的<code>README.md</code>里面有记录，所以可以简单阅读一下。</p><p>如果你想学习更多关于Redux的知识，你可以前往<a href="http://redux.js.org/" target="_blank" rel="noreferrer">官方站点</a>查看文档。 同样的，<a href="https://mobx.js.org/" target="_blank" rel="noreferrer">MobX</a>官方站点。</p><p>如果你想要在某个时间点eject，你需要了解再多关于Webpack的知识。 你可以查看<a href="./react-and-webpack">React &amp; Webpack教程</a>。</p><p>有时候你需要路由功能。 已经有一些解决方案了，但是对于Redux工程来讲<a href="https://github.com/ReactTraining/react-router" target="_blank" rel="noreferrer">react-router</a>是最流行的，并经常与<a href="https://github.com/reactjs/react-router-redux" target="_blank" rel="noreferrer">react-router-redux</a>联合使用。</p>`,141),e=[o];function t(c,r,y,F,i,E){return n(),a("div",null,e)}const u=s(p,[["render",t]]);export{C as __pageData,u as default};
