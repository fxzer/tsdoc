import{_ as s,o as a,c as n,V as l}from"./chunks/framework.ced88878.js";const d=JSON.parse('{"title":"TypeScript 2.6","description":"","frontmatter":{},"headers":[],"relativePath":"zh/release-notes/TypeScript[2.6].md","lastUpdated":1682668835000}'),p={name:"zh/release-notes/TypeScript[2.6].md"},o=l(`<h1 id="typescript-2-6" tabindex="-1">TypeScript 2.6 <a class="header-anchor" href="#typescript-2-6" aria-label="Permalink to &quot;TypeScript 2.6&quot;">​</a></h1><h2 id="严格函数类型" tabindex="-1">严格函数类型 <a class="header-anchor" href="#严格函数类型" aria-label="Permalink to &quot;严格函数类型&quot;">​</a></h2><p>TypeScript 2.6引入了新的类型检查选项，<code>--strictFunctionTypes</code>。<code>--strictFunctionTypes</code>选项是<code>--strict</code>系列选项之一，也就是说 <code>--strict</code>模式下它默认是启用的。你可以通过在命令行或tsconfig.json中设置<code>--strictFunctionTypes false</code>来单独禁用它。</p><p><code>--strictFunctionTypes</code>启用时，函数类型参数的检查是_抗变（contravariantly）_而非_双变（bivariantly）_的。关于变体 (variance) 对于函数类型意义的相关背景，请查看<a href="https://www.stephanboyer.com/post/132/what-are-covariance-and-contravariance" target="_blank" rel="noreferrer">协变（covariance）和抗变（contravariance）是什么？</a>。</p><p>这一更严格的检查应用于除方法或构造函数声明以外的所有函数类型。方法被专门排除在外是为了确保带泛型的类和接口（如<code>Array&lt;T&gt;</code>）总体上仍然保持协变。</p><p>考虑下面这个 Animal 是 Dog 和 Cat 的父类型的例子：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">declare</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">f1</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Animal</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">declare</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">f2</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Dog</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">declare</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">f3</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Cat</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">f1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> f2;  </span><span style="color:#7B7F8B;">// 启用 --strictFunctionTypes 时错误</span></span>
<span class="line"><span style="color:#F6F6F4;">f2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> f1;  </span><span style="color:#7B7F8B;">// 正确</span></span>
<span class="line"><span style="color:#F6F6F4;">f2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> f3;  </span><span style="color:#7B7F8B;">// 错误</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">declare</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">f1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Animal</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">void</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">declare</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">f2</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Dog</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">void</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">declare</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">f3</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Cat</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">void</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">f1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> f2;  </span><span style="color:#6A737D;">// 启用 --strictFunctionTypes 时错误</span></span>
<span class="line"><span style="color:#24292E;">f2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> f1;  </span><span style="color:#6A737D;">// 正确</span></span>
<span class="line"><span style="color:#24292E;">f2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> f3;  </span><span style="color:#6A737D;">// 错误</span></span></code></pre></div><p>第一个赋值语句在默认的类型检查模式中是允许的，但是在严格函数类型模式下会被标记错误。 通俗地讲，默认模式允许这么赋值，因为它_可能是_合理的，而严格函数类型模式将它标记为错误，因为它不能_被证明_合理。 任何一种模式中，第三个赋值都是错误的，因为它_永远不_合理。</p><p>用另一种方式来描述这个例子则是，默认类型检查模式中<code>T</code>在类型<code>(x: T) =&gt; void</code>是_双变的_（也即协变_或_抗变），但在严格函数类型模式中<code>T</code>是_抗变_的。</p><h3 id="例子" tabindex="-1">例子 <a class="header-anchor" href="#例子" aria-label="Permalink to &quot;例子&quot;">​</a></h3><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Comparer</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F6F6F4;">&gt; {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">compare</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">a</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">b</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">declare</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> animalComparer</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Comparer</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">Animal</span><span style="color:#F6F6F4;">&gt;;</span></span>
<span class="line"><span style="color:#F286C4;">declare</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> dogComparer</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Comparer</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">Dog</span><span style="color:#F6F6F4;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">animalComparer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> dogComparer;  </span><span style="color:#7B7F8B;">// 错误</span></span>
<span class="line"><span style="color:#F6F6F4;">dogComparer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> animalComparer;  </span><span style="color:#7B7F8B;">// 正确</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Comparer</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">compare</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">a</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">, </span><span style="color:#E36209;">b</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">declare</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> animalComparer</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Comparer</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Animal</span><span style="color:#24292E;">&gt;;</span></span>
<span class="line"><span style="color:#D73A49;">declare</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> dogComparer</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Comparer</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Dog</span><span style="color:#24292E;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">animalComparer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> dogComparer;  </span><span style="color:#6A737D;">// 错误</span></span>
<span class="line"><span style="color:#24292E;">dogComparer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> animalComparer;  </span><span style="color:#6A737D;">// 正确</span></span></code></pre></div><p>现在第一个赋值是错误的。更明确地说，<code>Comparer&lt;T&gt;</code>中的<code>T</code>因为仅在函数类型参数的位置被使用，是抗变的。</p><p>另外，注意尽管有的语言（比如C#和Scala）要求变体标注（variance annotations）（<code>out</code>/<code>in</code> 或 <code>+</code>/<code>-</code>），而由于TypeScript的结构化类型系统，它的变体是由泛型中的类型参数的实际使用自然得出的。</p><h3 id="注意" tabindex="-1">注意： <a class="header-anchor" href="#注意" aria-label="Permalink to &quot;注意：&quot;">​</a></h3><p>启用<code>--strictFunctionTypes</code>时，如果<code>compare</code>被声明为方法，则第一个赋值依然是被允许的。 更明确的说，<code>Comparer&lt;T&gt;</code>中的<code>T</code>因为仅在方法参数的位置被使用所以是双变的。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Comparer</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F6F6F4;">&gt; {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">compare</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">a</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">b</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;">)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">declare</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> animalComparer</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Comparer</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">Animal</span><span style="color:#F6F6F4;">&gt;;</span></span>
<span class="line"><span style="color:#F286C4;">declare</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> dogComparer</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Comparer</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">Dog</span><span style="color:#F6F6F4;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">animalComparer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> dogComparer;  </span><span style="color:#7B7F8B;">// 正确，因为双变</span></span>
<span class="line"><span style="color:#F6F6F4;">dogComparer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> animalComparer;  </span><span style="color:#7B7F8B;">// 正确</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Comparer</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">compare</span><span style="color:#24292E;">(</span><span style="color:#E36209;">a</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">, </span><span style="color:#E36209;">b</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">declare</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> animalComparer</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Comparer</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Animal</span><span style="color:#24292E;">&gt;;</span></span>
<span class="line"><span style="color:#D73A49;">declare</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> dogComparer</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Comparer</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Dog</span><span style="color:#24292E;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">animalComparer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> dogComparer;  </span><span style="color:#6A737D;">// 正确，因为双变</span></span>
<span class="line"><span style="color:#24292E;">dogComparer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> animalComparer;  </span><span style="color:#6A737D;">// 正确</span></span></code></pre></div><p>TypeScript 2.6 还改进了与抗变位置相关的类型推导：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">combine</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F6F6F4;">&gt;(</span><span style="color:#F286C4;">...</span><span style="color:#FFB86C;font-style:italic;">funcs</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> ((</span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> ）</span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;">)[])</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">return</span><span style="color:#F6F6F4;"> x </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">const</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">f</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">of</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">funcs</span><span style="color:#F6F6F4;">) </span><span style="color:#62E884;">f</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">animalFunc</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Animal</span><span style="color:#F6F6F4;">) {}</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">dogFunc</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Dog</span><span style="color:#F6F6F4;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">let</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">combined</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">combine</span><span style="color:#F6F6F4;">(animalFunc，dogFunc);  </span><span style="color:#7B7F8B;">// (x: Dog) =&gt; void</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">combine</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">&gt;(</span><span style="color:#D73A49;">...</span><span style="color:#E36209;">funcs</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> ((</span><span style="color:#E36209;">x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> ）</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">void</span><span style="color:#24292E;">)[])</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">void</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">return</span><span style="color:#24292E;"> </span><span style="color:#E36209;">x</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">for</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">f</span><span style="color:#24292E;"> </span><span style="color:#E36209;">of</span><span style="color:#24292E;"> </span><span style="color:#E36209;">funcs</span><span style="color:#24292E;">) </span><span style="color:#6F42C1;">f</span><span style="color:#24292E;">(</span><span style="color:#E36209;">x</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">animalFunc</span><span style="color:#24292E;">(</span><span style="color:#E36209;">x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Animal</span><span style="color:#24292E;">) {}</span></span>
<span class="line"><span style="color:#6F42C1;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dogFunc</span><span style="color:#24292E;">(</span><span style="color:#E36209;">x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Dog</span><span style="color:#24292E;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">combined</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">combine</span><span style="color:#24292E;">(animalFunc，dogFunc);  </span><span style="color:#6A737D;">// (x: Dog) =&gt; void</span></span></code></pre></div><p>这上面所有<code>T</code>的推断都来自抗变的位置，由此我们得出<code>T</code>的_最普遍子类型_。 这与从协变位置推导出的结果恰恰相反，从协变位置我们得出的是_最普遍超类型_。</p><h2 id="缓存模块中的标签模板对象" tabindex="-1">缓存模块中的标签模板对象 <a class="header-anchor" href="#缓存模块中的标签模板对象" aria-label="Permalink to &quot;缓存模块中的标签模板对象&quot;">​</a></h2><p>TypeScript 2.6修复了标签字符串模板的输出，以更好地遵循ECMAScript标准。 根据<a href="https://tc39.github.io/ecma262/#sec-gettemplateobject" target="_blank" rel="noreferrer">ECMAScript 标准</a>，每一次获取模板标签的值时，应该将_同一个_模板字符串数组对象 (同一个 <code>TemplateStringArray</code>) 作为第一个参数传递。 在 TypeScript 2.6 之前，每一次生成的都是全新的模板对象。 虽然字符串的内容是一样的，这样的输出会影响通过识别字符串来实现缓存失效的库，比如 <a href="https://github.com/PolymerLabs/lit-html/issues/58" target="_blank" rel="noreferrer">lit-html</a>。</p><h3 id="例子-1" tabindex="-1">例子 <a class="header-anchor" href="#例子-1" aria-label="Permalink to &quot;例子&quot;">​</a></h3><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">id</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">TemplateStringsArray</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> x;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">templateObjectFactory</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">id</span><span style="color:#E7EE98;">\`hello world\`</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> result </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">templateObjectFactory</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">templateObjectFactory</span><span style="color:#F6F6F4;">(); </span><span style="color:#7B7F8B;">// TS 2.6 为 true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">(</span><span style="color:#E36209;">x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TemplateStringsArray</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> x;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">templateObjectFactory</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#032F62;">\`hello world\`</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">templateObjectFactory</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">templateObjectFactory</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// TS 2.6 为 true</span></span></code></pre></div><p>编译后的代码：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">use strict</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> __makeTemplateObject </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.__makeTemplateObject) </span><span style="color:#F286C4;">||</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">cooked</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">raw</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (Object.defineProperty) { Object.</span><span style="color:#62E884;">defineProperty</span><span style="color:#F6F6F4;">(cooked, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">raw</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, { value</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> raw }); } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> { cooked.raw </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> raw; }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> cooked;</span></span>
<span class="line"><span style="color:#F6F6F4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">id</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> x;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> _a;</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">templateObjectFactory</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">id</span><span style="color:#F6F6F4;">(_a </span><span style="color:#F286C4;">||</span><span style="color:#F6F6F4;"> (_a </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">__makeTemplateObject</span><span style="color:#F6F6F4;">([</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hello world</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">], [</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hello world</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">])));</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> result </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">templateObjectFactory</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">templateObjectFactory</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;use strict&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> __makeTemplateObject </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.__makeTemplateObject) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">cooked</span><span style="color:#24292E;">, </span><span style="color:#E36209;">raw</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (Object.defineProperty) { Object.</span><span style="color:#6F42C1;">defineProperty</span><span style="color:#24292E;">(cooked, </span><span style="color:#032F62;">&quot;raw&quot;</span><span style="color:#24292E;">, { value: raw }); } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { cooked.raw </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> raw; }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> cooked;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">(</span><span style="color:#E36209;">x</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> x;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> _a;</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">templateObjectFactory</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">(_a </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> (_a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">__makeTemplateObject</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&quot;hello world&quot;</span><span style="color:#24292E;">], [</span><span style="color:#032F62;">&quot;hello world&quot;</span><span style="color:#24292E;">])));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">templateObjectFactory</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">templateObjectFactory</span><span style="color:#24292E;">();</span></span></code></pre></div><blockquote><p>注意：这一改变引入了新的工具函数，<code>__makeTemplateObject</code>; 如果你在搭配使用<code>--importHelpers</code>和<a href="https://github.com/Microsoft/tslib" target="_blank" rel="noreferrer"><code>tslib</code></a>，需要更新到 1.8 或更高版本。</p></blockquote><h2 id="本地化的命令行诊断消息" tabindex="-1">本地化的命令行诊断消息 <a class="header-anchor" href="#本地化的命令行诊断消息" aria-label="Permalink to &quot;本地化的命令行诊断消息&quot;">​</a></h2><p>TypeScript 2.6 npm包加入了13种语言的诊断消息本地化版本。 命令行中本地化消息会在使用<code>--locale</code>选项时显示。</p><h3 id="例子-2" tabindex="-1">例子 <a class="header-anchor" href="#例子-2" aria-label="Permalink to &quot;例子&quot;">​</a></h3><p>俄语显示的错误消息：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">c:\\ts&gt;tsc </span><span style="color:#BF9EEE;">--v</span></span>
<span class="line"><span style="color:#F6F6F4;">Version </span><span style="color:#E7EE98;">2.6.1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">c:\\ts&gt;tsc </span><span style="color:#BF9EEE;">--locale</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">ru</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--pretty</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">c:</span><span style="color:#F286C4;">\\t</span><span style="color:#E7EE98;">est</span><span style="color:#F286C4;">\\a</span><span style="color:#E7EE98;">.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#97E1F1;">..</span><span style="color:#F6F6F4;">/</span><span style="color:#97E1F1;">test</span><span style="color:#F6F6F4;">/a.ts(1,5): error TS2322: Тип</span><span style="color:#DEE492;"> &quot;&quot;</span><span style="color:#F6F6F4;">string</span><span style="color:#DEE492;">&quot;&quot;</span><span style="color:#F6F6F4;"> не может быть назначен для типа</span><span style="color:#DEE492;"> &quot;</span><span style="color:#E7EE98;">number</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;"> var x: number =</span><span style="color:#DEE492;"> &quot;</span><span style="color:#E7EE98;">string</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">      ~</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">c:\\ts&gt;tsc</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--v</span></span>
<span class="line"><span style="color:#6F42C1;">Version</span><span style="color:#24292E;"> </span><span style="color:#032F62;">2.6.1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">c:\\ts&gt;tsc</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--locale</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ru</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--pretty</span><span style="color:#24292E;"> </span><span style="color:#032F62;">c:</span><span style="color:#005CC5;">\\t</span><span style="color:#032F62;">est</span><span style="color:#005CC5;">\\a</span><span style="color:#032F62;">.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">..</span><span style="color:#6F42C1;">/</span><span style="color:#005CC5;">test</span><span style="color:#6F42C1;">/a.ts(1,5</span><span style="color:#24292E;">): error TS2322: Тип</span><span style="color:#032F62;"> &quot;&quot;</span><span style="color:#24292E;">string</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;"> не может быть назначен для типа</span><span style="color:#032F62;"> &quot;number&quot;</span><span style="color:#24292E;">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">1</span><span style="color:#24292E;"> var x: number =</span><span style="color:#032F62;"> &quot;string&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">~</span></span></code></pre></div><p>中文显示的帮助信息：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">PS </span><span style="color:#E7EE98;">C:</span><span style="color:#F286C4;">\\t</span><span style="color:#F6F6F4;">s</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">tsc</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--v</span></span>
<span class="line"><span style="color:#F6F6F4;">Version </span><span style="color:#E7EE98;">2.6.1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">PS </span><span style="color:#E7EE98;">C:</span><span style="color:#F286C4;">\\t</span><span style="color:#F6F6F4;">s</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">tsc</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--locale</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">zh-cn</span></span>
<span class="line"><span style="color:#F6F6F4;">版本 </span><span style="color:#E7EE98;">2.6.1</span></span>
<span class="line"><span style="color:#F6F6F4;">语法：tsc [选项] [文件 ...]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">示例：tsc </span><span style="color:#E7EE98;">hello.ts</span></span>
<span class="line"><span style="color:#F6F6F4;">    tsc </span><span style="color:#BF9EEE;">--outFile</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">file.js</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">file.ts</span></span>
<span class="line"><span style="color:#F6F6F4;">    tsc </span><span style="color:#E7EE98;">@args.txt</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">选项：</span></span>
<span class="line"><span style="color:#F6F6F4;"> -h, </span><span style="color:#BF9EEE;">--help</span><span style="color:#F6F6F4;">                    </span><span style="color:#E7EE98;">打印此消息。</span></span>
<span class="line"><span style="color:#F6F6F4;"> --all                         </span><span style="color:#E7EE98;">显示所有编译器选项。</span></span>
<span class="line"><span style="color:#F6F6F4;"> -v, </span><span style="color:#BF9EEE;">--version</span><span style="color:#F6F6F4;">                 </span><span style="color:#E7EE98;">打印编译器的版本。</span></span>
<span class="line"><span style="color:#F6F6F4;"> --init                        </span><span style="color:#E7EE98;">初始化</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">TypeScript</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">项目并创建</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">tsconfig.json</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">文件。</span></span>
<span class="line"><span style="color:#F6F6F4;"> -p </span><span style="color:#E7EE98;">文件或目录,</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--project</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">文件或目录</span><span style="color:#F6F6F4;">     </span><span style="color:#E7EE98;">编译给定了其配置文件路径或带</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">tsconfig.json</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">的文件夹路径的项目。</span></span>
<span class="line"><span style="color:#F6F6F4;"> --pretty                      </span><span style="color:#E7EE98;">使用颜色和上下文风格化错误和消息</span><span style="color:#F6F6F4;">(实验)</span><span style="color:#E7EE98;">。</span></span>
<span class="line"><span style="color:#F6F6F4;"> -w, </span><span style="color:#BF9EEE;">--watch</span><span style="color:#F6F6F4;">                   </span><span style="color:#E7EE98;">监视输入文件。</span></span>
<span class="line"><span style="color:#F6F6F4;"> -t </span><span style="color:#E7EE98;">版本,</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--target</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">版本</span><span style="color:#F6F6F4;">            </span><span style="color:#E7EE98;">指定</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">ECMAScript</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">目标版本：</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">ES3</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">(默认)</span><span style="color:#E7EE98;">、</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">ES5</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">、</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">ES2015</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">、</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">ES2016</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">、</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">ES2017</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">或</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">ESNEXT</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">。</span></span>
<span class="line"><span style="color:#F6F6F4;"> -m </span><span style="color:#E7EE98;">种类,</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--module</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">种类</span><span style="color:#F6F6F4;">            </span><span style="color:#E7EE98;">指定模块代码生成：</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">none</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">、</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">commonjs</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">、</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">amd</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">、</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">system</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">、</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">umd</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">、</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">es2015</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">或</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">ESNext</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">。</span></span>
<span class="line"><span style="color:#F6F6F4;"> --lib                         </span><span style="color:#E7EE98;">指定要在编译中包括的库文件:</span></span>
<span class="line"><span style="color:#F6F6F4;">                                 &#39;es5&#39; </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">es6</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">es2015</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">es7</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">es2016</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">es2017</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">esnext</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">dom</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">dom.iterable</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">webworker</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">scripthost</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">es2015.core</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">es2015.collection</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">es2015.generator</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">es2015.iterable</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">es2015.promise</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">es2015.proxy</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">es2015.reflect</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">es2015.symbol</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">es2015.symbol.wellknown</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">es2016.array.include</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">es2017.object</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">es2017.sharedmemory</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">es2017.string</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">es2017.intl</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">esnext.asynciterable</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;"> --allowJs                     </span><span style="color:#E7EE98;">允许编译</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">JavaScript</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">文件。</span></span>
<span class="line"><span style="color:#F6F6F4;"> --jsx </span><span style="color:#E7EE98;">种类</span><span style="color:#F6F6F4;">                      </span><span style="color:#E7EE98;">指定</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">JSX</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">代码生成：</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">preserve</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">、</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">react-native</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">或</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">react</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">。</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">-d,</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--declaration</span><span style="color:#F6F6F4;">             </span><span style="color:#E7EE98;">生成相应的</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">.d.ts</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">文件。</span></span>
<span class="line"><span style="color:#F6F6F4;"> --sourceMap                   </span><span style="color:#E7EE98;">生成相应的</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">.map</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">文件。</span></span>
<span class="line"><span style="color:#F6F6F4;"> --outFile </span><span style="color:#E7EE98;">文件</span><span style="color:#F6F6F4;">                  </span><span style="color:#E7EE98;">连接输出并将其发出到单个文件。</span></span>
<span class="line"><span style="color:#F6F6F4;"> --outDir </span><span style="color:#E7EE98;">目录</span><span style="color:#F6F6F4;">                   </span><span style="color:#E7EE98;">将输出结构重定向到目录。</span></span>
<span class="line"><span style="color:#F6F6F4;"> --removeComments              </span><span style="color:#E7EE98;">请勿将注释发出到输出。</span></span>
<span class="line"><span style="color:#F6F6F4;"> --noEmit                      </span><span style="color:#E7EE98;">请勿发出输出。</span></span>
<span class="line"><span style="color:#F6F6F4;"> --strict                      </span><span style="color:#E7EE98;">启用所有严格类型检查选项。</span></span>
<span class="line"><span style="color:#F6F6F4;"> --noImplicitAny               </span><span style="color:#E7EE98;">对具有隐式</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">any</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">类型的表达式和声明引发错误。</span></span>
<span class="line"><span style="color:#F6F6F4;"> --strictNullChecks            </span><span style="color:#E7EE98;">启用严格的</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">NULL</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">检查。</span></span>
<span class="line"><span style="color:#F6F6F4;"> --strictFunctionTypes         </span><span style="color:#E7EE98;">对函数类型启用严格检查。</span></span>
<span class="line"><span style="color:#F6F6F4;"> --noImplicitThis              </span><span style="color:#E7EE98;">在带隐式</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">any</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">类型的</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">this</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">表达式上引发错误。</span></span>
<span class="line"><span style="color:#F6F6F4;"> --alwaysStrict                </span><span style="color:#E7EE98;">以严格模式进行分析，并为每个源文件发出</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">use strict</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">指令。</span></span>
<span class="line"><span style="color:#F6F6F4;"> --noUnusedLocals              </span><span style="color:#E7EE98;">报告未使用的局部变量上的错误。</span></span>
<span class="line"><span style="color:#F6F6F4;"> --noUnusedParameters          </span><span style="color:#E7EE98;">报告未使用的参数上的错误。</span></span>
<span class="line"><span style="color:#F6F6F4;"> --noImplicitReturns           </span><span style="color:#E7EE98;">在函数中的所有代码路径并非都返回值时报告错误。</span></span>
<span class="line"><span style="color:#F6F6F4;"> --noFallthroughCasesInSwitch  </span><span style="color:#E7EE98;">报告</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">switch</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">语句中遇到</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">fallthrough</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">情况的错误。</span></span>
<span class="line"><span style="color:#F6F6F4;"> --types                       </span><span style="color:#E7EE98;">要包含在编译中类型声明文件。</span></span>
<span class="line"><span style="color:#F6F6F4;"> @&lt;文件&gt;                         </span><span style="color:#E7EE98;">从文件插入命令行选项和文件。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">PS</span><span style="color:#24292E;"> </span><span style="color:#032F62;">C:</span><span style="color:#005CC5;">\\t</span><span style="color:#24292E;">s</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tsc</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--v</span></span>
<span class="line"><span style="color:#6F42C1;">Version</span><span style="color:#24292E;"> </span><span style="color:#032F62;">2.6.1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">PS</span><span style="color:#24292E;"> </span><span style="color:#032F62;">C:</span><span style="color:#005CC5;">\\t</span><span style="color:#24292E;">s</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tsc</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--locale</span><span style="color:#24292E;"> </span><span style="color:#032F62;">zh-cn</span></span>
<span class="line"><span style="color:#6F42C1;">版本</span><span style="color:#24292E;"> </span><span style="color:#032F62;">2.6.1</span></span>
<span class="line"><span style="color:#6F42C1;">语法：tsc</span><span style="color:#24292E;"> [选项] [文件 ...]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">示例：tsc</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hello.ts</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">tsc</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--outFile</span><span style="color:#24292E;"> </span><span style="color:#032F62;">file.js</span><span style="color:#24292E;"> </span><span style="color:#032F62;">file.ts</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">tsc</span><span style="color:#24292E;"> </span><span style="color:#032F62;">@args.txt</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">选项：</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">-h,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--help</span><span style="color:#24292E;">                    </span><span style="color:#032F62;">打印此消息。</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">--all</span><span style="color:#24292E;">                         </span><span style="color:#032F62;">显示所有编译器选项。</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">-v,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--version</span><span style="color:#24292E;">                 </span><span style="color:#032F62;">打印编译器的版本。</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">--init</span><span style="color:#24292E;">                        </span><span style="color:#032F62;">初始化</span><span style="color:#24292E;"> </span><span style="color:#032F62;">TypeScript</span><span style="color:#24292E;"> </span><span style="color:#032F62;">项目并创建</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tsconfig.json</span><span style="color:#24292E;"> </span><span style="color:#032F62;">文件。</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">-p</span><span style="color:#24292E;"> </span><span style="color:#032F62;">文件或目录,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--project</span><span style="color:#24292E;"> </span><span style="color:#032F62;">文件或目录</span><span style="color:#24292E;">     </span><span style="color:#032F62;">编译给定了其配置文件路径或带</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;tsconfig.json&quot;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">的文件夹路径的项目。</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">--pretty</span><span style="color:#24292E;">                      </span><span style="color:#032F62;">使用颜色和上下文风格化错误和消息</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">实验</span><span style="color:#24292E;">)</span><span style="color:#032F62;">。</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">-w,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--watch</span><span style="color:#24292E;">                   </span><span style="color:#032F62;">监视输入文件。</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">-t</span><span style="color:#24292E;"> </span><span style="color:#032F62;">版本,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--target</span><span style="color:#24292E;"> </span><span style="color:#032F62;">版本</span><span style="color:#24292E;">            </span><span style="color:#032F62;">指定</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ECMAScript</span><span style="color:#24292E;"> </span><span style="color:#032F62;">目标版本：&quot;ES3&quot;</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">默认</span><span style="color:#24292E;">)</span><span style="color:#032F62;">、&quot;ES5&quot;、&quot;ES2015&quot;、&quot;ES2016&quot;、&quot;ES2017&quot;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">或</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;ESNEXT&quot;。</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">-m</span><span style="color:#24292E;"> </span><span style="color:#032F62;">种类,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--module</span><span style="color:#24292E;"> </span><span style="color:#032F62;">种类</span><span style="color:#24292E;">            </span><span style="color:#032F62;">指定模块代码生成：&quot;none&quot;、&quot;commonjs&quot;、&quot;amd&quot;、&quot;system&quot;、&quot;umd&quot;、&quot;es2015&quot;或</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;ESNext&quot;。</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">--lib</span><span style="color:#24292E;">                         </span><span style="color:#032F62;">指定要在编译中包括的库文件:</span></span>
<span class="line"><span style="color:#24292E;">                                 </span><span style="color:#6F42C1;">&#39;es5&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;es6&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;es2015&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;es7&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;es2016&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;es2017&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;esnext&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;dom&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;dom.iterable&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;webworker&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;scripthost&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;es2015.core&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;es2015.collection&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;es2015.generator&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;es2015.iterable&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;es2015.promise&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;es2015.proxy&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;es2015.reflect&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;es2015.symbol&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;es2015.symbol.wellknown&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;es2016.array.include&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;es2017.object&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;es2017.sharedmemory&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;es2017.string&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;es2017.intl&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;esnext.asynciterable&#39;</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">--allowJs</span><span style="color:#24292E;">                     </span><span style="color:#032F62;">允许编译</span><span style="color:#24292E;"> </span><span style="color:#032F62;">JavaScript</span><span style="color:#24292E;"> </span><span style="color:#032F62;">文件。</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">--jsx</span><span style="color:#24292E;"> </span><span style="color:#032F62;">种类</span><span style="color:#24292E;">                      </span><span style="color:#032F62;">指定</span><span style="color:#24292E;"> </span><span style="color:#032F62;">JSX</span><span style="color:#24292E;"> </span><span style="color:#032F62;">代码生成：&quot;preserve&quot;、&quot;react-native&quot;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">或</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;react&quot;。</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-d,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--declaration</span><span style="color:#24292E;">             </span><span style="color:#032F62;">生成相应的</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;.d.ts&quot;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">文件。</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">--sourceMap</span><span style="color:#24292E;">                   </span><span style="color:#032F62;">生成相应的</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;.map&quot;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">文件。</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">--outFile</span><span style="color:#24292E;"> </span><span style="color:#032F62;">文件</span><span style="color:#24292E;">                  </span><span style="color:#032F62;">连接输出并将其发出到单个文件。</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">--outDir</span><span style="color:#24292E;"> </span><span style="color:#032F62;">目录</span><span style="color:#24292E;">                   </span><span style="color:#032F62;">将输出结构重定向到目录。</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">--removeComments</span><span style="color:#24292E;">              </span><span style="color:#032F62;">请勿将注释发出到输出。</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">--noEmit</span><span style="color:#24292E;">                      </span><span style="color:#032F62;">请勿发出输出。</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">--strict</span><span style="color:#24292E;">                      </span><span style="color:#032F62;">启用所有严格类型检查选项。</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">--noImplicitAny</span><span style="color:#24292E;">               </span><span style="color:#032F62;">对具有隐式</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;any&quot;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">类型的表达式和声明引发错误。</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">--strictNullChecks</span><span style="color:#24292E;">            </span><span style="color:#032F62;">启用严格的</span><span style="color:#24292E;"> </span><span style="color:#032F62;">NULL</span><span style="color:#24292E;"> </span><span style="color:#032F62;">检查。</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">--strictFunctionTypes</span><span style="color:#24292E;">         </span><span style="color:#032F62;">对函数类型启用严格检查。</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">--noImplicitThis</span><span style="color:#24292E;">              </span><span style="color:#032F62;">在带隐式&quot;any&quot;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">类型的</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;this&quot;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">表达式上引发错误。</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">--alwaysStrict</span><span style="color:#24292E;">                </span><span style="color:#032F62;">以严格模式进行分析，并为每个源文件发出</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;use strict&quot;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">指令。</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">--noUnusedLocals</span><span style="color:#24292E;">              </span><span style="color:#032F62;">报告未使用的局部变量上的错误。</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">--noUnusedParameters</span><span style="color:#24292E;">          </span><span style="color:#032F62;">报告未使用的参数上的错误。</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">--noImplicitReturns</span><span style="color:#24292E;">           </span><span style="color:#032F62;">在函数中的所有代码路径并非都返回值时报告错误。</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">--noFallthroughCasesInSwitch</span><span style="color:#24292E;">  </span><span style="color:#032F62;">报告</span><span style="color:#24292E;"> </span><span style="color:#032F62;">switch</span><span style="color:#24292E;"> </span><span style="color:#032F62;">语句中遇到</span><span style="color:#24292E;"> </span><span style="color:#032F62;">fallthrough</span><span style="color:#24292E;"> </span><span style="color:#032F62;">情况的错误。</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">--types</span><span style="color:#24292E;">                       </span><span style="color:#032F62;">要包含在编译中类型声明文件。</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">@&lt;文件&gt;</span><span style="color:#24292E;">                         </span><span style="color:#032F62;">从文件插入命令行选项和文件。</span></span></code></pre></div><h2 id="通过-ts-ignore-注释隐藏-ts-文件中的错误" tabindex="-1">通过 &#39;// @ts-ignore&#39; 注释隐藏 .ts 文件中的错误 <a class="header-anchor" href="#通过-ts-ignore-注释隐藏-ts-文件中的错误" aria-label="Permalink to &quot;通过 &#39;// @ts-ignore&#39; 注释隐藏 .ts 文件中的错误&quot;">​</a></h2><p>TypeScript 2.6支持在.ts文件中通过在报错一行上方使用<code>// @ts-ignore</code>来忽略错误。</p><h3 id="例子-3" tabindex="-1">例子 <a class="header-anchor" href="#例子-3" aria-label="Permalink to &quot;例子&quot;">​</a></h3><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// @ts-ignore：无法被执行的代码的错误</span></span>
<span class="line"><span style="color:#F6F6F4;">    console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// @ts-ignore：无法被执行的代码的错误</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>// @ts-ignore</code>注释会忽略下一行中产生的所有错误。 建议实践中在<code>@ts-ignore</code>之后添加相关提示，解释忽略了什么错误。</p><p>请注意，这个注释仅会隐藏报错，并且我们建议你_极少_使用这一注释。</p><h2 id="更快的-tsc-watch" tabindex="-1">更快的 <code>tsc --watch</code> <a class="header-anchor" href="#更快的-tsc-watch" aria-label="Permalink to &quot;更快的 \`tsc --watch\`&quot;">​</a></h2><p>TypeScript 2.6 带来了更快的<code>--watch</code>实现。 新版本优化了使用ES模块的代码的生成和检查。 在一个模块文件中检测到的改变_只_会使改变的模块，以及依赖它的文件被重新生成，而不再是整个项目。 有大量文件的项目应该从这一改变中获益最多。</p><p>这一新的实现也为tsserver中的监听带来了性能提升。 监听逻辑被完全重写以更快响应改变事件。</p><h2 id="只写的引用现在会被标记未使用" tabindex="-1">只写的引用现在会被标记未使用 <a class="header-anchor" href="#只写的引用现在会被标记未使用" aria-label="Permalink to &quot;只写的引用现在会被标记未使用&quot;">​</a></h2><p>TypeScript 2.6加入了修正的<code>--noUnusedLocals</code>和<code>--noUnusedParameters</code><a href="https://www.typescriptlang.org/docs/handbook/compiler-options.html" target="_blank" rel="noreferrer">编译选项</a>实现。 只被写但从没有被读的声明现在会被标记未使用。</p><h3 id="例子-4" tabindex="-1">例子 <a class="header-anchor" href="#例子-4" aria-label="Permalink to &quot;例子&quot;">​</a></h3><p>下面<code>n</code>和<code>m</code>都会被标记为未使用，因为它们的值从未被_读取_。之前 TypeScript 只会检查它们的值是否被_引用_。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">f</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">n</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    n </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">C</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> m</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">constructor</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.m </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">f</span><span style="color:#24292E;">(</span><span style="color:#E36209;">n</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    n </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">C</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#E36209;">m</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">constructor</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.m </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>另外仅被自己内部调用的函数也会被认为是未使用的。</p><h3 id="例子-5" tabindex="-1">例子 <a class="header-anchor" href="#例子-5" aria-label="Permalink to &quot;例子&quot;">​</a></h3><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">f</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">f</span><span style="color:#F6F6F4;">(); </span><span style="color:#7B7F8B;">// 错误：&#39;f&#39; 被声明，但它的值从未被使用</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">f</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">f</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 错误：&#39;f&#39; 被声明，但它的值从未被使用</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,50),e=[o];function t(c,r,y,F,E,i){return a(),n("div",null,e)}const u=s(p,[["render",t]]);export{d as __pageData,u as default};
