import{_ as e,o as t,c as o,V as s}from"./chunks/framework.ced88878.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{"display":"Imports Not Used As Values","oneline":"Specify emit/checking behavior for imports that are only used for types."},"headers":[],"relativePath":"zh/tsconfig-reference/options/importsNotUsedAsValues.md","lastUpdated":1681915487000}'),r={name:"zh/tsconfig-reference/options/importsNotUsedAsValues.md"},i=s('<p>Deprecated in favor of <a href="#verbatimModuleSyntax"><code>verbatimModuleSyntax</code></a>.</p><p>This flag controls how <code>import</code> works, there are 3 different options:</p><ul><li><p><code>remove</code>: The default behavior of dropping <code>import</code> statements which only reference types.</p></li><li><p><code>preserve</code>: Preserves all <code>import</code> statements whose values or types are never used. This can cause imports/side-effects to be preserved.</p></li><li><p><code>error</code>: This preserves all imports (the same as the preserve option), but will error when a value import is only used as a type. This might be useful if you want to ensure no values are being accidentally imported, but still make side-effect imports explicit.</p></li></ul><p>This flag works because you can use <code>import type</code> to explicitly create an <code>import</code> statement which should never be emitted into JavaScript.</p>',4),a=[i];function c(p,n,d,l,m,u){return t(),o("div",null,a)}const _=e(r,[["render",c]]);export{h as __pageData,_ as default};
