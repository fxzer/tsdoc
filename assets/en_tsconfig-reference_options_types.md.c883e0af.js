import{_ as s,o,c as e,V as a}from"./chunks/framework.ced88878.js";const E=JSON.parse('{"title":"","description":"","frontmatter":{"display":"Types","oneline":"Specify type package names to be included without being referenced in a source file."},"headers":[],"relativePath":"en/tsconfig-reference/options/types.md","lastUpdated":1681915487000}'),n={name:"en/tsconfig-reference/options/types.md"},p=a(`<p>By default all <em>visible</em> &quot;<code>@types</code>&quot; packages are included in your compilation. Packages in <code>node_modules/@types</code> of any enclosing folder are considered <em>visible</em>. For example, that means packages within <code>./node_modules/@types/</code>, <code>../node_modules/@types/</code>, <code>../../node_modules/@types/</code>, and so on.</p><p>If <code>types</code> is specified, only packages listed will be included in the global scope. For instance:</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">compilerOptions</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">types</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">node</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">jest</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">express</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">]</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;types&quot;</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;node&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;jest&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;express&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>This <code>tsconfig.json</code> file will <em>only</em> include <code>./node_modules/@types/node</code>, <code>./node_modules/@types/jest</code> and <code>./node_modules/@types/express</code>. Other packages under <code>node_modules/@types/*</code> will not be included.</p><h3 id="what-does-this-affect" tabindex="-1">What does this affect? <a class="header-anchor" href="#what-does-this-affect" aria-label="Permalink to &quot;What does this affect?&quot;">â€‹</a></h3><p>This option does not affect how <code>@types/*</code> are included in your application code, for example if you had the above <code>compilerOptions</code> example with code like:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">as</span><span style="color:#F6F6F4;"> moment </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">moment</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">moment</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">format</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">MMMM Do YYYY, h:mm:ss a</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> moment </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;moment&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">moment</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;MMMM Do YYYY, h:mm:ss a&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>The <code>moment</code> import would be fully typed.</p><p>When you have this option set, by not including a module in the <code>types</code> array it:</p><ul><li>Will not add globals to your project (e.g <code>process</code> in node, or <code>expect</code> in Jest)</li><li>Will not have exports appear as auto-import recommendations</li></ul><p>This feature differs from <a href="#typeRoots"><code>typeRoots</code></a> in that it is about specifying only the exact types you want included, whereas <a href="#typeRoots"><code>typeRoots</code></a> supports saying you want particular folders.</p>`,11),l=[p];function t(c,r,i,d,y,u){return o(),e("div",null,l)}const m=s(n,[["render",t]]);export{E as __pageData,m as default};
