import{_ as s,o as n,c as a,V as l}from"./chunks/framework.ced88878.js";const C=JSON.parse('{"title":"TypeScript 2.6","description":"","frontmatter":{"title":"TypeScript 2.6","layout":"docs","permalink":"/docs/handbook/release-notes/typescript-2-6.html","oneline":"TypeScript 2.6 Release Notes"},"headers":[],"relativePath":"en/release-notes/TypeScript[2.6].md","lastUpdated":1681915487000}'),p={name:"en/release-notes/TypeScript[2.6].md"},o=l(`<h2 id="strict-function-types" tabindex="-1">Strict function types <a class="header-anchor" href="#strict-function-types" aria-label="Permalink to &quot;Strict function types&quot;">​</a></h2><p>TypeScript 2.6 introduces a new strict checking flag, <a href="/tsdoc-vitepress/tsconfig#strictFunctionTypes"><code>strictFunctionTypes</code></a>. The <a href="/tsdoc-vitepress/tsconfig#strictFunctionTypes"><code>strictFunctionTypes</code></a> switch is part of the <a href="/tsdoc-vitepress/tsconfig#strict"><code>strict</code></a> family of switches, meaning that it defaults to on in <a href="/tsdoc-vitepress/tsconfig#strict"><code>strict</code></a> mode. You can opt-out by setting <code>--strictFunctionTypes false</code> on your command line or in your tsconfig.json.</p><p>Under <a href="/tsdoc-vitepress/tsconfig#strictFunctionTypes"><code>strictFunctionTypes</code></a> function type parameter positions are checked <em>contravariantly</em> instead of <em>bivariantly</em>. For some background on what variance means for function types check out <a href="https://www.stephanboyer.com/post/132/what-are-covariance-and-contravariance" target="_blank" rel="noreferrer">What are covariance and contravariance?</a>.</p><p>The stricter checking applies to all function types, <em>except</em> those originating in method or constructor declarations. Methods are excluded specifically to ensure generic classes and interfaces (such as <code>Array&lt;T&gt;</code>) continue to mostly relate covariantly.</p><p>Consider the following example in which <code>Animal</code> is the supertype of <code>Dog</code> and <code>Cat</code>:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">declare</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">f1</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Animal</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">declare</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">f2</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Dog</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">declare</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">f3</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Cat</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">f1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> f2; </span><span style="color:#7B7F8B;">// Error with --strictFunctionTypes</span></span>
<span class="line"><span style="color:#F6F6F4;">f2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> f1; </span><span style="color:#7B7F8B;">// Ok</span></span>
<span class="line"><span style="color:#F6F6F4;">f2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> f3; </span><span style="color:#7B7F8B;">// Error</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">declare</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">f1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Animal</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">void</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">declare</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">f2</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Dog</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">void</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">declare</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">f3</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Cat</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">void</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">f1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> f2; </span><span style="color:#6A737D;">// Error with --strictFunctionTypes</span></span>
<span class="line"><span style="color:#24292E;">f2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> f1; </span><span style="color:#6A737D;">// Ok</span></span>
<span class="line"><span style="color:#24292E;">f2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> f3; </span><span style="color:#6A737D;">// Error</span></span></code></pre></div><p>The first assignment is permitted in default type checking mode, but flagged as an error in strict function types mode. Intuitively, the default mode permits the assignment because it is <em>possibly</em> sound, whereas strict function types mode makes it an error because it isn&#39;t <em>provably</em> sound. In either mode the third assignment is an error because it is <em>never</em> sound.</p><p>Another way to describe the example is that the type <code>(x: T) =&gt; void</code> is <em>bivariant</em> (i.e. covariant <em>or</em> contravariant) for <code>T</code> in default type checking mode, but <em>contravariant</em> for <code>T</code> in strict function types mode.</p><h5 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h5><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Comparer</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F6F6F4;">&gt; {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">compare</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">a</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">b</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">declare</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> animalComparer</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Comparer</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">Animal</span><span style="color:#F6F6F4;">&gt;;</span></span>
<span class="line"><span style="color:#F286C4;">declare</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> dogComparer</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Comparer</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">Dog</span><span style="color:#F6F6F4;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">animalComparer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> dogComparer; </span><span style="color:#7B7F8B;">// Error</span></span>
<span class="line"><span style="color:#F6F6F4;">dogComparer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> animalComparer; </span><span style="color:#7B7F8B;">// Ok</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Comparer</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">compare</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">a</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">, </span><span style="color:#E36209;">b</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">declare</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> animalComparer</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Comparer</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Animal</span><span style="color:#24292E;">&gt;;</span></span>
<span class="line"><span style="color:#D73A49;">declare</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> dogComparer</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Comparer</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Dog</span><span style="color:#24292E;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">animalComparer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> dogComparer; </span><span style="color:#6A737D;">// Error</span></span>
<span class="line"><span style="color:#24292E;">dogComparer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> animalComparer; </span><span style="color:#6A737D;">// Ok</span></span></code></pre></div><p>The first assignment is now an error. Effectively, <code>T</code> is contravariant in <code>Comparer&lt;T&gt;</code> because it is used only in function type parameter positions.</p><p>By the way, note that whereas some languages (e.g. C# and Scala) require variance annotations (<code>out</code>/<code>in</code> or <code>+</code>/<code>-</code>), variance emerges naturally from the actual use of a type parameter within a generic type due to TypeScript&#39;s structural type system.</p><h5 id="note" tabindex="-1">Note <a class="header-anchor" href="#note" aria-label="Permalink to &quot;Note&quot;">​</a></h5><p>Under <a href="/tsdoc-vitepress/tsconfig#strictFunctionTypes"><code>strictFunctionTypes</code></a> the first assignment is still permitted if <code>compare</code> was declared as a method. Effectively, <code>T</code> is bivariant in <code>Comparer&lt;T&gt;</code> because it is used only in method parameter positions.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Comparer</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F6F6F4;">&gt; {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">compare</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">a</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">b</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;">)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">declare</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> animalComparer</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Comparer</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">Animal</span><span style="color:#F6F6F4;">&gt;;</span></span>
<span class="line"><span style="color:#F286C4;">declare</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> dogComparer</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Comparer</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">Dog</span><span style="color:#F6F6F4;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">animalComparer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> dogComparer; </span><span style="color:#7B7F8B;">// Ok because of bivariance</span></span>
<span class="line"><span style="color:#F6F6F4;">dogComparer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> animalComparer; </span><span style="color:#7B7F8B;">// Ok</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Comparer</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">compare</span><span style="color:#24292E;">(</span><span style="color:#E36209;">a</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">, </span><span style="color:#E36209;">b</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">declare</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> animalComparer</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Comparer</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Animal</span><span style="color:#24292E;">&gt;;</span></span>
<span class="line"><span style="color:#D73A49;">declare</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> dogComparer</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Comparer</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Dog</span><span style="color:#24292E;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">animalComparer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> dogComparer; </span><span style="color:#6A737D;">// Ok because of bivariance</span></span>
<span class="line"><span style="color:#24292E;">dogComparer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> animalComparer; </span><span style="color:#6A737D;">// Ok</span></span></code></pre></div><p>TypeScript 2.6 also improves type inference involving contravariant positions:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">combine</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F6F6F4;">&gt;(</span><span style="color:#F286C4;">...</span><span style="color:#FFB86C;font-style:italic;">funcs</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> ((</span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;">)[])</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> f </span><span style="color:#F286C4;">of</span><span style="color:#F6F6F4;"> funcs) </span><span style="color:#62E884;">f</span><span style="color:#F6F6F4;">(x);</span></span>
<span class="line"><span style="color:#F6F6F4;">  };</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">animalFunc</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Animal</span><span style="color:#F6F6F4;">) {}</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">dogFunc</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Dog</span><span style="color:#F6F6F4;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> combined </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">combine</span><span style="color:#F6F6F4;">(animalFunc, dogFunc); </span><span style="color:#7B7F8B;">// (x: Dog) =&gt; void</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">combine</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">&gt;(</span><span style="color:#D73A49;">...</span><span style="color:#E36209;">funcs</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> ((</span><span style="color:#E36209;">x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">void</span><span style="color:#24292E;">)[])</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">void</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#E36209;">x</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">f</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> funcs) </span><span style="color:#6F42C1;">f</span><span style="color:#24292E;">(x);</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">animalFunc</span><span style="color:#24292E;">(</span><span style="color:#E36209;">x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Animal</span><span style="color:#24292E;">) {}</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dogFunc</span><span style="color:#24292E;">(</span><span style="color:#E36209;">x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Dog</span><span style="color:#24292E;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> combined </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">combine</span><span style="color:#24292E;">(animalFunc, dogFunc); </span><span style="color:#6A737D;">// (x: Dog) =&gt; void</span></span></code></pre></div><p>Above, all inferences for <code>T</code> originate in contravariant positions, and we therefore infer the <em>best common subtype</em> for <code>T</code>. This contrasts with inferences from covariant positions, where we infer the <em>best common supertype</em>.</p><h2 id="cache-tagged-template-objects-in-modules" tabindex="-1">Cache tagged template objects in modules <a class="header-anchor" href="#cache-tagged-template-objects-in-modules" aria-label="Permalink to &quot;Cache tagged template objects in modules&quot;">​</a></h2><p>TypeScript 2.6 fixes the tagged string template emit to align better with the ECMAScript spec. As per the <a href="https://tc39.github.io/ecma262/#sec-gettemplateobject" target="_blank" rel="noreferrer">ECMAScript spec</a>, every time a template tag is evaluated, the <em>same</em> template strings object (the same <code>TemplateStringsArray</code>) should be passed as the first argument. Before TypeScript 2.6, the generated output was a completely new template object each time. Though the string contents are the same, this emit affects libraries that use the identity of the string for cache invalidation purposes, e.g. <a href="https://github.com/PolymerLabs/lit-html/issues/58" target="_blank" rel="noreferrer">lit-html</a>.</p><h5 id="example-1" tabindex="-1">Example <a class="header-anchor" href="#example-1" aria-label="Permalink to &quot;Example&quot;">​</a></h5><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">id</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">TemplateStringsArray</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> x;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">templateObjectFactory</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">id</span><span style="color:#E7EE98;">\`hello world\`</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> result </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">templateObjectFactory</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">templateObjectFactory</span><span style="color:#F6F6F4;">(); </span><span style="color:#7B7F8B;">// true in TS 2.6</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">(</span><span style="color:#E36209;">x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TemplateStringsArray</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> x;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">templateObjectFactory</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#032F62;">\`hello world\`</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">templateObjectFactory</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">templateObjectFactory</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// true in TS 2.6</span></span></code></pre></div><p>Results in the following generated code:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">use strict</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> __makeTemplateObject </span><span style="color:#F286C4;">=</span></span>
<span class="line"><span style="color:#F6F6F4;">  (</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.__makeTemplateObject) </span><span style="color:#F286C4;">||</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">cooked</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">raw</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (Object.defineProperty) {</span></span>
<span class="line"><span style="color:#F6F6F4;">      Object.</span><span style="color:#62E884;">defineProperty</span><span style="color:#F6F6F4;">(cooked, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">raw</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, { value</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> raw });</span></span>
<span class="line"><span style="color:#F6F6F4;">    } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">      cooked.raw </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> raw;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> cooked;</span></span>
<span class="line"><span style="color:#F6F6F4;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">id</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> x;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> _a;</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">templateObjectFactory</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">id</span><span style="color:#F6F6F4;">(</span></span>
<span class="line"><span style="color:#F6F6F4;">    _a </span><span style="color:#F286C4;">||</span><span style="color:#F6F6F4;"> (_a </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">__makeTemplateObject</span><span style="color:#F6F6F4;">([</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hello world</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">], [</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hello world</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">]))</span></span>
<span class="line"><span style="color:#F6F6F4;">  );</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> result </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">templateObjectFactory</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">templateObjectFactory</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;use strict&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> __makeTemplateObject </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">  (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.__makeTemplateObject) </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">cooked</span><span style="color:#24292E;">, </span><span style="color:#E36209;">raw</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (Object.defineProperty) {</span></span>
<span class="line"><span style="color:#24292E;">      Object.</span><span style="color:#6F42C1;">defineProperty</span><span style="color:#24292E;">(cooked, </span><span style="color:#032F62;">&quot;raw&quot;</span><span style="color:#24292E;">, { value: raw });</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      cooked.raw </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> raw;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> cooked;</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">(</span><span style="color:#E36209;">x</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> x;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> _a;</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">templateObjectFactory</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    _a </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> (_a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">__makeTemplateObject</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&quot;hello world&quot;</span><span style="color:#24292E;">], [</span><span style="color:#032F62;">&quot;hello world&quot;</span><span style="color:#24292E;">]))</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">templateObjectFactory</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">templateObjectFactory</span><span style="color:#24292E;">();</span></span></code></pre></div><blockquote><p>Note: This change brings a new emit helper, <code>__makeTemplateObject</code>; if you are using <a href="/tsdoc-vitepress/tsconfig#importHelpers"><code>importHelpers</code></a> with <a href="https://github.com/Microsoft/tslib" target="_blank" rel="noreferrer"><code>tslib</code></a>, an updated to version 1.8 or later.</p></blockquote><h2 id="localized-diagnostics-on-the-command-line" tabindex="-1">Localized diagnostics on the command line <a class="header-anchor" href="#localized-diagnostics-on-the-command-line" aria-label="Permalink to &quot;Localized diagnostics on the command line&quot;">​</a></h2><p>TypeScript 2.6 npm package ships with localized versions of diagnostic messages for 13 languages. The localized messages are available when using <code>--locale</code> flag on the command line.</p><h5 id="example-2" tabindex="-1">Example <a class="header-anchor" href="#example-2" aria-label="Permalink to &quot;Example&quot;">​</a></h5><p>Error messages in Russian:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">c:\\ts&gt;tsc </span><span style="color:#BF9EEE;">--v</span></span>
<span class="line"><span style="color:#F6F6F4;">Version </span><span style="color:#E7EE98;">2.6.0-dev.</span><span style="color:#BF9EEE;">20171003</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">c:\\ts&gt;tsc </span><span style="color:#BF9EEE;">--locale</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">ru</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--pretty</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">c:</span><span style="color:#F286C4;">\\t</span><span style="color:#E7EE98;">est</span><span style="color:#F286C4;">\\a</span><span style="color:#E7EE98;">.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#97E1F1;">..</span><span style="color:#F6F6F4;">/</span><span style="color:#97E1F1;">test</span><span style="color:#F6F6F4;">/a.ts(1,5): error TS2322: Тип</span><span style="color:#DEE492;"> &quot;&quot;</span><span style="color:#F6F6F4;">string</span><span style="color:#DEE492;">&quot;&quot;</span><span style="color:#F6F6F4;"> не может быть назначен для типа</span><span style="color:#DEE492;"> &quot;</span><span style="color:#E7EE98;">number</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;"> var x: number =</span><span style="color:#DEE492;"> &quot;</span><span style="color:#E7EE98;">string</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">      ~</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">c:\\ts&gt;tsc</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--v</span></span>
<span class="line"><span style="color:#6F42C1;">Version</span><span style="color:#24292E;"> </span><span style="color:#032F62;">2.6.0-dev.</span><span style="color:#005CC5;">20171003</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">c:\\ts&gt;tsc</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--locale</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ru</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--pretty</span><span style="color:#24292E;"> </span><span style="color:#032F62;">c:</span><span style="color:#005CC5;">\\t</span><span style="color:#032F62;">est</span><span style="color:#005CC5;">\\a</span><span style="color:#032F62;">.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">..</span><span style="color:#6F42C1;">/</span><span style="color:#005CC5;">test</span><span style="color:#6F42C1;">/a.ts(1,5</span><span style="color:#24292E;">): error TS2322: Тип</span><span style="color:#032F62;"> &quot;&quot;</span><span style="color:#24292E;">string</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;"> не может быть назначен для типа</span><span style="color:#032F62;"> &quot;number&quot;</span><span style="color:#24292E;">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">1</span><span style="color:#24292E;"> var x: number =</span><span style="color:#032F62;"> &quot;string&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">~</span></span></code></pre></div><p>And help in Japanese:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">PS </span><span style="color:#E7EE98;">C:</span><span style="color:#F286C4;">\\t</span><span style="color:#F6F6F4;">s</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">tsc</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--v</span></span>
<span class="line"><span style="color:#F6F6F4;">Version </span><span style="color:#E7EE98;">2.6.0-dev.</span><span style="color:#BF9EEE;">20171003</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">PS </span><span style="color:#E7EE98;">C:</span><span style="color:#F286C4;">\\t</span><span style="color:#F6F6F4;">s</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">tsc</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--locale</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">ja-jp</span></span>
<span class="line"><span style="color:#F6F6F4;">バージョン </span><span style="color:#E7EE98;">2.6.0-dev.</span><span style="color:#BF9EEE;">20171003</span></span>
<span class="line"><span style="color:#F6F6F4;">構文: </span><span style="color:#E7EE98;">tsc</span><span style="color:#F6F6F4;"> [オプション] [ファイル ...]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">例:  </span><span style="color:#E7EE98;">tsc</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">hello.ts</span></span>
<span class="line"><span style="color:#F6F6F4;">    tsc </span><span style="color:#BF9EEE;">--outFile</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">file.js</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">file.ts</span></span>
<span class="line"><span style="color:#F6F6F4;">    tsc </span><span style="color:#E7EE98;">@args.txt</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">オプション:</span></span>
<span class="line"><span style="color:#F6F6F4;"> -h, </span><span style="color:#BF9EEE;">--help</span><span style="color:#F6F6F4;">                                 </span><span style="color:#E7EE98;">このメッセージを表示します。</span></span>
<span class="line"><span style="color:#F6F6F4;"> --all                                      </span><span style="color:#E7EE98;">コンパイラ</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">オプションをすべて表示します。</span></span>
<span class="line"><span style="color:#F6F6F4;"> -v, </span><span style="color:#BF9EEE;">--version</span><span style="color:#F6F6F4;">                              </span><span style="color:#E7EE98;">コンパイラのバージョンを表示します。</span></span>
<span class="line"><span style="color:#F6F6F4;"> --init                                     </span><span style="color:#E7EE98;">TypeScript</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">プロジェクトを初期化して、tsconfig.json</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">ファイルを作成します。</span></span>
<span class="line"><span style="color:#F6F6F4;"> -p </span><span style="color:#E7EE98;">ファイルまたはディレクトリ,</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--project</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">ファイルまたはディレクトリ</span><span style="color:#F6F6F4;">  </span><span style="color:#E7EE98;">構成ファイルか、</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">tsconfig.json</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">を含むフォルダーにパスが指定されたプロジェクトをコ</span></span>
<span class="line"><span style="color:#F6F6F4;">ンパイルします。</span></span>
<span class="line"><span style="color:#F6F6F4;"> --pretty                                   </span><span style="color:#E7EE98;">色とコンテキストを使用してエラーとメッセージにスタイルを適用します</span><span style="color:#F6F6F4;"> (試験的)。</span></span>
<span class="line"><span style="color:#F6F6F4;"> -w, </span><span style="color:#BF9EEE;">--watch</span><span style="color:#F6F6F4;">                                </span><span style="color:#E7EE98;">入力ファイルを監視します。</span></span>
<span class="line"><span style="color:#F6F6F4;"> -t </span><span style="color:#E7EE98;">バージョン,</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--target</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">バージョン</span><span style="color:#F6F6F4;">                   </span><span style="color:#E7EE98;">ECMAScript</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">のターゲット</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">バージョンを指定します:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">ES3</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> (既定)、</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">ES5</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">、</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">ES2015</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">、</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">ES2016</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">、</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">ES2017</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">、</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">ES</span></span>
<span class="line"><span style="color:#E7EE98;">NEXT</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">。</span></span>
<span class="line"><span style="color:#F6F6F4;"> -m </span><span style="color:#E7EE98;">種類,</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--module</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">種類</span><span style="color:#F6F6F4;">                         </span><span style="color:#E7EE98;">モジュール</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">コード生成を指定します:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">none</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">、</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">commonjs</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">、</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">amd</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">、</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">system</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">、</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">umd</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">、</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">es2015</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">、</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">ESNext</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">。</span></span>
<span class="line"><span style="color:#F6F6F4;"> --lib                                      </span><span style="color:#E7EE98;">コンパイルに含めるライブラリ</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">ファイルを指定します:</span></span>
<span class="line"><span style="color:#F6F6F4;">                                              &#39;es5&#39; </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">es6</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">es2015</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">es7</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">es2016</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">es2017</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">esnext</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">dom</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">dom.iterable</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">webworker</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">scripthost</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">es201</span></span>
<span class="line"><span style="color:#E7EE98;">5.core</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">es2015.collection</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">es2015.generator</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">es2015.iterable</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">es2015.promise</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">es2015.proxy</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">es2015.reflect</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">es2015.symbol</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">es2015.symbol.wellkno</span></span>
<span class="line"><span style="color:#E7EE98;">wn</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">es2016.array.include</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">es2017.object</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">es2017.sharedmemory</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">es2017.string</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">es2017.intl</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">esnext.asynciterable</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;"> --allowJs                                  </span><span style="color:#E7EE98;">javascript</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">ファイルのコンパイルを許可します。</span></span>
<span class="line"><span style="color:#F6F6F4;"> --jsx </span><span style="color:#E7EE98;">種類</span><span style="color:#F6F6F4;">                                   </span><span style="color:#E7EE98;">JSX</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">コード生成を指定します:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">preserve</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">、</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">react-native</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">、</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">react</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">。</span></span>
<span class="line"><span style="color:#F6F6F4;"> -d, </span><span style="color:#BF9EEE;">--declaration</span><span style="color:#F6F6F4;">                          </span><span style="color:#E7EE98;">対応する</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">.d.ts</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">ファイルを生成します。</span></span>
<span class="line"><span style="color:#F6F6F4;"> --sourceMap                                </span><span style="color:#E7EE98;">対応する</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">.map</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">ファイルを生成します。</span></span>
<span class="line"><span style="color:#F6F6F4;"> --outFile </span><span style="color:#E7EE98;">ファイル</span><span style="color:#F6F6F4;">                             </span><span style="color:#E7EE98;">出力を連結して</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">つのファイルを生成します。</span></span>
<span class="line"><span style="color:#F6F6F4;"> --outDir </span><span style="color:#E7EE98;">ディレクトリ</span><span style="color:#F6F6F4;">                            </span><span style="color:#E7EE98;">ディレクトリへ出力構造をリダイレクトします。</span></span>
<span class="line"><span style="color:#F6F6F4;"> --removeComments                           </span><span style="color:#E7EE98;">コメントを出力しないでください。</span></span>
<span class="line"><span style="color:#F6F6F4;"> --noEmit                                   </span><span style="color:#E7EE98;">出力しないでください。</span></span>
<span class="line"><span style="color:#F6F6F4;"> --strict                                   </span><span style="color:#E7EE98;">strict</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">型チェックのオプションをすべて有効にします。</span></span>
<span class="line"><span style="color:#F6F6F4;"> --noImplicitAny                            </span><span style="color:#E7EE98;">暗黙的な</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">any</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">型を含む式と宣言に関するエラーを発生させます。</span></span>
<span class="line"><span style="color:#F6F6F4;"> --strictNullChecks                         </span><span style="color:#E7EE98;">厳格な</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">null</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">チェックを有効にします。</span></span>
<span class="line"><span style="color:#F6F6F4;"> --noImplicitThis                           </span><span style="color:#E7EE98;">暗黙的な</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">any</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">型を持つ</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">this</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">式でエラーが発生します。</span></span>
<span class="line"><span style="color:#F6F6F4;"> --alwaysStrict                             </span><span style="color:#E7EE98;">厳格モードで解析してソース</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">ファイルごとに</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">use strict</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">を生成します。</span></span>
<span class="line"><span style="color:#F6F6F4;"> --noUnusedLocals                           </span><span style="color:#E7EE98;">使用されていないローカルに関するエラーを報告します。</span></span>
<span class="line"><span style="color:#F6F6F4;"> --noUnusedParameters                       </span><span style="color:#E7EE98;">使用されていないパラメーターに関するエラーを報告します。</span></span>
<span class="line"><span style="color:#F6F6F4;"> --noImplicitReturns                        </span><span style="color:#E7EE98;">関数の一部のコード</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">パスが値を返さない場合にエラーを報告します。</span></span>
<span class="line"><span style="color:#F6F6F4;"> --noFallthroughCasesInSwitch               </span><span style="color:#E7EE98;">switch</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">ステートメントに</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">case</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">のフォールスルーがある場合にエラーを報告します。</span></span>
<span class="line"><span style="color:#F6F6F4;"> --types                                    </span><span style="color:#E7EE98;">コンパイルに含む型宣言ファイル。</span></span>
<span class="line"><span style="color:#F6F6F4;"> @&lt;ファイル&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">PS</span><span style="color:#24292E;"> </span><span style="color:#032F62;">C:</span><span style="color:#005CC5;">\\t</span><span style="color:#24292E;">s</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tsc</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--v</span></span>
<span class="line"><span style="color:#6F42C1;">Version</span><span style="color:#24292E;"> </span><span style="color:#032F62;">2.6.0-dev.</span><span style="color:#005CC5;">20171003</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">PS</span><span style="color:#24292E;"> </span><span style="color:#032F62;">C:</span><span style="color:#005CC5;">\\t</span><span style="color:#24292E;">s</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tsc</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--locale</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ja-jp</span></span>
<span class="line"><span style="color:#6F42C1;">バージョン</span><span style="color:#24292E;"> </span><span style="color:#032F62;">2.6.0-dev.</span><span style="color:#005CC5;">20171003</span></span>
<span class="line"><span style="color:#6F42C1;">構文:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tsc</span><span style="color:#24292E;"> [オプション] [ファイル ...]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">例:</span><span style="color:#24292E;">  </span><span style="color:#032F62;">tsc</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hello.ts</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">tsc</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--outFile</span><span style="color:#24292E;"> </span><span style="color:#032F62;">file.js</span><span style="color:#24292E;"> </span><span style="color:#032F62;">file.ts</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">tsc</span><span style="color:#24292E;"> </span><span style="color:#032F62;">@args.txt</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">オプション:</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">-h,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--help</span><span style="color:#24292E;">                                 </span><span style="color:#032F62;">このメッセージを表示します。</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">--all</span><span style="color:#24292E;">                                      </span><span style="color:#032F62;">コンパイラ</span><span style="color:#24292E;"> </span><span style="color:#032F62;">オプションをすべて表示します。</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">-v,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--version</span><span style="color:#24292E;">                              </span><span style="color:#032F62;">コンパイラのバージョンを表示します。</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">--init</span><span style="color:#24292E;">                                     </span><span style="color:#032F62;">TypeScript</span><span style="color:#24292E;"> </span><span style="color:#032F62;">プロジェクトを初期化して、tsconfig.json</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ファイルを作成します。</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">-p</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ファイルまたはディレクトリ,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--project</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ファイルまたはディレクトリ</span><span style="color:#24292E;">  </span><span style="color:#032F62;">構成ファイルか、&#39;tsconfig.json&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">を含むフォルダーにパスが指定されたプロジェクトをコ</span></span>
<span class="line"><span style="color:#6F42C1;">ンパイルします。</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">--pretty</span><span style="color:#24292E;">                                   </span><span style="color:#032F62;">色とコンテキストを使用してエラーとメッセージにスタイルを適用します</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">試験的</span><span style="color:#24292E;">)。</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">-w,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--watch</span><span style="color:#24292E;">                                </span><span style="color:#032F62;">入力ファイルを監視します。</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">-t</span><span style="color:#24292E;"> </span><span style="color:#032F62;">バージョン,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--target</span><span style="color:#24292E;"> </span><span style="color:#032F62;">バージョン</span><span style="color:#24292E;">                   </span><span style="color:#032F62;">ECMAScript</span><span style="color:#24292E;"> </span><span style="color:#032F62;">のターゲット</span><span style="color:#24292E;"> </span><span style="color:#032F62;">バージョンを指定します:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;ES3&#39;</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">既定</span><span style="color:#24292E;">)、</span><span style="color:#032F62;">&#39;ES5&#39;</span><span style="color:#24292E;">、</span><span style="color:#032F62;">&#39;ES2015&#39;</span><span style="color:#24292E;">、</span><span style="color:#032F62;">&#39;ES2016&#39;</span><span style="color:#24292E;">、</span><span style="color:#032F62;">&#39;ES2017&#39;</span><span style="color:#24292E;">、</span><span style="color:#032F62;">&#39;ES</span></span>
<span class="line"><span style="color:#032F62;">NEXT&#39;</span><span style="color:#24292E;">。</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">-m</span><span style="color:#24292E;"> </span><span style="color:#032F62;">種類,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--module</span><span style="color:#24292E;"> </span><span style="color:#032F62;">種類</span><span style="color:#24292E;">                         </span><span style="color:#032F62;">モジュール</span><span style="color:#24292E;"> </span><span style="color:#032F62;">コード生成を指定します:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;none&#39;、&#39;commonjs&#39;、&#39;amd&#39;、&#39;system&#39;、&#39;umd&#39;、&#39;es2015&#39;、&#39;ESNext&#39;。</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">--lib</span><span style="color:#24292E;">                                      </span><span style="color:#032F62;">コンパイルに含めるライブラリ</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ファイルを指定します:</span></span>
<span class="line"><span style="color:#24292E;">                                              </span><span style="color:#6F42C1;">&#39;es5&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;es6&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;es2015&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;es7&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;es2016&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;es2017&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;esnext&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;dom&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;dom.iterable&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;webworker&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;scripthost&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;es201</span></span>
<span class="line"><span style="color:#032F62;">5.core&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;es2015.collection&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;es2015.generator&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;es2015.iterable&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;es2015.promise&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;es2015.proxy&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;es2015.reflect&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;es2015.symbol&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;es2015.symbol.wellkno</span></span>
<span class="line"><span style="color:#032F62;">wn&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;es2016.array.include&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;es2017.object&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;es2017.sharedmemory&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;es2017.string&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;es2017.intl&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;esnext.asynciterable&#39;</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">--allowJs</span><span style="color:#24292E;">                                  </span><span style="color:#032F62;">javascript</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ファイルのコンパイルを許可します。</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">--jsx</span><span style="color:#24292E;"> </span><span style="color:#032F62;">種類</span><span style="color:#24292E;">                                   </span><span style="color:#032F62;">JSX</span><span style="color:#24292E;"> </span><span style="color:#032F62;">コード生成を指定します:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;preserve&#39;、&#39;react-native&#39;、&#39;react&#39;。</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">-d,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--declaration</span><span style="color:#24292E;">                          </span><span style="color:#032F62;">対応する</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;.d.ts&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ファイルを生成します。</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">--sourceMap</span><span style="color:#24292E;">                                </span><span style="color:#032F62;">対応する</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;.map&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ファイルを生成します。</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">--outFile</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ファイル</span><span style="color:#24292E;">                             </span><span style="color:#032F62;">出力を連結して</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">つのファイルを生成します。</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">--outDir</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ディレクトリ</span><span style="color:#24292E;">                            </span><span style="color:#032F62;">ディレクトリへ出力構造をリダイレクトします。</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">--removeComments</span><span style="color:#24292E;">                           </span><span style="color:#032F62;">コメントを出力しないでください。</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">--noEmit</span><span style="color:#24292E;">                                   </span><span style="color:#032F62;">出力しないでください。</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">--strict</span><span style="color:#24292E;">                                   </span><span style="color:#032F62;">strict</span><span style="color:#24292E;"> </span><span style="color:#032F62;">型チェックのオプションをすべて有効にします。</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">--noImplicitAny</span><span style="color:#24292E;">                            </span><span style="color:#032F62;">暗黙的な</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;any&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">型を含む式と宣言に関するエラーを発生させます。</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">--strictNullChecks</span><span style="color:#24292E;">                         </span><span style="color:#032F62;">厳格な</span><span style="color:#24292E;"> </span><span style="color:#032F62;">null</span><span style="color:#24292E;"> </span><span style="color:#032F62;">チェックを有効にします。</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">--noImplicitThis</span><span style="color:#24292E;">                           </span><span style="color:#032F62;">暗黙的な</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;any&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">型を持つ</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;this&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">式でエラーが発生します。</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">--alwaysStrict</span><span style="color:#24292E;">                             </span><span style="color:#032F62;">厳格モードで解析してソース</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ファイルごとに</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;use strict&quot;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">を生成します。</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">--noUnusedLocals</span><span style="color:#24292E;">                           </span><span style="color:#032F62;">使用されていないローカルに関するエラーを報告します。</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">--noUnusedParameters</span><span style="color:#24292E;">                       </span><span style="color:#032F62;">使用されていないパラメーターに関するエラーを報告します。</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">--noImplicitReturns</span><span style="color:#24292E;">                        </span><span style="color:#032F62;">関数の一部のコード</span><span style="color:#24292E;"> </span><span style="color:#032F62;">パスが値を返さない場合にエラーを報告します。</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">--noFallthroughCasesInSwitch</span><span style="color:#24292E;">               </span><span style="color:#032F62;">switch</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ステートメントに</span><span style="color:#24292E;"> </span><span style="color:#032F62;">case</span><span style="color:#24292E;"> </span><span style="color:#032F62;">のフォールスルーがある場合にエラーを報告します。</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">--types</span><span style="color:#24292E;">                                    </span><span style="color:#032F62;">コンパイルに含む型宣言ファイル。</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">@&lt;ファイル&gt;</span></span></code></pre></div><h2 id="suppress-errors-in-ts-files-using-ts-ignore-comments" tabindex="-1">Suppress errors in .ts files using &#39;// @ts-ignore&#39; comments <a class="header-anchor" href="#suppress-errors-in-ts-files-using-ts-ignore-comments" aria-label="Permalink to &quot;Suppress errors in .ts files using &#39;// @ts-ignore&#39; comments&quot;">​</a></h2><p>TypeScript 2.6 support suppressing errors in .js files using <code>// @ts-ignore</code> comments placed above the offending lines.</p><h5 id="example-3" tabindex="-1">Example <a class="header-anchor" href="#example-3" aria-label="Permalink to &quot;Example&quot;">​</a></h5><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// @ts-ignore: Unreachable code error</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// @ts-ignore: Unreachable code error</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>A <code>// @ts-ignore</code> comment suppresses all errors that originate on the following line. It is recommended practice to have the remainder of the comment following <code>@ts-ignore</code> explain which error is being suppressed.</p><p>Please note that this comment only suppresses the error reporting, and we recommend you use this comments <em>very sparingly</em>.</p><h2 id="faster-tsc-watch" tabindex="-1">Faster <code>tsc --watch</code> <a class="header-anchor" href="#faster-tsc-watch" aria-label="Permalink to &quot;Faster \`tsc --watch\`&quot;">​</a></h2><p>TypeScript 2.6 brings a faster <code>--watch</code> implementation. The new version optimizes code generation and checking for code bases using ES modules. Changes detected in a module file will result in <em>only</em> regenerating the changed module, and files that depend on it, instead of the whole project. Projects with large number of files should reap the most benefit from this change.</p><p>The new implementation also brings performance enhancements to watching in tsserver. The watcher logic has been completely rewritten to respond faster to change events.</p><h2 id="write-only-references-now-flagged-as-unused" tabindex="-1">Write-only references now flagged as unused <a class="header-anchor" href="#write-only-references-now-flagged-as-unused" aria-label="Permalink to &quot;Write-only references now flagged as unused&quot;">​</a></h2><p>TypeScript 2.6 adds revised implementation the <a href="/tsdoc-vitepress/tsconfig#noUnusedLocals"><code>noUnusedLocals</code></a> and <a href="/tsdoc-vitepress/tsconfig#noUnusedParameters"><code>noUnusedParameters</code></a> <a href="/tsdoc-vitepress/docs/handbook/compiler-options.html">compiler options</a>. Declarations are only written to but never read from are now flagged as unused.</p><h5 id="example-4" tabindex="-1">Example <a class="header-anchor" href="#example-4" aria-label="Permalink to &quot;Example&quot;">​</a></h5><p>Bellow both <code>n</code> and <code>m</code> will be marked as unused, because their values are never <em>read</em>. Previously TypeScript would only check whether their values were <em>referenced</em>.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">f</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">n</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  n </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">C</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> m</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">constructor</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.m </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">f</span><span style="color:#24292E;">(</span><span style="color:#E36209;">n</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  n </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">C</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#E36209;">m</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">constructor</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.m </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Also functions that are only called within their own bodies are considered unused.</p><h5 id="example-5" tabindex="-1">Example <a class="header-anchor" href="#example-5" aria-label="Permalink to &quot;Example&quot;">​</a></h5><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">f</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">f</span><span style="color:#F6F6F4;">(); </span><span style="color:#7B7F8B;">// Error: &#39;f&#39; is declared but its value is never read</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">f</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">f</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// Error: &#39;f&#39; is declared but its value is never read</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,49),e=[o];function t(c,r,y,F,E,i){return n(),a("div",null,e)}const m=s(p,[["render",t]]);export{C as __pageData,m as default};
