import{_ as s,o as n,c as a,V as l}from"./chunks/framework.ced88878.js";const C=JSON.parse('{"title":"TypeScript 3.4","description":"","frontmatter":{},"headers":[],"relativePath":"zh/release-notes/TypeScript[3.4].md","lastUpdated":1682670826000}'),p={name:"zh/release-notes/TypeScript[3.4].md"},o=l(`<h1 id="typescript-3-4" tabindex="-1">TypeScript 3.4 <a class="header-anchor" href="#typescript-3-4" aria-label="Permalink to &quot;TypeScript 3.4&quot;">​</a></h1><h2 id="使用-incremental-标志加快后续构建" tabindex="-1">使用 <code>--incremental</code> 标志加快后续构建 <a class="header-anchor" href="#使用-incremental-标志加快后续构建" aria-label="Permalink to &quot;使用 \`--incremental\` 标志加快后续构建&quot;">​</a></h2><p>TypeScript 3.4 引入了一个名为 <code>--incremental</code> 的新标志，它告诉 TypeScript 从上一次编译中保存有关项目图的信息。</p><p>下次使用 <code>--incremental</code> 调用 TypeScript 时，它将使用该信息来检测类型检查和生成对项目更改成本最低的方法。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">// tsconfig.json</span></span>
<span class="line"><span style="color:#f6f6f4;">{</span></span>
<span class="line"><span style="color:#f6f6f4;">  &quot;compilerOptions&quot;: {</span></span>
<span class="line"><span style="color:#f6f6f4;">    &quot;incremental&quot;: true,</span></span>
<span class="line"><span style="color:#f6f6f4;">    &quot;outDir&quot;: &quot;./lib&quot;</span></span>
<span class="line"><span style="color:#f6f6f4;">  },</span></span>
<span class="line"><span style="color:#f6f6f4;">  &quot;include&quot;: [&quot;./src&quot;]</span></span>
<span class="line"><span style="color:#f6f6f4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">// tsconfig.json</span></span>
<span class="line"><span style="color:#24292e;">{</span></span>
<span class="line"><span style="color:#24292e;">  &quot;compilerOptions&quot;: {</span></span>
<span class="line"><span style="color:#24292e;">    &quot;incremental&quot;: true,</span></span>
<span class="line"><span style="color:#24292e;">    &quot;outDir&quot;: &quot;./lib&quot;</span></span>
<span class="line"><span style="color:#24292e;">  },</span></span>
<span class="line"><span style="color:#24292e;">  &quot;include&quot;: [&quot;./src&quot;]</span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre></div><p>默认使用这些设置，当我们运行 <code>tsc</code> 时，TypeScript 将在输出目录（<code>./lib</code>）中查找名为 <code>.tsbuildinfo</code> 的文件。 如果 <code>./lib/.tsbuildinfo</code> 不存在，它将被生成。 但如果存在，<code>tsc</code> 将尝试使用该文件逐步进行类型检查并更新输出文件。</p><p>这些 <code>.tsbuildinfo</code> 文件可以安全地删除，并且在运行时对我们的代码没有任何影响——它们纯粹用于更快地编译。 我们也可以将它们命名为我们想要的任何名字，并使用 <code>--tsBuildInfoFile</code> 标志将它们放在我们想要的任何位置。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">// front-end.tsconfig.json</span></span>
<span class="line"><span style="color:#f6f6f4;">{</span></span>
<span class="line"><span style="color:#f6f6f4;">  &quot;compilerOptions&quot;: {</span></span>
<span class="line"><span style="color:#f6f6f4;">    &quot;incremental&quot;: true,</span></span>
<span class="line"><span style="color:#f6f6f4;">    &quot;tsBuildInfoFile&quot;: &quot;./buildcache/front-end&quot;,</span></span>
<span class="line"><span style="color:#f6f6f4;">    &quot;outDir&quot;: &quot;./lib&quot;</span></span>
<span class="line"><span style="color:#f6f6f4;">  },</span></span>
<span class="line"><span style="color:#f6f6f4;">  &quot;include&quot;: [&quot;./src&quot;]</span></span>
<span class="line"><span style="color:#f6f6f4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">// front-end.tsconfig.json</span></span>
<span class="line"><span style="color:#24292e;">{</span></span>
<span class="line"><span style="color:#24292e;">  &quot;compilerOptions&quot;: {</span></span>
<span class="line"><span style="color:#24292e;">    &quot;incremental&quot;: true,</span></span>
<span class="line"><span style="color:#24292e;">    &quot;tsBuildInfoFile&quot;: &quot;./buildcache/front-end&quot;,</span></span>
<span class="line"><span style="color:#24292e;">    &quot;outDir&quot;: &quot;./lib&quot;</span></span>
<span class="line"><span style="color:#24292e;">  },</span></span>
<span class="line"><span style="color:#24292e;">  &quot;include&quot;: [&quot;./src&quot;]</span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre></div><h3 id="复合项目" tabindex="-1">复合项目 <a class="header-anchor" href="#复合项目" aria-label="Permalink to &quot;复合项目&quot;">​</a></h3><p>复合项目的意图的一部分（<code>tsconfig.json</code>s，<code>composite</code> 设置为 <code>true</code>）是不同项目之间的引用可以增量构建。 因此，复合项目将<strong>始终</strong>生成 <code>.tsbuildinfo</code> 文件。</p><h3 id="outfile" tabindex="-1"><code>outFile</code> <a class="header-anchor" href="#outfile" aria-label="Permalink to &quot;\`outFile\`&quot;">​</a></h3><p>当使用 <code>outFile</code> 时，构建信息文件的名称将基于输出文件的名称。 例如，如果我们的输出 JavaScript 文件是 <code>./ output / foo.js</code>，那么在 <code>--incremental</code> 标志下，TypeScript 将生成文件<code>./output/foo.tsbuildinfo</code>。 如上所述，这可以通过 <code>--tsBuildInfoFile</code> 标志来控制。</p><h2 id="泛型函数的高阶类型推断" tabindex="-1">泛型函数的高阶类型推断 <a class="header-anchor" href="#泛型函数的高阶类型推断" aria-label="Permalink to &quot;泛型函数的高阶类型推断&quot;">​</a></h2><p>当来自其它泛型函数的推断产生用于推断的自由类型变量时，TypeScript 3.4 现在可以生成泛型函数类型。</p><p>这意味着在 3.4 中许多函数组合模式现在运行的更好了。</p><p>为了更具体，让我们建立一些动机并考虑以下 <code>compose</code> 函数：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">compose</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">A</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">B</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">C</span><span style="color:#F6F6F4;">&gt;(</span><span style="color:#62E884;">f</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">arg</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">A</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">B</span><span style="color:#F6F6F4;">, </span><span style="color:#62E884;">g</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">arg</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">B</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">C</span><span style="color:#F6F6F4;">)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">arg</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">A</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">C</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">g</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">f</span><span style="color:#F6F6F4;">(x));</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">compose</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">A</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">B</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">C</span><span style="color:#24292E;">&gt;(</span><span style="color:#6F42C1;">f</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">arg</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">A</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">B</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">g</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">arg</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">B</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">C</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">arg</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">A</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">C</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#E36209;">x</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">g</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">f</span><span style="color:#24292E;">(x));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>compose</code> 还有两个其他函数：</p><ul><li><code>f</code> 它接受一些参数（类型为 <code>A</code>）并返回类型为 <code>B</code> 的值</li><li><code>g</code> 采用类型为 <code>B</code> 的参数（类型为 <code>f</code> 返回），并返回类型为 <code>C</code> 的值</li></ul><p><code>compose</code> 然后返回一个函数，它通过 <code>f</code> 然后 <code>g</code> 来提供它的参数。</p><p>调用此函数时，TypeScript 将尝试通过一个名为 <em>类型参数推理</em> 的进程来计算出 <code>A</code>，<code>B</code> 和 <code>C</code> 的类型。 这个推断过程通常很有效：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Person</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  name</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  age</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getDisplayName</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">p</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Person</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> p.name.</span><span style="color:#62E884;">toLowerCase</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getLength</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">s</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> s.length;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 拥有类型 &#39;(p: Person) =&gt; number&#39;</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> getDisplayNameLength </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">compose</span><span style="color:#F6F6F4;">(</span></span>
<span class="line"><span style="color:#F6F6F4;">  getDisplayName,</span></span>
<span class="line"><span style="color:#F6F6F4;">  getLength,</span></span>
<span class="line"><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 有效并返回 \`number\` 类型</span></span>
<span class="line"><span style="color:#62E884;">getDisplayNameLength</span><span style="color:#F6F6F4;">({ name</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Person McPersonface</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, age</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">42</span><span style="color:#F6F6F4;"> });</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">age</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getDisplayName</span><span style="color:#24292E;">(</span><span style="color:#E36209;">p</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> p.name.</span><span style="color:#6F42C1;">toLowerCase</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getLength</span><span style="color:#24292E;">(</span><span style="color:#E36209;">s</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> s.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 拥有类型 &#39;(p: Person) =&gt; number&#39;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">getDisplayNameLength</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">compose</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  getDisplayName,</span></span>
<span class="line"><span style="color:#24292E;">  getLength,</span></span>
<span class="line"><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 有效并返回 \`number\` 类型</span></span>
<span class="line"><span style="color:#6F42C1;">getDisplayNameLength</span><span style="color:#24292E;">({ name: </span><span style="color:#032F62;">&quot;Person McPersonface&quot;</span><span style="color:#24292E;">, age: </span><span style="color:#005CC5;">42</span><span style="color:#24292E;"> });</span></span></code></pre></div><p>推断过程在这里相当简单，因为 <code>getDisplayName</code> 和 <code>getLength</code> 使用的是可以轻松引用的类型。 但是，在 TypeScript 3.3 及更早版本中，泛型函数如 <code>compose</code> 在传递其他泛型函数时效果不佳。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Box</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F6F6F4;">&gt; {</span></span>
<span class="line"><span style="color:#F6F6F4;">  value</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">makeArray</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F6F6F4;">&gt;(</span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;">)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;">[] {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> [x];</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">makeBox</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">U</span><span style="color:#F6F6F4;">&gt;(</span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">U</span><span style="color:#F6F6F4;">)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Box</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">U</span><span style="color:#F6F6F4;">&gt; {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> { value };</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 类型为 &#39;(arg: {}) =&gt; Box&lt;{}[]&gt;&#39;</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> makeBoxedArray </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">compose</span><span style="color:#F6F6F4;">(</span></span>
<span class="line"><span style="color:#F6F6F4;">  makeArray,</span></span>
<span class="line"><span style="color:#F6F6F4;">  makeBox,</span></span>
<span class="line"><span style="color:#F6F6F4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">makeBoxedArray</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hello!</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">).value[</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">].</span><span style="color:#62E884;">toUpperCase</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#7B7F8B;">//                                ~~~~~~~~~~~</span></span>
<span class="line"><span style="color:#7B7F8B;">// 错误：类型 &#39;{}&#39; 没有 &#39;toUpperCase&#39; 属性</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Box</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">value</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">makeArray</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">&gt;(</span><span style="color:#E36209;">x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">[] {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> [x];</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">makeBox</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">U</span><span style="color:#24292E;">&gt;(</span><span style="color:#E36209;">value</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">U</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Box</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">U</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> { value };</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 类型为 &#39;(arg: {}) =&gt; Box&lt;{}[]&gt;&#39;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">makeBoxedArray</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">compose</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  makeArray,</span></span>
<span class="line"><span style="color:#24292E;">  makeBox,</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">makeBoxedArray</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello!&quot;</span><span style="color:#24292E;">).value[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].</span><span style="color:#6F42C1;">toUpperCase</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">//                                ~~~~~~~~~~~</span></span>
<span class="line"><span style="color:#6A737D;">// 错误：类型 &#39;{}&#39; 没有 &#39;toUpperCase&#39; 属性</span></span></code></pre></div><p>在旧版本中，当从其他类型变量（如 <code>T</code> 和 <code>U</code>）推断时，TypeScript 会推断出空对象类型（<code>{}</code>）。</p><p>在 TypeScript 3.4 中的类型参数推断时，对于返回函数的泛型函数的调用，TypeScript <em>将</em>（视情况而定）把类型参数从泛型函数参数传递到生成的函数类型中。</p><p>换句话说，而不是生成类型</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">arg</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {}) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> Box</span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">{}[]</span><span style="color:#F286C4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">(</span><span style="color:#E36209;">arg</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {}) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> Box</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">{}[]</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><p>TypeScript 3.4 生成的类型</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F6F6F4;">&gt;(</span><span style="color:#FFB86C;font-style:italic;">arg</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> Box</span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">T[]</span><span style="color:#F286C4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">&gt;(</span><span style="color:#E36209;">arg</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> Box</span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">T</span><span style="color:#24292E;">[]</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><p>注意，<code>T</code> 已从 <code>makeArray</code> 传递到结果类型的类型参数列表中。 这意味着来自 <code>compose</code> 参数的泛型已被保留，我们的 <code>makeBoxedArray</code> 示例将正常运行！</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Box</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F6F6F4;">&gt; {</span></span>
<span class="line"><span style="color:#F6F6F4;">  value</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">makeArray</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F6F6F4;">&gt;(</span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;">)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;">[] {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> [x];</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">makeBox</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">U</span><span style="color:#F6F6F4;">&gt;(</span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">U</span><span style="color:#F6F6F4;">)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Box</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">U</span><span style="color:#F6F6F4;">&gt; {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> { value };</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 类型为 &#39;&lt;T&gt;(arg: T) =&gt; Box&lt;T[]&gt;&#39;</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> makeBoxedArray </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">compose</span><span style="color:#F6F6F4;">(</span></span>
<span class="line"><span style="color:#F6F6F4;">  makeArray,</span></span>
<span class="line"><span style="color:#F6F6F4;">  makeBox,</span></span>
<span class="line"><span style="color:#F6F6F4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 正常运行！</span></span>
<span class="line"><span style="color:#62E884;">makeBoxedArray</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hello!</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">).value[</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">].</span><span style="color:#62E884;">toUpperCase</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Box</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">value</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">makeArray</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">&gt;(</span><span style="color:#E36209;">x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">[] {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> [x];</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">makeBox</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">U</span><span style="color:#24292E;">&gt;(</span><span style="color:#E36209;">value</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">U</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Box</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">U</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> { value };</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 类型为 &#39;&lt;T&gt;(arg: T) =&gt; Box&lt;T[]&gt;&#39;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">makeBoxedArray</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">compose</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  makeArray,</span></span>
<span class="line"><span style="color:#24292E;">  makeBox,</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 正常运行！</span></span>
<span class="line"><span style="color:#6F42C1;">makeBoxedArray</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello!&quot;</span><span style="color:#24292E;">).value[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].</span><span style="color:#6F42C1;">toUpperCase</span><span style="color:#24292E;">();</span></span></code></pre></div><p>更多细节，你可以<a href="https://github.com/Microsoft/TypeScript/pull/30215" target="_blank" rel="noreferrer">读到更多从这些原始的变动</a>。</p><h2 id="改进-readonlyarray-和-readonly-元祖" tabindex="-1">改进 <code>ReadonlyArray</code> 和 <code>readonly</code> 元祖 <a class="header-anchor" href="#改进-readonlyarray-和-readonly-元祖" aria-label="Permalink to &quot;改进 \`ReadonlyArray\` 和 \`readonly\` 元祖&quot;">​</a></h2><p>TypeScript 3.4 让使用只读的类似数组的类型更简单了。</p><h3 id="一个与-readonlyarray-相关的新语法" tabindex="-1">一个与 <code>ReadonlyArray</code> 相关的新语法 <a class="header-anchor" href="#一个与-readonlyarray-相关的新语法" aria-label="Permalink to &quot;一个与 \`ReadonlyArray\` 相关的新语法&quot;">​</a></h3><p><code>ReadonlyArray</code> 类型描述 <code>Array</code> 是只读的。</p><p>任何带有 <code>ReadonlyArray</code> 引用的变量不能被添加、移除或者替换数组中的任何元素。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">foo</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ReadonlyArray</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">&gt;) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  arr.</span><span style="color:#62E884;">slice</span><span style="color:#F6F6F4;">();        </span><span style="color:#7B7F8B;">// okay</span></span>
<span class="line"><span style="color:#F6F6F4;">  arr.</span><span style="color:#62E884;">push</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hello!</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">// error!</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">(</span><span style="color:#E36209;">arr</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReadonlyArray</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">&gt;) {</span></span>
<span class="line"><span style="color:#24292E;">  arr.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">();        </span><span style="color:#6A737D;">// okay</span></span>
<span class="line"><span style="color:#24292E;">  arr.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello!&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// error!</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>当期待数组不可变时使用 <code>ReadonlyArray</code> 替代 <code>Array</code> 是好实践，考虑到数组有一个更棒的语法的情况下这通常有一点痛苦。 尤其是，<code>number[]</code> 是一个省略版的 <code>Array&lt;number&gt;</code>，就像 <code>Date[]</code> 是省略版的 <code>Array&lt;Date&gt;</code>。</p><p>TypeScript 3.4 为 <code>ReadonlyArray</code> 引入了一个新的语法，就是在数组类型上使用了新的 <code>readonly</code> 修饰语。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">foo</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">readonly</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">[]) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  arr.</span><span style="color:#62E884;">slice</span><span style="color:#F6F6F4;">();        </span><span style="color:#7B7F8B;">// okay</span></span>
<span class="line"><span style="color:#F6F6F4;">  arr.</span><span style="color:#62E884;">push</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hello!</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">// 错误！</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">(</span><span style="color:#E36209;">arr</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">readonly</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">[]) {</span></span>
<span class="line"><span style="color:#24292E;">  arr.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">();        </span><span style="color:#6A737D;">// okay</span></span>
<span class="line"><span style="color:#24292E;">  arr.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello!&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 错误！</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="readonly-元祖" tabindex="-1"><code>readonly</code> 元祖 <a class="header-anchor" href="#readonly-元祖" aria-label="Permalink to &quot;\`readonly\` 元祖&quot;">​</a></h3><p>TypeScript 3.4 同样引入了对 <code>readonly</code> 元祖的支持。 我们可以在任何元祖类型上加上前置 <code>readonly</code> 关键字用来表示它是 <code>readonly</code> 元祖，非常像我们现在可以对数组使用的省略版语法。 就像你可能期待的，不像插槽可写的普通元祖，<code>readonly</code> 元祖只允许从那些位置读。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">foo</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">pair</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">readonly</span><span style="color:#F6F6F4;"> [</span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">]) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(pair[</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">]);   </span><span style="color:#7B7F8B;">// okay</span></span>
<span class="line"><span style="color:#F6F6F4;">  pair[</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hello!</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;     </span><span style="color:#7B7F8B;">// 错误</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">(</span><span style="color:#E36209;">pair</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">readonly</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">]) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(pair[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]);   </span><span style="color:#6A737D;">// okay</span></span>
<span class="line"><span style="color:#24292E;">  pair[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello!&quot;</span><span style="color:#24292E;">;     </span><span style="color:#6A737D;">// 错误</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>普通的元祖是用相同的方式从 <code>Array</code> 继承的——一个元祖<code>T1</code>, <code>T2</code>, ... <code>Tn</code> 继承自 <code>Array&lt; T1 | T2 | ... Tn &gt;</code> - <code>readonly</code> 元祖是继承自类型 <code>ReadonlyArray</code>。所以，一个 <code>readonly</code> 元祖 <code>T1</code>, <code>T2</code>, ... <code>Tn</code> 继承自 <code>ReadonlyArray&lt; T1 | T2 | ... Tn &gt;</code>。</p><h3 id="映射类型修饰语-readonly-和-readonly-数组" tabindex="-1">映射类型修饰语 <code>readonly</code> 和 <code>readonly</code> 数组 <a class="header-anchor" href="#映射类型修饰语-readonly-和-readonly-数组" aria-label="Permalink to &quot;映射类型修饰语 \`readonly\` 和 \`readonly\` 数组&quot;">​</a></h3><p>在之前的 TypeScript 版本中，我们一般使用映射类型操作不同的类似数组的结构。</p><p>这意味着，一个映射类型像 <code>Boxify</code> 可以在数组上生效，元祖也是。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Box</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F6F6F4;">&gt; { value</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Boxify</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F6F6F4;">&gt; </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// { a: Box&lt;string&gt;, b: Box&lt;number&gt; }</span></span>
<span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">A</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Boxify</span><span style="color:#F6F6F4;">&lt;{ a</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">, b</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;"> }&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// Array&lt;Box&lt;number&gt;&gt;</span></span>
<span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">B</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Boxify</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">[]&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// [Box&lt;string&gt;, Box&lt;number&gt;]</span></span>
<span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">C</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Boxify</span><span style="color:#F6F6F4;">&lt;[</span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;">]&gt;;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Box</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">&gt; { </span><span style="color:#E36209;">value</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Boxify</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// { a: Box&lt;string&gt;, b: Box&lt;number&gt; }</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">A</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Boxify</span><span style="color:#24292E;">&lt;{ </span><span style="color:#E36209;">a</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">, </span><span style="color:#E36209;">b</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;"> }&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Array&lt;Box&lt;number&gt;&gt;</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">B</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Boxify</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">number</span><span style="color:#24292E;">[]&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// [Box&lt;string&gt;, Box&lt;number&gt;]</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">C</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Boxify</span><span style="color:#24292E;">&lt;[</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">boolean</span><span style="color:#24292E;">]&gt;;</span></span></code></pre></div><p>不幸的是，映射类型像 <code>Readonly</code> 实用类型在数组和元祖类型上实际上是无用的。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// lib.d.ts</span></span>
<span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Readonly</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F6F6F4;">&gt; </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">readonly</span><span style="color:#F6F6F4;"> [</span><span style="color:#FFB86C;font-style:italic;">K</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">in</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">keyof</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F6F6F4;">]</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;">[</span><span style="color:#97E1F1;font-style:italic;">K</span><span style="color:#F6F6F4;">]</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 在 TypeScript 3.4 之前代码会如何执行</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// { readonly a: string, readonly b: number }</span></span>
<span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">A</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Readonly</span><span style="color:#F6F6F4;">&lt;{ a</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">, b</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;"> }&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// number[]</span></span>
<span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">B</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Readonly</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">[]&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// [string, boolean]</span></span>
<span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">C</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Readonly</span><span style="color:#F6F6F4;">&lt;[</span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;">]&gt;;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// lib.d.ts</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Readonly</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">readonly</span><span style="color:#24292E;"> [</span><span style="color:#6F42C1;">K</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">keyof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">[</span><span style="color:#6F42C1;">K</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 在 TypeScript 3.4 之前代码会如何执行</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// { readonly a: string, readonly b: number }</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">A</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Readonly</span><span style="color:#24292E;">&lt;{ </span><span style="color:#E36209;">a</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">, </span><span style="color:#E36209;">b</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;"> }&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// number[]</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">B</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Readonly</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">number</span><span style="color:#24292E;">[]&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// [string, boolean]</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">C</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Readonly</span><span style="color:#24292E;">&lt;[</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">boolean</span><span style="color:#24292E;">]&gt;;</span></span></code></pre></div><p>在 TypeScript 3.4，在映射类型中的 <code>readonly</code> 修饰符将自动的转换类似数组结构到他们相符合的 <code>readonly</code> 副本。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 在 TypeScript 3.4 中代码会如何运行</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// { readonly a: string, readonly b: number }</span></span>
<span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">A</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Readonly</span><span style="color:#F6F6F4;">&lt;{ a</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">, b</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;"> }&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// readonly number[]</span></span>
<span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">B</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Readonly</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">[]&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// readonly [string, boolean]</span></span>
<span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">C</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Readonly</span><span style="color:#F6F6F4;">&lt;[</span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;">]&gt;;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 在 TypeScript 3.4 中代码会如何运行</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// { readonly a: string, readonly b: number }</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">A</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Readonly</span><span style="color:#24292E;">&lt;{ </span><span style="color:#E36209;">a</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">, </span><span style="color:#E36209;">b</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;"> }&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// readonly number[]</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">B</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Readonly</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">number</span><span style="color:#24292E;">[]&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// readonly [string, boolean]</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">C</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Readonly</span><span style="color:#24292E;">&lt;[</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">boolean</span><span style="color:#24292E;">]&gt;;</span></span></code></pre></div><p>类似地，你可以编写一个类似 <code>Writable</code> 映射类型的实用程序类型来移除 <code>readonly</code>-ness，并将 <code>readonly</code> 数组容器转换回它们的可变等价物。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Writable</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F6F6F4;">&gt; </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">-readonly</span><span style="color:#F6F6F4;"> [</span><span style="color:#FFB86C;font-style:italic;">K</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">in</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">keyof</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F6F6F4;">]</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;">[</span><span style="color:#97E1F1;font-style:italic;">K</span><span style="color:#F6F6F4;">]</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// { a: string, b: number }</span></span>
<span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">A</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Writable</span><span style="color:#F6F6F4;">&lt;{</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">readonly</span><span style="color:#F6F6F4;"> a</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">readonly</span><span style="color:#F6F6F4;"> b</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span></span>
<span class="line"><span style="color:#F6F6F4;">}&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// number[]</span></span>
<span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">B</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Writable</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">readonly</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">[]&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// [string, boolean]</span></span>
<span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">C</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Writable</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">readonly</span><span style="color:#F6F6F4;"> [</span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;">]&gt;;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Writable</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">-readonly</span><span style="color:#24292E;"> [</span><span style="color:#6F42C1;">K</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">keyof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">[</span><span style="color:#6F42C1;">K</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// { a: string, b: number }</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">A</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Writable</span><span style="color:#24292E;">&lt;{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">readonly</span><span style="color:#24292E;"> </span><span style="color:#E36209;">a</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">readonly</span><span style="color:#24292E;"> </span><span style="color:#E36209;">b</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span></span>
<span class="line"><span style="color:#24292E;">}&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// number[]</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">B</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Writable</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">readonly</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">[]&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// [string, boolean]</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">C</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Writable</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">readonly</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">boolean</span><span style="color:#24292E;">]&gt;;</span></span></code></pre></div><h3 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h3><p>它不是一个通用型操作，尽管它看起来像。 <code>readonly</code> 类型修饰符只能用于数组类型和元组类型的语法。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> err1</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">readonly</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Set</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">&gt;; </span><span style="color:#7B7F8B;">// 错误！</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> err2</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">readonly</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Array</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;">&gt;; </span><span style="color:#7B7F8B;">// 错误！</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> okay</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">readonly</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;">[]; </span><span style="color:#7B7F8B;">// 有效</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> err1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">readonly</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">number</span><span style="color:#24292E;">&gt;; </span><span style="color:#6A737D;">// 错误！</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> err2</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">readonly</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Array</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">boolean</span><span style="color:#24292E;">&gt;; </span><span style="color:#6A737D;">// 错误！</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> okay</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">readonly</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">boolean</span><span style="color:#24292E;">[]; </span><span style="color:#6A737D;">// 有效</span></span></code></pre></div><p>你可以<a href="https://github.com/Microsoft/TypeScript/pull/29435" target="_blank" rel="noreferrer">查看 pull request 了解更多详情</a>。</p><h2 id="const-断言" tabindex="-1"><code>const</code> 断言 <a class="header-anchor" href="#const-断言" aria-label="Permalink to &quot;\`const\` 断言&quot;">​</a></h2><p>TypeScript 3.4 引入了一个叫 <em><code>const</code></em> 断言的字面量值的新构造。 它的语法是用 <code>const</code> 代替类型名称的类型断言（例如 <code>123 as const</code>）。 当我们用 <code>const</code> 断言构造新的字面量表达式时，我们可以用来表示：</p><ul><li>该表达式中的字面量类型不应粗化（例如，不要从 <code>&#39;hello&#39;</code> 到<code>string</code>）</li><li>对象字面量获得 <code>readonly</code> 属性</li><li>数组字面量成为 <code>readonly</code> 元组</li></ul><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// Type &#39;&quot;hello&quot;&#39;</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">as</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// Type &#39;readonly [10, 20]&#39;</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> y </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">20</span><span style="color:#F6F6F4;">] </span><span style="color:#F286C4;">as</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// Type &#39;{ readonly text: &quot;hello&quot; }&#39;</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> z </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> { text</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> } </span><span style="color:#F286C4;">as</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Type &#39;&quot;hello&quot;&#39;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Type &#39;readonly [10, 20]&#39;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> y </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Type &#39;{ readonly text: &quot;hello&quot; }&#39;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> z </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { text: </span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;">;</span></span></code></pre></div><p>也可以使用尖括号断言语法，除了 <code>.tsx</code> 文件之外。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// Type &#39;&quot;hello&quot;&#39;</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> &lt;</span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;">&gt;</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// Type &#39;readonly [10, 20]&#39;</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> y </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> &lt;</span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;">&gt;[</span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">20</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// Type &#39;{ readonly text: &quot;hello&quot; }&#39;</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> z </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> &lt;</span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;">&gt;{ text</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> };</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Type &#39;&quot;hello&quot;&#39;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> &lt;</span><span style="color:#D73A49;">const</span><span style="color:#24292E;">&gt;</span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Type &#39;readonly [10, 20]&#39;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> y </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> &lt;</span><span style="color:#D73A49;">const</span><span style="color:#24292E;">&gt;[</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Type &#39;{ readonly text: &quot;hello&quot; }&#39;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> z </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> &lt;</span><span style="color:#D73A49;">const</span><span style="color:#24292E;">&gt;{ text: </span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;"> };</span></span></code></pre></div><p>此功能意味着通常可以省略掉仅用于将不可变性示意给编译器的类型。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 不使用引用或声明的类型。</span></span>
<span class="line"><span style="color:#7B7F8B;">// 我们只需要一个 const 断言。</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getShapes</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> result </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span></span>
<span class="line"><span style="color:#F6F6F4;">    { kind</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">circle</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, radius</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">100</span><span style="color:#F6F6F4;">, },</span></span>
<span class="line"><span style="color:#F6F6F4;">    { kind</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">square</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, sideLength</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">50</span><span style="color:#F6F6F4;">, },</span></span>
<span class="line"><span style="color:#F6F6F4;">  ] </span><span style="color:#F286C4;">as</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> result;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> shape </span><span style="color:#F286C4;">of</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getShapes</span><span style="color:#F6F6F4;">()) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// 完美细化</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (shape.kind </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">circle</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Circle radius</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, shape.radius);</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Square side length</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, shape.sideLength);</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 不使用引用或声明的类型。</span></span>
<span class="line"><span style="color:#6A737D;">// 我们只需要一个 const 断言。</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getShapes</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">    { kind: </span><span style="color:#032F62;">&quot;circle&quot;</span><span style="color:#24292E;">, radius: </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">, },</span></span>
<span class="line"><span style="color:#24292E;">    { kind: </span><span style="color:#032F62;">&quot;square&quot;</span><span style="color:#24292E;">, sideLength: </span><span style="color:#005CC5;">50</span><span style="color:#24292E;">, },</span></span>
<span class="line"><span style="color:#24292E;">  ] </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">shape</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getShapes</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 完美细化</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (shape.kind </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;circle&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Circle radius&quot;</span><span style="color:#24292E;">, shape.radius);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Square side length&quot;</span><span style="color:#24292E;">, shape.sideLength);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>请注意，上面的例子不需要类型注释。 <code>const</code> 断言允许 TypeScript 采用最具体的类型表达式。</p><p>如果你选择不使用 TypeScript 的 <code>enum</code> 结构，这甚至可以用于在纯 JavaScript 代码中使用类似 <code>enum</code> 的模式。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> Colors </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  red</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">RED</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  blue</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">BLUE</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  green</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">GREEN</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">} </span><span style="color:#F286C4;">as</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 或者使用 &#39;export default&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">default</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  red</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">RED</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  blue</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">BLUE</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  green</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">GREEN</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">} </span><span style="color:#F286C4;">as</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Colors</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  red: </span><span style="color:#032F62;">&quot;RED&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  blue: </span><span style="color:#032F62;">&quot;BLUE&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  green: </span><span style="color:#032F62;">&quot;GREEN&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 或者使用 &#39;export default&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  red: </span><span style="color:#032F62;">&quot;RED&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  blue: </span><span style="color:#032F62;">&quot;BLUE&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  green: </span><span style="color:#032F62;">&quot;GREEN&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;">;</span></span></code></pre></div><h3 id="注意事项-1" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项-1" aria-label="Permalink to &quot;注意事项&quot;">​</a></h3><p>需要注意的是，<code>const</code> 断言只能直接应用于简单的字面量表达式上。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 错误！&#39;const&#39; 断言只能用在 string, number, boolean, array, object literal。</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> a </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (Math.</span><span style="color:#62E884;">random</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0.5</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">?</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">as</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 有效！</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> b </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Math.</span><span style="color:#62E884;">random</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0.5</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">?</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">as</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">:</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">as</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 错误！&#39;const&#39; 断言只能用在 string, number, boolean, array, object literal。</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (Math.</span><span style="color:#6F42C1;">random</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.5</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 有效！</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">random</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.5</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;">;</span></span></code></pre></div><p>另一件得记住的事是 <code>const</code> 上下文不会直接将表达式转换为完全不可变的。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> arr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> foo </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  name</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">foo</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  contents</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> arr,</span></span>
<span class="line"><span style="color:#F6F6F4;">} </span><span style="color:#F286C4;">as</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">foo.name </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">bar</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;   </span><span style="color:#7B7F8B;">// 错误！</span></span>
<span class="line"><span style="color:#F6F6F4;">foo.contents </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [];  </span><span style="color:#7B7F8B;">// 错误！</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">foo.contents.</span><span style="color:#62E884;">push</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">// ...有效！</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> foo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  name: </span><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  contents: arr,</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">foo.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;bar&quot;</span><span style="color:#24292E;">;   </span><span style="color:#6A737D;">// 错误！</span></span>
<span class="line"><span style="color:#24292E;">foo.contents </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];  </span><span style="color:#6A737D;">// 错误！</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">foo.contents.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// ...有效！</span></span></code></pre></div><p>更多详情，你可以<a href="https://github.com/Microsoft/TypeScript/pull/29510" target="_blank" rel="noreferrer">查看相应的 pull request</a>。</p><h2 id="对-globalthis-的类型检查" tabindex="-1">对 <code>globalThis</code> 的类型检查 <a class="header-anchor" href="#对-globalthis-的类型检查" aria-label="Permalink to &quot;对 \`globalThis\` 的类型检查&quot;">​</a></h2><p>TypeScript 3.4 引入了对 ECMAScript 新 <code>globalThis</code> 全局变量的类型检查的支持，它指向的是全局作用域。 与上述解决方案不同，<code>globalThis</code> 提供了一种访问全局作用域的标准方法，可以在不同环境中使用。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 在一个全局文件里:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> abc </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">100</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 指向上面的 \`abc\`</span></span>
<span class="line"><span style="color:#F6F6F4;">globalThis.abc </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">200</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 在一个全局文件里:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> abc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 指向上面的 \`abc\`</span></span>
<span class="line"><span style="color:#24292E;">globalThis.abc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">200</span><span style="color:#24292E;">;</span></span></code></pre></div><p>注意，使用 <code>let</code> 和 <code>const</code> 声明的全局变量不会显示在 <code>globalThis</code> 上。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> answer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">42</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 错误！&#39;typeof globalThis&#39; 没有 &#39;answer&#39; 属性。</span></span>
<span class="line"><span style="color:#F6F6F4;">globalThis.answer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">333333</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> answer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">42</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 错误！&#39;typeof globalThis&#39; 没有 &#39;answer&#39; 属性。</span></span>
<span class="line"><span style="color:#24292E;">globalThis.answer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">333333</span><span style="color:#24292E;">;</span></span></code></pre></div><p>同样重要的是要注意，在编译为老版本的 ECMAScript 时，TypeScript 不会转换引用到 <code>globalThis</code> 上。 因此，除非您的目标是常青浏览器（已经支持 <code>globalThis</code>），否则您可能需要<a href="https://github.com/ljharb/globalThis" target="_blank" rel="noreferrer">使用 polyfill</a>。</p><p>更多详细信息，请参阅<a href="https://github.com/Microsoft/TypeScript/pull/29332" target="_blank" rel="noreferrer">该功能的 pull request</a>。</p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://github.com/microsoft/TypeScript-Handbook/blob/master/pages/release%20notes/TypeScript%203.4.md" target="_blank" rel="noreferrer">原文</a></li></ul>`,86),e=[o];function t(c,r,y,F,i,E){return n(),a("div",null,e)}const u=s(p,[["render",t]]);export{C as __pageData,u as default};
