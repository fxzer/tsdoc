import{_ as s,o as a,c as n,V as l}from"./chunks/framework.ced88878.js";const u=JSON.parse('{"title":"TypeScript 1.5","description":"","frontmatter":{},"headers":[],"relativePath":"zh/release-notes/TypeScript[1.5].md","lastUpdated":1682668835000}'),o={name:"zh/release-notes/TypeScript[1.5].md"},p=l(`<h1 id="typescript-1-5" tabindex="-1">TypeScript 1.5 <a class="header-anchor" href="#typescript-1-5" aria-label="Permalink to &quot;TypeScript 1.5&quot;">​</a></h1><h2 id="es6-模块" tabindex="-1">ES6 模块 <a class="header-anchor" href="#es6-模块" aria-label="Permalink to &quot;ES6 模块&quot;">​</a></h2><p>TypeScript 1.5 支持 ECMAScript 6 (ES6) 模块. ES6 模块可以看做之前 TypeScript 的外部模块换上了新的语法: ES6 模块是分开加载的源文件, 这些文件还可能引入其他模块, 并且导出部分供外部可访问. ES6 模块新增了几种导入和导出声明. 我们建议使用 TypeScript 开发的库和应用能够更新到新的语法, 但不做强制要求. 新的 ES6 模块语法和 TypeScript 原来的内部和外部模块结构同时被支持, 如果需要也可以混合使用.</p><h3 id="导出声明" tabindex="-1">导出声明 <a class="header-anchor" href="#导出声明" aria-label="Permalink to &quot;导出声明&quot;">​</a></h3><p>作为 TypeScript 已有的 <code>export</code> 前缀支持, 模块成员也可以使用单独导出的声明导出, 如果需要, <code>as</code> 语句可以指定不同的导出名称.</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Stream</span><span style="color:#F6F6F4;"> { </span><span style="color:#F286C4;">...</span><span style="color:#F6F6F4;"> }</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">writeToStream</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">stream</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Stream</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">data</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">) { </span><span style="color:#F286C4;">...</span><span style="color:#F6F6F4;"> }</span></span>
<span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> { Stream, writeToStream </span><span style="color:#F286C4;">as</span><span style="color:#F6F6F4;"> write };  </span><span style="color:#7B7F8B;">// writeToStream 导出为 write</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Stream</span><span style="color:#24292E;"> { </span><span style="color:#D73A49;">...</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">writeToStream</span><span style="color:#24292E;">(</span><span style="color:#E36209;">stream</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Stream</span><span style="color:#24292E;">, </span><span style="color:#E36209;">data</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">) { </span><span style="color:#D73A49;">...</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> { Stream, writeToStream </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> write };  </span><span style="color:#6A737D;">// writeToStream 导出为 write</span></span></code></pre></div><p>引入声明也可以使用 <code>as</code> 语句来指定一个不同的导入名称. 比如:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { read, write, </span><span style="color:#FFB86C;font-style:italic;">standardOutput</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">as</span><span style="color:#F6F6F4;"> stdout } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">./inout</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> s </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">read</span><span style="color:#F6F6F4;">(stdout);</span></span>
<span class="line"><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(stdout, s);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { read, write, standardOutput </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> stdout } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./inout&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(stdout);</span></span>
<span class="line"><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(stdout, s);</span></span></code></pre></div><p>作为单独导入的候选项, 命名空间导入可以导入整个模块:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">as</span><span style="color:#F6F6F4;"> io </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">./inout</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> s </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> io.</span><span style="color:#62E884;">read</span><span style="color:#F6F6F4;">(io.standardOutput);</span></span>
<span class="line"><span style="color:#F6F6F4;">io.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(io.standardOutput, s);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> io </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./inout&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> io.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(io.standardOutput);</span></span>
<span class="line"><span style="color:#24292E;">io.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(io.standardOutput, s);</span></span></code></pre></div><h2 id="重新导出" tabindex="-1">重新导出 <a class="header-anchor" href="#重新导出" aria-label="Permalink to &quot;重新导出&quot;">​</a></h2><p>使用 <code>from</code> 语句一个模块可以复制指定模块的导出项到当前模块, 而无需创建本地名称.</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> { read, write, standardOutput </span><span style="color:#F286C4;">as</span><span style="color:#F6F6F4;"> stdout } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">./inout</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> { read, write, standardOutput </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> stdout } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./inout&quot;</span><span style="color:#24292E;">;</span></span></code></pre></div><p><code>export *</code> 可以用来重新导出另一个模块的所有导出项. 在创建一个聚合了其他几个模块导出项的模块时很方便.</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">transform</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">s</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;"> { </span><span style="color:#F286C4;">...</span><span style="color:#F6F6F4;"> }</span></span>
<span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">./mod1</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">./mod2</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">transform</span><span style="color:#24292E;">(</span><span style="color:#E36209;">s</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> { </span><span style="color:#D73A49;">...</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./mod1&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./mod2&quot;</span><span style="color:#24292E;">;</span></span></code></pre></div><h3 id="默认导出项" tabindex="-1">默认导出项 <a class="header-anchor" href="#默认导出项" aria-label="Permalink to &quot;默认导出项&quot;">​</a></h3><p>一个 export default 声明表示一个表达式是这个模块的默认导出项.</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">default</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Greeter</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">sayHello</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Greetings!</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Greeter</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">sayHello</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Greetings!&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>对应的可以使用默认导入:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> Greeter </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">./greeter</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> g </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Greeter</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">g.</span><span style="color:#62E884;">sayHello</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Greeter </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./greeter&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> g </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Greeter</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">g.</span><span style="color:#6F42C1;">sayHello</span><span style="color:#24292E;">();</span></span></code></pre></div><h3 id="无导入加载" tabindex="-1">无导入加载 <a class="header-anchor" href="#无导入加载" aria-label="Permalink to &quot;无导入加载&quot;">​</a></h3><p>&quot;无导入加载&quot; 可以被用来加载某些只需要其副作用的模块.</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">./polyfills</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./polyfills&quot;</span><span style="color:#24292E;">;</span></span></code></pre></div><p>了解更多关于模块的信息, 请参见 <a href="https://github.com/Microsoft/TypeScript/issues/2242" target="_blank" rel="noreferrer">ES6 模块支持规范</a>.</p><h2 id="声明与赋值的解构" tabindex="-1">声明与赋值的解构 <a class="header-anchor" href="#声明与赋值的解构" aria-label="Permalink to &quot;声明与赋值的解构&quot;">​</a></h2><p>TypeScript 1.5 添加了对 ES6 解构声明与赋值的支持.</p><h3 id="解构" tabindex="-1">解构 <a class="header-anchor" href="#解构" aria-label="Permalink to &quot;解构&quot;">​</a></h3><p>解构声明会引入一个或多个命名变量, 并且初始化它们的值为对象的属性或者数组的元素对应的值.</p><p>比如说, 下面的例子声明了变量 <code>x</code>, <code>y</code> 和 <code>z</code>, 并且分别将它们的值初始化为 <code>getSomeObject().x</code>, <code>getSomeObject().y</code> 和 <code>getSomeObject().z</code>:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> { x, y, z } </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getSomeObject</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> { x, y, z } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getSomeObject</span><span style="color:#24292E;">();</span></span></code></pre></div><p>解构声明也可以用于从数组中得到值.</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> [x, y, z </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getSomeArray</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> [x, y, z </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getSomeArray</span><span style="color:#24292E;">();</span></span></code></pre></div><p>相似的, 解构可以用在函数的参数声明中:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">drawText</span><span style="color:#F6F6F4;">({ </span><span style="color:#FFB86C;font-style:italic;">text</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;&quot;</span><span style="color:#F6F6F4;">, location: [</span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">y</span><span style="color:#F6F6F4;">] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">], </span><span style="color:#FFB86C;font-style:italic;">bold</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;"> }) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 画出文本</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 以一个对象字面量为参数调用 drawText</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> item </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> { text</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">someText</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, location</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">], style</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">italics</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> };</span></span>
<span class="line"><span style="color:#62E884;">drawText</span><span style="color:#F6F6F4;">(item);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">drawText</span><span style="color:#24292E;">({ </span><span style="color:#E36209;">text</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">location</span><span style="color:#24292E;">: [</span><span style="color:#E36209;">x</span><span style="color:#24292E;">, </span><span style="color:#E36209;">y</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">], </span><span style="color:#E36209;">bold</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> }) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 画出文本</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 以一个对象字面量为参数调用 drawText</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> item </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { text: </span><span style="color:#032F62;">&quot;someText&quot;</span><span style="color:#24292E;">, location: [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">], style: </span><span style="color:#032F62;">&quot;italics&quot;</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#6F42C1;">drawText</span><span style="color:#24292E;">(item);</span></span></code></pre></div><h3 id="赋值" tabindex="-1">赋值 <a class="header-anchor" href="#赋值" aria-label="Permalink to &quot;赋值&quot;">​</a></h3><p>解构也可以被用于普通的赋值表达式. 举例来讲, 交换两个变量的值可以被写作一个解构赋值:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> y </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">[x, y] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [y, x];</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> y </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">[x, y] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [y, x];</span></span></code></pre></div><h2 id="namespace-命名空间-关键字" tabindex="-1"><code>namespace</code> (命名空间) 关键字 <a class="header-anchor" href="#namespace-命名空间-关键字" aria-label="Permalink to &quot;\`namespace\` \\(命名空间\\) 关键字&quot;">​</a></h2><p>过去 TypeScript 中 <code>module</code> 关键字既可以定义 &quot;内部模块&quot;, 也可以定义 &quot;外部模块&quot;; 这让刚刚接触 TypeScript 的开发者有些困惑. &quot;内部模块&quot; 的概念更接近于大部分人眼中的命名空间; 而 &quot;外部模块&quot; 对于 JS 来讲, 现在也就是模块了.</p><blockquote><p>注意: 之前定义内部模块的语法依然被支持.</p></blockquote><p><strong>之前</strong>:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">module</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Math</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">y</span><span style="color:#F6F6F4;">) { </span><span style="color:#F286C4;">...</span><span style="color:#F6F6F4;"> }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">module</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Math</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#E36209;">x</span><span style="color:#24292E;">, </span><span style="color:#E36209;">y</span><span style="color:#24292E;">) { </span><span style="color:#D73A49;">...</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>之后</strong>:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">namespace</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Math</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">y</span><span style="color:#F6F6F4;">) { </span><span style="color:#F286C4;">...</span><span style="color:#F6F6F4;"> }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">namespace</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Math</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#E36209;">x</span><span style="color:#24292E;">, </span><span style="color:#E36209;">y</span><span style="color:#24292E;">) { </span><span style="color:#D73A49;">...</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="let-和-const-的支持" tabindex="-1"><code>let</code> 和 <code>const</code> 的支持 <a class="header-anchor" href="#let-和-const-的支持" aria-label="Permalink to &quot;\`let\` 和 \`const\` 的支持&quot;">​</a></h2><p>ES6 的 <code>let</code> 和 <code>const</code> 声明现在支持编译到 ES3 和 ES5.</p><h3 id="const" tabindex="-1">Const <a class="header-anchor" href="#const" aria-label="Permalink to &quot;Const&quot;">​</a></h3><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> MAX </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">100</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">MAX; </span><span style="color:#7B7F8B;">// 错误: 自增/减运算符不能用于一个常量</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">MAX</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">++</span><span style="color:#005CC5;">MAX</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 错误: 自增/减运算符不能用于一个常量</span></span></code></pre></div><h3 id="块级作用域" tabindex="-1">块级作用域 <a class="header-anchor" href="#块级作用域" aria-label="Permalink to &quot;块级作用域&quot;">​</a></h3><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> a </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// 使用变量 a</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> a </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">string</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// 使用变量 a</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">alert</span><span style="color:#F6F6F4;">(a); </span><span style="color:#7B7F8B;">// 错误: 变量 a 在当前作用域未定义</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 使用变量 a</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;string&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 使用变量 a</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">alert</span><span style="color:#24292E;">(a); </span><span style="color:#6A737D;">// 错误: 变量 a 在当前作用域未定义</span></span></code></pre></div><h2 id="for-of-的支持" tabindex="-1"><code>for...of</code> 的支持 <a class="header-anchor" href="#for-of-的支持" aria-label="Permalink to &quot;\`for...of\` 的支持&quot;">​</a></h2><p>TypeScript 1.5 增加了 ES6 <code>for...of</code> 循环编译到 ES3/ES5 时对数组的支持, 以及编译到 ES6 时对满足 <code>Iterator</code> 接口的全面支持.</p><h3 id="例子" tabindex="-1">例子 <a class="header-anchor" href="#例子" aria-label="Permalink to &quot;例子&quot;">​</a></h3><p>TypeScript 编译器会转译 <code>for...of</code> 数组到具有语义的 ES3/ES5 JavaScript (如果被设置为编译到这些版本).</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> v </span><span style="color:#F286C4;">of</span><span style="color:#F6F6F4;"> expr) { }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> v </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> expr) { }</span></span></code></pre></div><p>会输出为:</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> _i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, _a </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> expr; _i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> _a.length; _i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> v </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> _a[_i];</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> _i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, _a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> expr; _i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> _a.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; _i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> v </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> _a[_i];</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="装饰器" tabindex="-1">装饰器 <a class="header-anchor" href="#装饰器" aria-label="Permalink to &quot;装饰器&quot;">​</a></h2><blockquote><p>TypeScript 装饰器是局域 <a href="https://github.com/wycats/javascript-decorators" target="_blank" rel="noreferrer">ES7 装饰器</a> 提案的.</p></blockquote><p>一个装饰器是:</p><ul><li>一个表达式</li><li>并且值为一个函数</li><li>接受 <code>target</code>, <code>name</code>, 以及属性描述对象作为参数</li><li>可选返回一个会被应用到目标对象的属性描述对象</li></ul><blockquote><p>了解更多, 请参见 <a href="https://github.com/Microsoft/TypeScript/issues/2249" target="_blank" rel="noreferrer">装饰器</a> 提案.</p></blockquote><h3 id="例子-1" tabindex="-1">例子 <a class="header-anchor" href="#例子-1" aria-label="Permalink to &quot;例子&quot;">​</a></h3><p>装饰器 <code>readonly</code> 和 <code>enumerable(false)</code> 会在属性 <code>method</code> 添加到类 <code>C</code> 上之前被应用. 这使得装饰器可以修改其实现, 具体到这个例子, 设置了 <code>descriptor</code> 为 <code>writable: false</code> 以及 <code>enumerable: false</code>.</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">C</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  @</span><span style="color:#62E884;font-style:italic;">readonly</span></span>
<span class="line"><span style="color:#F6F6F4;">  @</span><span style="color:#62E884;">enumerable</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">method</span><span style="color:#F6F6F4;">() { }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">readonly</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">target</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">descriptor</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    descriptor.writable </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">enumerable</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">target</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">descriptor</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">     descriptor.enumerable </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> value;</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">C</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  @readonly</span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#6F42C1;">enumerable</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">method</span><span style="color:#24292E;">() { }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">readonly</span><span style="color:#24292E;">(</span><span style="color:#E36209;">target</span><span style="color:#24292E;">, </span><span style="color:#E36209;">key</span><span style="color:#24292E;">, </span><span style="color:#E36209;">descriptor</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    descriptor.writable </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">enumerable</span><span style="color:#24292E;">(</span><span style="color:#E36209;">value</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">target</span><span style="color:#24292E;">, </span><span style="color:#E36209;">key</span><span style="color:#24292E;">, </span><span style="color:#E36209;">descriptor</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">     descriptor.enumerable </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="计算属性" tabindex="-1">计算属性 <a class="header-anchor" href="#计算属性" aria-label="Permalink to &quot;计算属性&quot;">​</a></h2><p>使用动态的属性初始化一个对象可能会很麻烦. 参考下面的例子:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">NeighborMap</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> { [</span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">]</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;"> };</span></span>
<span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> { name</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">; neighbors</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">NeighborMap</span><span style="color:#F6F6F4;">;}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">makeNode</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">initialNeighbor</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> neighbors</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">NeighborMap</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {};</span></span>
<span class="line"><span style="color:#F6F6F4;">    neighbors[initialNeighbor.name] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> initialNeighbor;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> { name</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> name, neighbors</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> neighbors };</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NeighborMap</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { [</span><span style="color:#E36209;">name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Node</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Node</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { </span><span style="color:#E36209;">name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">; </span><span style="color:#E36209;">neighbors</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NeighborMap</span><span style="color:#24292E;">;}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">makeNode</span><span style="color:#24292E;">(</span><span style="color:#E36209;">name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">, </span><span style="color:#E36209;">initialNeighbor</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Node</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Node</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> neighbors</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NeighborMap</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">    neighbors[initialNeighbor.name] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> initialNeighbor;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> { name: name, neighbors: neighbors };</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里我们需要创建一个包含了 neighbor-map 的变量, 便于我们初始化它. 使用 TypeScript 1.5, 我们可以让编译器来干重活:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">makeNode</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">initialNeighbor</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        name</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> name,</span></span>
<span class="line"><span style="color:#F6F6F4;">        neighbors</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            [initialNeighbor.name]</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> initialNeighbor</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">makeNode</span><span style="color:#24292E;">(</span><span style="color:#E36209;">name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">, </span><span style="color:#E36209;">initialNeighbor</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Node</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Node</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        name: name,</span></span>
<span class="line"><span style="color:#24292E;">        neighbors: {</span></span>
<span class="line"><span style="color:#24292E;">            [initialNeighbor.name]: initialNeighbor</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="指出-umd-和-system-模块输出" tabindex="-1">指出 <code>UMD</code> 和 <code>System</code> 模块输出 <a class="header-anchor" href="#指出-umd-和-system-模块输出" aria-label="Permalink to &quot;指出 \`UMD\` 和 \`System\` 模块输出&quot;">​</a></h2><p>作为 <code>AMD</code> 和 <code>CommonJS</code> 模块加载器的补充, TypeScript 现在支持输出为 <code>UMD</code> (<a href="https://github.com/umdjs/umd" target="_blank" rel="noreferrer">Universal Module Definition</a>) 和 <a href="https://github.com/systemjs/systemjs" target="_blank" rel="noreferrer"><code>System</code></a> 模块的格式.</p><p><strong>用法</strong>:</p><blockquote><p>tsc --module umd</p></blockquote><p>以及</p><blockquote><p>tsc --module system</p></blockquote><h2 id="unicode-字符串码位转义" tabindex="-1">Unicode 字符串码位转义 <a class="header-anchor" href="#unicode-字符串码位转义" aria-label="Permalink to &quot;Unicode 字符串码位转义&quot;">​</a></h2><p>ES6 中允许用户使用单个转义表示一个 Unicode 码位.</p><p>举个例子, 考虑我们需要转义一个包含了字符 &#39;𠮷&#39; 的字符串. 在 UTF-16/USC2 中, &#39;𠮷&#39; 被表示为一个代理对, 意思就是它被编码为一对 16 位值的代码单元, 具体来说是 <code>0xD842</code> 和 <code>0xDFB7</code>. 之前这意味着你必须将该码位转义为 <code>&quot;\\uD842\\uDFB7&quot;</code>. 这样做有一个重要的问题, 就事很难讲两个独立的字符同一个代理对区分开来.</p><p>通过 ES6 的码位转义, 你可以在字符串或模板字符串中清晰地通过一个转义表示一个确切的字符: <code>&quot;\\u{20bb7}&quot;</code>. TypeScript 在编译到 ES3/ES5 时会将该字符串输出为 <code>&quot;\\uD842\\uDFB7&quot;</code>.</p><h2 id="标签模板字符串编译到-es3-es5" tabindex="-1">标签模板字符串编译到 ES3/ES5 <a class="header-anchor" href="#标签模板字符串编译到-es3-es5" aria-label="Permalink to &quot;标签模板字符串编译到 ES3/ES5&quot;">​</a></h2><p>TypeScript 1.4 中, 我们添加了模板字符串编译到所有 ES 版本的支持, 并且支持标签模板字符串编译到 ES6. 得益于 <a href="https://github.com/ivogabe" target="_blank" rel="noreferrer">@ivogabe</a> 的大量付出, 我们填补了标签模板字符串对编译到 ES3/ES5 的支持.</p><p>当编译到 ES3/ES5 时, 下面的代码:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">oddRawStrings</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">strs</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">TemplateStringsArray</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">n1</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">n2</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> strs.raw.</span><span style="color:#62E884;">filter</span><span style="color:#F6F6F4;">((</span><span style="color:#FFB86C;font-style:italic;">raw</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">index</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> index </span><span style="color:#F286C4;">%</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">oddRawStrings </span><span style="color:#E7EE98;">\`Hello </span><span style="color:#F286C4;">\\n\${</span><span style="color:#BF9EEE;">123</span><span style="color:#F286C4;">}</span><span style="color:#E7EE98;"> </span><span style="color:#F286C4;">\\t</span><span style="color:#E7EE98;"> </span><span style="color:#F286C4;">\${</span><span style="color:#BF9EEE;">456</span><span style="color:#F286C4;">}\\n</span><span style="color:#E7EE98;"> world\`</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">oddRawStrings</span><span style="color:#24292E;">(</span><span style="color:#E36209;">strs</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TemplateStringsArray</span><span style="color:#24292E;">, </span><span style="color:#E36209;">n1</span><span style="color:#24292E;">, </span><span style="color:#E36209;">n2</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> strs.raw.</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">((</span><span style="color:#E36209;">raw</span><span style="color:#24292E;">, </span><span style="color:#E36209;">index</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">oddRawStrings </span><span style="color:#032F62;">\`Hello </span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">\${</span><span style="color:#005CC5;">123</span><span style="color:#032F62;">} </span><span style="color:#005CC5;">\\t</span><span style="color:#032F62;"> \${</span><span style="color:#005CC5;">456</span><span style="color:#032F62;">}</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;"> world\`</span></span></code></pre></div><p>会被输出为:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">oddRawStrings</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">strs</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">n1</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">n2</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> strs.raw.</span><span style="color:#62E884;">filter</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">raw</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">index</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> index </span><span style="color:#F286C4;">%</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    });</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F6F6F4;">(_a </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Hello </span><span style="color:#F286C4;">\\n</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;"> </span><span style="color:#F286C4;">\\t</span><span style="color:#E7EE98;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">\\n</span><span style="color:#E7EE98;"> world</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">], _a.raw </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Hello </span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">n</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;"> </span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">t </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">n world</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">], </span><span style="color:#62E884;">oddRawStrings</span><span style="color:#F6F6F4;">(_a, </span><span style="color:#BF9EEE;">123</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">456</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> _a;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">oddRawStrings</span><span style="color:#24292E;">(</span><span style="color:#E36209;">strs</span><span style="color:#24292E;">, </span><span style="color:#E36209;">n1</span><span style="color:#24292E;">, </span><span style="color:#E36209;">n2</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> strs.raw.</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">raw</span><span style="color:#24292E;">, </span><span style="color:#E36209;">index</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">(_a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;Hello </span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot; </span><span style="color:#005CC5;">\\t</span><span style="color:#032F62;"> &quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;"> world&quot;</span><span style="color:#24292E;">], _a.raw </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;Hello </span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">n&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot; </span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">t &quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">n world&quot;</span><span style="color:#24292E;">], </span><span style="color:#6F42C1;">oddRawStrings</span><span style="color:#24292E;">(_a, </span><span style="color:#005CC5;">123</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">456</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> _a;</span></span></code></pre></div><h2 id="amd-可选依赖名称" tabindex="-1">AMD 可选依赖名称 <a class="header-anchor" href="#amd-可选依赖名称" aria-label="Permalink to &quot;AMD 可选依赖名称&quot;">​</a></h2><p><code>/// &lt;amd-dependency path=&quot;x&quot; /&gt;</code> 会告诉编译器需要被注入到模块 <code>require</code> 方法中的非 TS 模块依赖; 然而在 TS 代码中无法使用这个模块.</p><p>新的 <code>amd-dependency name</code> 属性允许为 AMD 依赖传递一个可选的名称.</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/// &lt;</span><span style="color:#F286C4;">amd-dependency</span><span style="color:#7B7F8B;"> </span><span style="color:#62E884;font-style:italic;">path</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">legacy/moduleA</span><span style="color:#DEE492;">&quot;</span><span style="color:#7B7F8B;"> </span><span style="color:#62E884;font-style:italic;">name</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">moduleA</span><span style="color:#DEE492;">&quot;</span><span style="color:#7B7F8B;">/&gt;</span></span>
<span class="line"><span style="color:#F286C4;">declare</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> moduleA</span><span style="color:#F286C4;">:</span><span style="color:#97E1F1;font-style:italic;">MyType</span></span>
<span class="line"><span style="color:#F6F6F4;">moduleA.</span><span style="color:#62E884;">callStuff</span><span style="color:#F6F6F4;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/// &lt;</span><span style="color:#22863A;">amd-dependency</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">path</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;legacy/moduleA&quot;</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;moduleA&quot;</span><span style="color:#6A737D;">/&gt;</span></span>
<span class="line"><span style="color:#D73A49;">declare</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> moduleA</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;">MyType</span></span>
<span class="line"><span style="color:#24292E;">moduleA.</span><span style="color:#6F42C1;">callStuff</span><span style="color:#24292E;">()</span></span></code></pre></div><p>生成的 JS 代码:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">define</span><span style="color:#F6F6F4;">([</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">require</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">exports</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">legacy/moduleA</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">], </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">require</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">exports</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">moduleA</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    moduleA.</span><span style="color:#62E884;">callStuff</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">define</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&quot;require&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;exports&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;legacy/moduleA&quot;</span><span style="color:#24292E;">], </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">require</span><span style="color:#24292E;">, </span><span style="color:#E36209;">exports</span><span style="color:#24292E;">, </span><span style="color:#E36209;">moduleA</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    moduleA.</span><span style="color:#6F42C1;">callStuff</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><h2 id="通过-tsconfig-json-指示一个项目" tabindex="-1">通过 <code>tsconfig.json</code> 指示一个项目 <a class="header-anchor" href="#通过-tsconfig-json-指示一个项目" aria-label="Permalink to &quot;通过 \`tsconfig.json\` 指示一个项目&quot;">​</a></h2><p>通过添加 <code>tsconfig.json</code> 到一个目录指明这是一个 TypeScript 项目的根目录. <code>tsconfig.json</code> 文件指定了根文件以及编译项目需要的编译器选项. 一个项目可以由以下方式编译:</p><ul><li>调用 tsc 并不指定输入文件, 此时编译器会从当前目录开始往上级目录寻找 <code>tsconfig.json</code> 文件.</li><li>调用 tsc 并不指定输入文件, 使用 <code>-project</code> (或者 <code>-p</code>) 命令行选项指定包含了 <code>tsconfig.json</code> 文件的目录.</li></ul><h3 id="例子-2" tabindex="-1">例子 <a class="header-anchor" href="#例子-2" aria-label="Permalink to &quot;例子&quot;">​</a></h3><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">compilerOptions</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">: {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">module</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">commonjs</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">noImplicitAny</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">sourceMap</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;module&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;commonjs&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;noImplicitAny&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;sourceMap&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>参见 <a href="https://github.com/Microsoft/TypeScript/wiki/tsconfig.json" target="_blank" rel="noreferrer">tsconfig.json wiki 页面</a> 查看更多信息.</p><h2 id="rootdir-命令行选项" tabindex="-1"><code>--rootDir</code> 命令行选项 <a class="header-anchor" href="#rootdir-命令行选项" aria-label="Permalink to &quot;\`--rootDir\` 命令行选项&quot;">​</a></h2><p>选项 <code>--outDir</code> 在输出中会保留输入的层级关系. 编译器将所有输入文件共有的最长路径作为根路径; 并且在输出中应用对应的子层级关系.</p><p>有的时候这并不是期望的结果, 比如输入 <code>FolderA\\FolderB\\1.ts</code> 和 <code>FolderA\\FolderB\\2.ts</code>, 输出结构会是 <code>FolderA\\FolderB\\</code> 对应的结构. 如果输入中新增 <code>FolderA\\3.ts</code> 文件, 输出的结构将突然变为 <code>FolderA\\</code> 对应的结构.</p><p><code>--rootDir</code> 指定了会输出对应结构的输入目录, 不再通过计算获得.</p><h2 id="noemithelpers-命令行选项" tabindex="-1"><code>--noEmitHelpers</code> 命令行选项 <a class="header-anchor" href="#noemithelpers-命令行选项" aria-label="Permalink to &quot;\`--noEmitHelpers\` 命令行选项&quot;">​</a></h2><p>TypeScript 编译器在需要的时候会输出一些像 <code>__extends</code> 这样的工具函数. 这些函数会在使用它们的所有文件中输出. 如果你想要聚合所有的工具函数到同一个位置, 或者覆盖默认的行为, 使用 <code>--noEmitHelpers</code> 来告知编译器不要输出它们.</p><h2 id="newline-命令行选项" tabindex="-1"><code>--newLine</code> 命令行选项 <a class="header-anchor" href="#newline-命令行选项" aria-label="Permalink to &quot;\`--newLine\` 命令行选项&quot;">​</a></h2><p>默认输出的换行符在 Windows 上是 <code>\\r\\n</code>, 在 *nix 上是 <code>\\n</code>. <code>--newLine</code> 命令行标记可以覆盖这个行为, 并指定输出文件中使用的换行符.</p><h2 id="inlinesourcemap-and-inlinesources-命令行选项" tabindex="-1"><code>--inlineSourceMap</code> and <code>inlineSources</code> 命令行选项 <a class="header-anchor" href="#inlinesourcemap-and-inlinesources-命令行选项" aria-label="Permalink to &quot;\`--inlineSourceMap\` and \`inlineSources\` 命令行选项&quot;">​</a></h2><p><code>--inlineSourceMap</code> 将内嵌源文件映射到 <code>.js</code> 文件, 而不是在单独的 <code>.js.map</code> 文件中. <code>--inlineSources</code> 允许进一步将 <code>.ts</code> 文件内容包含到输出文件中.</p>`,108),e=[p];function t(c,r,y,F,i,E){return a(),n("div",null,e)}const C=s(o,[["render",t]]);export{u as __pageData,C as default};
