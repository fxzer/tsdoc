import{_ as e,o as t,c as o,V as s}from"./chunks/framework.ced88878.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{"display":"fallbackPolling","oneline":"Specify what approach the watcher should use if the system runs out of native file watchers."},"headers":[],"relativePath":"en/tsconfig-reference/options/fallbackPolling.md","lastUpdated":1681915487000}'),i={name:"en/tsconfig-reference/options/fallbackPolling.md"},n=s("<p>When using file system events, this option specifies the polling strategy that gets used when the system runs out of native file watchers and/or doesn&#39;t support native file watchers.</p><ul><li><code>fixedPollingInterval</code>: Check every file for changes several times a second at a fixed interval.</li><li><code>priorityPollingInterval</code>: Check every file for changes several times a second, but use heuristics to check certain types of files less frequently than others.</li><li><code>dynamicPriorityPolling</code>: Use a dynamic queue where less-frequently modified files will be checked less often.</li><li><code>synchronousWatchDirectory</code>: Disable deferred watching on directories. Deferred watching is useful when lots of file changes might occur at once (e.g. a change in <code>node_modules</code> from running <code>npm install</code>), but you might want to disable it with this flag for some less-common setups.</li></ul>",2),l=[n];function a(c,r,d,f,h,u){return t(),o("div",null,l)}const g=e(i,[["render",a]]);export{_ as __pageData,g as default};
