import{_ as e,o as s,c as a,V as t}from"./chunks/framework.ced88878.js";const f=JSON.parse('{"title":"Using Babel with TypeScript","description":"","frontmatter":{"title":"Using Babel with TypeScript","layout":"docs","permalink":"/docs/handbook/babel-with-typescript.html","oneline":"How to create a hybrid Babel + TypeScript project","translatable":true},"headers":[],"relativePath":"en/tutorials/Babel with TypeScript.md","lastUpdated":1681915487000}'),o={name:"en/tutorials/Babel with TypeScript.md"},n=t(`<h2 id="babel-vs-tsc-for-typescript" tabindex="-1">Babel vs <code>tsc</code> for TypeScript <a class="header-anchor" href="#babel-vs-tsc-for-typescript" aria-label="Permalink to &quot;Babel vs \`tsc\` for TypeScript&quot;">​</a></h2><p>When making a modern JavaScript project, you might ask yourself what is the right way to convert files from TypeScript to JavaScript?</p><p>A lot of the time the answer is <em>&quot;it depends&quot;</em>, or <em>&quot;someone may have decided for you&quot;</em> depending on the project. If you are building your project with an existing framework like <a href="https://tsdx.io" target="_blank" rel="noreferrer">tsdx</a>, <a href="https://angular.io/" target="_blank" rel="noreferrer">Angular</a>, <a href="https://nestjs.com/" target="_blank" rel="noreferrer">NestJS</a> or any framework mentioned in the <a href="/tsdoc-vitepress/docs/home">Getting Started</a> then this decision is handled for you.</p><p>However, a useful heuristic could be:</p><ul><li>Is your build output mostly the same as your source input files? Use <code>tsc</code></li><li>Do you need a build pipeline with multiple potential outputs? Use <code>babel</code> for transpiling and <code>tsc</code> for type checking</li></ul><h2 id="babel-for-transpiling-tsc-for-types" tabindex="-1">Babel for transpiling, <code>tsc</code> for types <a class="header-anchor" href="#babel-for-transpiling-tsc-for-types" aria-label="Permalink to &quot;Babel for transpiling, \`tsc\` for types&quot;">​</a></h2><p>This is a common pattern for projects with existing build infrastructure which may have been ported from a JavaScript codebase to TypeScript.</p><p>This technique is a hybrid approach, using Babel&#39;s <a href="https://babeljs.io/docs/en/babel-preset-typescript" target="_blank" rel="noreferrer">preset-typescript</a> to generate your JS files, and then using TypeScript to do type checking and <code>.d.ts</code> file generation.</p><p>By using babel&#39;s support for TypeScript, you get the ability to work with existing build pipelines and are more likely to have a faster JS emit time because Babel does not type check your code.</p><h4 id="type-checking-and-d-ts-file-generation" tabindex="-1">Type Checking and d.ts file generation <a class="header-anchor" href="#type-checking-and-d-ts-file-generation" aria-label="Permalink to &quot;Type Checking and d.ts file generation&quot;">​</a></h4><p>The downside to using babel is that you don&#39;t get type checking during the transition from TS to JS. This can mean that type errors which you miss in your editor could sneak through into production code.</p><p>In addition to that, Babel cannot create <code>.d.ts</code> files for your TypeScript which can make it harder to work with your project if it is a library.</p><p>To fix these issues, you would probably want to set up a command to type check your project using TSC. This likely means duplicating some of your babel config into a corresponding <a href="/tsdoc-vitepress/tsconfig"><code>tsconfig.json</code></a> and ensuring these flags are enabled:</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">compilerOptions</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">: {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// Ensure that .d.ts files are created by tsc, but not .js files</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">declaration</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">emitDeclarationOnly</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// Ensure that Babel can safely transpile files in the TypeScript project</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">isolatedModules</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Ensure that .d.ts files are created by tsc, but not .js files</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;declaration&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;emitDeclarationOnly&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Ensure that Babel can safely transpile files in the TypeScript project</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;isolatedModules&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>For more information on these flags:</p><ul><li><a href="/tsdoc-vitepress/tsconfig#isolatedModules"><code>isolatedModules</code></a></li><li><a href="/tsdoc-vitepress/tsconfig#declaration"><code>declaration</code></a>, <a href="/tsdoc-vitepress/tsconfig#emitDeclarationOnly"><code>emitDeclarationOnly</code></a></li></ul>`,16),l=[n];function r(p,i,c,d,y,u){return s(),a("div",null,l)}const b=e(o,[["render",r]]);export{f as __pageData,b as default};
