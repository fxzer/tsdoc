import{_ as a,V as t,D as r,o as c,c as p,G as e,B as i}from"./chunks/framework.ced88878.js";const l={},d=t('<h3>CLI Mappings</h3><table class="cli-option" width="100%"><thead><tr><th>MSBuild Config Name</th><th>TSC Flag</th></tr></thead><tbody><tr class="odd" name="allowJs"><td><code>&lt;TypeScriptAllowJS&gt;</code></td><td><code><a href="/tsconfig/#allowJs">--allowJs</a></code></td></tr><tr class="option-description odd"><td colspan="3"><p>Allow JavaScript files to be a part of your program. Use the <code>checkJS</code> option to get errors from these files.</p></td></tr><tr class="even" name="removeComments"><td><code>&lt;TypeScriptRemoveComments&gt;</code></td><td><code><a href="/tsconfig/#removeComments">--removeComments</a></code></td></tr><tr class="option-description even"><td colspan="3"><p>Disable emitting comments.</p></td></tr><tr class="odd" name="noImplicitAny"><td><code>&lt;TypeScriptNoImplicitAny&gt;</code></td><td><code><a href="/tsconfig/#noImplicitAny">--noImplicitAny</a></code></td></tr><tr class="option-description odd"><td colspan="3"><p>Enable error reporting for expressions and declarations with an implied <code>any</code> type..</p></td></tr><tr class="even" name="declaration"><td><code>&lt;TypeScriptGeneratesDeclarations&gt;</code></td><td><code><a href="/tsconfig/#declaration">--declaration</a></code></td></tr><tr class="option-description even"><td colspan="3"><p>Generate .d.ts files from TypeScript and JavaScript files in your project.</p></td></tr><tr class="odd" name="module"><td><code>&lt;TypeScriptModuleKind&gt;</code></td><td><code><a href="/tsconfig/#module">--module</a></code></td></tr><tr class="option-description odd"><td colspan="3"><p>Specify what module code is generated.</p></td></tr><tr class="even" name="jsx"><td><code>&lt;TypeScriptJSXEmit&gt;</code></td><td><code><a href="/tsconfig/#jsx">--jsx</a></code></td></tr><tr class="option-description even"><td colspan="3"><p>Specify what JSX code is generated.</p></td></tr><tr class="odd" name="outDir"><td><code>&lt;TypeScriptOutDir&gt;</code></td><td><code><a href="/tsconfig/#outDir">--outDir</a></code></td></tr><tr class="option-description odd"><td colspan="3"><p>Specify an output folder for all emitted files.</p></td></tr><tr class="even" name="sourcemap"><td><code>&lt;TypeScriptSourceMap&gt;</code></td><td><code><a href="/tsconfig/#sourcemap">--sourcemap</a></code></td></tr><tr class="option-description even"><td colspan="3"><p>Create source map files for emitted JavaScript files.</p></td></tr><tr class="odd" name="target"><td><code>&lt;TypeScriptTarget&gt;</code></td><td><code><a href="/tsconfig/#target">--target</a></code></td></tr><tr class="option-description odd"><td colspan="3"><p>Set the JavaScript language version for emitted JavaScript and include compatible library declarations.</p></td></tr><tr class="even" name="noResolve"><td><code>&lt;TypeScriptNoResolve&gt;</code></td><td><code><a href="/tsconfig/#noResolve">--noResolve</a></code></td></tr><tr class="option-description even"><td colspan="3"><p>Disallow <code>import</code>s, <code>require</code>s or <code>&lt;reference&gt;</code>s from expanding the number of files TypeScript should add to a project.</p></td></tr><tr class="odd" name="mapRoot"><td><code>&lt;TypeScriptMapRoot&gt;</code></td><td><code><a href="/tsconfig/#mapRoot">--mapRoot</a></code></td></tr><tr class="option-description odd"><td colspan="3"><p>Specify the location where debugger should locate map files instead of generated locations.</p></td></tr><tr class="even" name="sourceRoot"><td><code>&lt;TypeScriptSourceRoot&gt;</code></td><td><code><a href="/tsconfig/#sourceRoot">--sourceRoot</a></code></td></tr><tr class="option-description even"><td colspan="3"><p>Specify the root path for debuggers to find the reference source code.</p></td></tr><tr class="odd" name="charset"><td><code>&lt;TypeScriptCharset&gt;</code></td><td><code><a href="/tsconfig/#charset">--charset</a></code></td></tr><tr class="option-description odd"><td colspan="3"><p>No longer supported. In early versions, manually set the text encoding for reading files.</p></td></tr><tr class="even" name="emitBOM"><td><code>&lt;TypeScriptEmitBOM&gt;</code></td><td><code><a href="/tsconfig/#emitBOM">--emitBOM</a></code></td></tr><tr class="option-description even"><td colspan="3"><p>Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files.</p></td></tr><tr class="odd" name="noLib"><td><code>&lt;TypeScriptNoLib&gt;</code></td><td><code><a href="/tsconfig/#noLib">--noLib</a></code></td></tr><tr class="option-description odd"><td colspan="3"><p>Disable including any library files, including the default lib.d.ts.</p></td></tr><tr class="even" name="preserveConstEnums"><td><code>&lt;TypeScriptPreserveConstEnums&gt;</code></td><td><code><a href="/tsconfig/#preserveConstEnums">--preserveConstEnums</a></code></td></tr><tr class="option-description even"><td colspan="3"><p>Disable erasing <code>const enum</code> declarations in generated code.</p></td></tr><tr class="odd" name="suppressImplicitAnyIndexErrors"><td><code>&lt;TypeScriptSuppressImplicitAnyIndexErrors&gt;</code></td><td><code><a href="/tsconfig/#suppressImplicitAnyIndexErrors">--suppressImplicitAnyIndexErrors</a></code></td></tr><tr class="option-description odd"><td colspan="3"><p>Suppress <code>noImplicitAny</code> errors when indexing objects that lack index signatures.</p></td></tr><tr class="even" name="noEmitHelpers"><td><code>&lt;TypeScriptNoEmitHelpers&gt;</code></td><td><code><a href="/tsconfig/#noEmitHelpers">--noEmitHelpers</a></code></td></tr><tr class="option-description even"><td colspan="3"><p>Disable generating custom helper functions like <code>__extends</code> in compiled output.</p></td></tr><tr class="odd" name="inlineSourceMap"><td><code>&lt;TypeScriptInlineSourceMap&gt;</code></td><td><code><a href="/tsconfig/#inlineSourceMap">--inlineSourceMap</a></code></td></tr><tr class="option-description odd"><td colspan="3"><p>Include sourcemap files inside the emitted JavaScript.</p></td></tr><tr class="even" name="inlineSources"><td><code>&lt;TypeScriptInlineSources&gt;</code></td><td><code><a href="/tsconfig/#inlineSources">--inlineSources</a></code></td></tr><tr class="option-description even"><td colspan="3"><p>Include source code in the sourcemaps inside the emitted JavaScript.</p></td></tr><tr class="odd" name="newLine"><td><code>&lt;TypeScriptNewLine&gt;</code></td><td><code><a href="/tsconfig/#newLine">--newLine</a></code></td></tr><tr class="option-description odd"><td colspan="3"><p>Set the newline character for emitting files.</p></td></tr><tr class="even" name="isolatedModules"><td><code>&lt;TypeScriptIsolatedModules&gt;</code></td><td><code><a href="/tsconfig/#isolatedModules">--isolatedModules</a></code></td></tr><tr class="option-description even"><td colspan="3"><p>Ensure that each file can be safely transpiled without relying on other imports.</p></td></tr><tr class="odd" name="emitDecoratorMetadata"><td><code>&lt;TypeScriptEmitDecoratorMetadata&gt;</code></td><td><code><a href="/tsconfig/#emitDecoratorMetadata">--emitDecoratorMetadata</a></code></td></tr><tr class="option-description odd"><td colspan="3"><p>Emit design-type metadata for decorated declarations in source files.</p></td></tr><tr class="even" name="rootDir"><td><code>&lt;TypeScriptRootDir&gt;</code></td><td><code><a href="/tsconfig/#rootDir">--rootDir</a></code></td></tr><tr class="option-description even"><td colspan="3"><p>Specify the root folder within your source files.</p></td></tr><tr class="odd" name="experimentalDecorators"><td><code>&lt;TypeScriptExperimentalDecorators&gt;</code></td><td><code><a href="/tsconfig/#experimentalDecorators">--experimentalDecorators</a></code></td></tr><tr class="option-description odd"><td colspan="3"><p>Enable experimental support for TC39 stage 2 draft decorators.</p></td></tr><tr class="even" name="moduleResolution"><td><code>&lt;TypeScriptModuleResolution&gt;</code></td><td><code><a href="/tsconfig/#moduleResolution">--moduleResolution</a></code></td></tr><tr class="option-description even"><td colspan="3"><p>Specify how TypeScript looks up a file from a given module specifier.</p></td></tr><tr class="odd" name="suppressExcessPropertyErrors"><td><code>&lt;TypeScriptSuppressExcessPropertyErrors&gt;</code></td><td><code><a href="/tsconfig/#suppressExcessPropertyErrors">--suppressExcessPropertyErrors</a></code></td></tr><tr class="option-description odd"><td colspan="3"><p>Disable reporting of excess property errors during the creation of object literals.</p></td></tr><tr class="even" name="reactNamespace"><td><code>&lt;TypeScriptReactNamespace&gt;</code></td><td><code><a href="/tsconfig/#reactNamespace">--reactNamespace</a></code></td></tr><tr class="option-description even"><td colspan="3"><p>Specify the object invoked for <code>createElement</code>. This only applies when targeting <code>react</code> JSX emit. </p></td></tr><tr class="odd" name="skipDefaultLibCheck"><td><code>&lt;TypeScriptSkipDefaultLibCheck&gt;</code></td><td><code><a href="/tsconfig/#skipDefaultLibCheck">--skipDefaultLibCheck</a></code></td></tr><tr class="option-description odd"><td colspan="3"><p>Skip type checking .d.ts files that are included with TypeScript.</p></td></tr><tr class="even" name="allowUnusedLabels"><td><code>&lt;TypeScriptAllowUnusedLabels&gt;</code></td><td><code><a href="/tsconfig/#allowUnusedLabels">--allowUnusedLabels</a></code></td></tr><tr class="option-description even"><td colspan="3"><p>Disable error reporting for unused labels.</p></td></tr><tr class="odd" name="noImplicitReturns"><td><code>&lt;TypeScriptNoImplicitReturns&gt;</code></td><td><code><a href="/tsconfig/#noImplicitReturns">--noImplicitReturns</a></code></td></tr><tr class="option-description odd"><td colspan="3"><p>Enable error reporting for codepaths that do not explicitly return in a function.</p></td></tr><tr class="even" name="noFallthroughCasesInSwitch"><td><code>&lt;TypeScriptNoFallthroughCasesInSwitch&gt;</code></td><td><code><a href="/tsconfig/#noFallthroughCasesInSwitch">--noFallthroughCasesInSwitch</a></code></td></tr><tr class="option-description even"><td colspan="3"><p>Enable error reporting for fallthrough cases in switch statements.</p></td></tr><tr class="odd" name="allowUnreachableCode"><td><code>&lt;TypeScriptAllowUnreachableCode&gt;</code></td><td><code><a href="/tsconfig/#allowUnreachableCode">--allowUnreachableCode</a></code></td></tr><tr class="option-description odd"><td colspan="3"><p>Disable error reporting for unreachable code.</p></td></tr><tr class="even" name="forceConsistentCasingInFileNames"><td><code>&lt;TypeScriptForceConsistentCasingInFileNames&gt;</code></td><td><code><a href="/tsconfig/#forceConsistentCasingInFileNames">--forceConsistentCasingInFileNames</a></code></td></tr><tr class="option-description even"><td colspan="3"><p>Ensure that casing is correct in imports.</p></td></tr><tr class="odd" name="allowSyntheticDefaultImports"><td><code>&lt;TypeScriptAllowSyntheticDefaultImports&gt;</code></td><td><code><a href="/tsconfig/#allowSyntheticDefaultImports">--allowSyntheticDefaultImports</a></code></td></tr><tr class="option-description odd"><td colspan="3"><p>Allow &#39;import x from y&#39; when a module doesn&#39;t have a default export.</p></td></tr><tr class="even" name="noImplicitUseStrict"><td><code>&lt;TypeScriptNoImplicitUseStrict&gt;</code></td><td><code><a href="/tsconfig/#noImplicitUseStrict">--noImplicitUseStrict</a></code></td></tr><tr class="option-description even"><td colspan="3"><p>Disable adding &#39;use strict&#39; directives in emitted JavaScript files.</p></td></tr><tr class="odd" name="lib"><td><code>&lt;TypeScriptLib&gt;</code></td><td><code><a href="/tsconfig/#lib">--lib</a></code></td></tr><tr class="option-description odd"><td colspan="3"><p>Specify a set of bundled library declaration files that describe the target runtime environment.</p></td></tr><tr class="even" name="baseUrl"><td><code>&lt;TypeScriptBaseUrl&gt;</code></td><td><code><a href="/tsconfig/#baseUrl">--baseUrl</a></code></td></tr><tr class="option-description even"><td colspan="3"><p>Specify the base directory to resolve non-relative module names.</p></td></tr><tr class="odd" name="declarationDir"><td><code>&lt;TypeScriptDeclarationDir&gt;</code></td><td><code><a href="/tsconfig/#declarationDir">--declarationDir</a></code></td></tr><tr class="option-description odd"><td colspan="3"><p>Specify the output directory for generated declaration files.</p></td></tr><tr class="even" name="noImplicitThis"><td><code>&lt;TypeScriptNoImplicitThis&gt;</code></td><td><code><a href="/tsconfig/#noImplicitThis">--noImplicitThis</a></code></td></tr><tr class="option-description even"><td colspan="3"><p>Enable error reporting when <code>this</code> is given the type <code>any</code>.</p></td></tr><tr class="odd" name="skipLibCheck"><td><code>&lt;TypeScriptSkipLibCheck&gt;</code></td><td><code><a href="/tsconfig/#skipLibCheck">--skipLibCheck</a></code></td></tr><tr class="option-description odd"><td colspan="3"><p>Skip type checking all .d.ts files.</p></td></tr><tr class="even" name="strictNullChecks"><td><code>&lt;TypeScriptStrictNullChecks&gt;</code></td><td><code><a href="/tsconfig/#strictNullChecks">--strictNullChecks</a></code></td></tr><tr class="option-description even"><td colspan="3"><p>When type checking, take into account <code>null</code> and <code>undefined</code>.</p></td></tr><tr class="odd" name="noUnusedLocals"><td><code>&lt;TypeScriptNoUnusedLocals&gt;</code></td><td><code><a href="/tsconfig/#noUnusedLocals">--noUnusedLocals</a></code></td></tr><tr class="option-description odd"><td colspan="3"><p>Enable error reporting when a local variables aren&#39;t read.</p></td></tr><tr class="even" name="noUnusedParameters"><td><code>&lt;TypeScriptNoUnusedParameters&gt;</code></td><td><code><a href="/tsconfig/#noUnusedParameters">--noUnusedParameters</a></code></td></tr><tr class="option-description even"><td colspan="3"><p>Raise an error when a function parameter isn&#39;t read</p></td></tr><tr class="odd" name="alwaysStrict"><td><code>&lt;TypeScriptAlwaysStrict&gt;</code></td><td><code><a href="/tsconfig/#alwaysStrict">--alwaysStrict</a></code></td></tr><tr class="option-description odd"><td colspan="3"><p>Ensure &#39;use strict&#39; is always emitted.</p></td></tr><tr class="even" name="importHelpers"><td><code>&lt;TypeScriptImportHelpers&gt;</code></td><td><code><a href="/tsconfig/#importHelpers">--importHelpers</a></code></td></tr><tr class="option-description even"><td colspan="3"><p>Allow importing helper functions from tslib once per project, instead of including them per-file.</p></td></tr><tr class="odd" name="jsxFactory"><td><code>&lt;TypeScriptJSXFactory&gt;</code></td><td><code><a href="/tsconfig/#jsxFactory">--jsxFactory</a></code></td></tr><tr class="option-description odd"><td colspan="3"><p>Specify the JSX factory function used when targeting React JSX emit, e.g. &#39;React.createElement&#39; or &#39;h&#39;</p></td></tr><tr class="even" name="stripInternal"><td><code>&lt;TypeScriptStripInternal&gt;</code></td><td><code><a href="/tsconfig/#stripInternal">--stripInternal</a></code></td></tr><tr class="option-description even"><td colspan="3"><p>Disable emitting declarations that have <code>@internal</code> in their JSDoc comments.</p></td></tr><tr class="odd" name="checkJs"><td><code>&lt;TypeScriptCheckJs&gt;</code></td><td><code><a href="/tsconfig/#checkJs">--checkJs</a></code></td></tr><tr class="option-description odd"><td colspan="3"><p>Enable error reporting in type-checked JavaScript files.</p></td></tr><tr class="even" name="downlevelIteration"><td><code>&lt;TypeScriptDownlevelIteration&gt;</code></td><td><code><a href="/tsconfig/#downlevelIteration">--downlevelIteration</a></code></td></tr><tr class="option-description even"><td colspan="3"><p>Emit more compliant, but verbose and less performant JavaScript for iteration.</p></td></tr><tr class="odd" name="strict"><td><code>&lt;TypeScriptStrict&gt;</code></td><td><code><a href="/tsconfig/#strict">--strict</a></code></td></tr><tr class="option-description odd"><td colspan="3"><p>Enable all strict type checking options.</p></td></tr><tr class="even" name="noStrictGenericChecks"><td><code>&lt;TypeScriptNoStrictGenericChecks&gt;</code></td><td><code><a href="/tsconfig/#noStrictGenericChecks">--noStrictGenericChecks</a></code></td></tr><tr class="option-description even"><td colspan="3"><p>Disable strict checking of generic signatures in function types.</p></td></tr><tr class="odd" name="preserveSymlinks"><td><code>&lt;TypeScriptPreserveSymlinks&gt;</code></td><td><code><a href="/tsconfig/#preserveSymlinks">--preserveSymlinks</a></code></td></tr><tr class="option-description odd"><td colspan="3"><p>Disable resolving symlinks to their realpath. This correlates to the same flag in node.</p></td></tr><tr class="even" name="strictFunctionTypes"><td><code>&lt;TypeScriptStrictFunctionTypes&gt;</code></td><td><code><a href="/tsconfig/#strictFunctionTypes">--strictFunctionTypes</a></code></td></tr><tr class="option-description even"><td colspan="3"><p>When assigning functions, check to ensure parameters and the return values are subtype-compatible.</p></td></tr><tr class="odd" name="strictPropertyInitialization"><td><code>&lt;TypeScriptStrictPropertyInitialization&gt;</code></td><td><code><a href="/tsconfig/#strictPropertyInitialization">--strictPropertyInitialization</a></code></td></tr><tr class="option-description odd"><td colspan="3"><p>Check for class properties that are declared but not set in the constructor.</p></td></tr><tr class="even" name="esModuleInterop"><td><code>&lt;TypeScriptESModuleInterop&gt;</code></td><td><code><a href="/tsconfig/#esModuleInterop">--esModuleInterop</a></code></td></tr><tr class="option-description even"><td colspan="3"><p>Emit additional JavaScript to ease support for importing CommonJS modules. This enables <code>allowSyntheticDefaultImports</code> for type compatibility. </p></td></tr><tr class="odd" name="emitDeclarationOnly"><td><code>&lt;TypeScriptEmitDeclarationOnly&gt;</code></td><td><code><a href="/tsconfig/#emitDeclarationOnly">--emitDeclarationOnly</a></code></td></tr><tr class="option-description odd"><td colspan="3"><p>Only output d.ts files and not JavaScript files.</p></td></tr><tr class="even" name="keyofStringsOnly"><td><code>&lt;TypeScriptKeyofStringsOnly&gt;</code></td><td><code><a href="/tsconfig/#keyofStringsOnly">--keyofStringsOnly</a></code></td></tr><tr class="option-description even"><td colspan="3"><p>Make keyof only return strings instead of string, numbers or symbols. Legacy option.</p></td></tr><tr class="odd" name="useDefineForClassFields"><td><code>&lt;TypeScriptUseDefineForClassFields&gt;</code></td><td><code><a href="/tsconfig/#useDefineForClassFields">--useDefineForClassFields</a></code></td></tr><tr class="option-description odd"><td colspan="3"><p>Emit ECMAScript-standard-compliant class fields.</p></td></tr><tr class="even" name="declarationMap"><td><code>&lt;TypeScriptDeclarationMap&gt;</code></td><td><code><a href="/tsconfig/#declarationMap">--declarationMap</a></code></td></tr><tr class="option-description even"><td colspan="3"><p>Create sourcemaps for d.ts files.</p></td></tr><tr class="odd" name="resolveJsonModule"><td><code>&lt;TypeScriptResolveJsonModule&gt;</code></td><td><code><a href="/tsconfig/#resolveJsonModule">--resolveJsonModule</a></code></td></tr><tr class="option-description odd"><td colspan="3"><p>Enable importing .json files</p></td></tr><tr class="even" name="strictBindCallApply"><td><code>&lt;TypeScriptStrictBindCallApply&gt;</code></td><td><code><a href="/tsconfig/#strictBindCallApply">--strictBindCallApply</a></code></td></tr><tr class="option-description even"><td colspan="3"><p>Check that the arguments for <code>bind</code>, <code>call</code>, and <code>apply</code> methods match the original function.</p></td></tr><tr class="odd" name="noEmitOnError"><td><code>&lt;TypeScriptNoEmitOnError&gt;</code></td><td><code><a href="/tsconfig/#noEmitOnError">--noEmitOnError</a></code></td></tr><tr class="option-description odd"><td colspan="3"><p>Disable emitting files if any type checking errors are reported.</p></td></tr></tbody></table>',2);function y(o,s){return d}const u=a(l,[["render",y]]),g=t("",9),f=t("",15),F=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"en/tsconfig-reference/project-config/Compiler Options in MSBuild.md","lastUpdated":1682670826000}'),m={name:"en/tsconfig-reference/project-config/Compiler Options in MSBuild.md"},v=Object.assign(m,{setup(o){return(s,h)=>{const n=r("DemoWrap");return c(),p("div",null,[g,e(n,{pkg:"project-config/demo",path:"MSBuild.vue"},{default:i(()=>[e(u)]),_:1}),f])}}});export{F as __pageData,v as default};
