import{_ as e,o as t,c as o,V as c}from"./chunks/framework.ced88878.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{"display":"Exclude","oneline":"Filters results from the [`include`](#include) option."},"headers":[],"relativePath":"en/tsconfig-reference/options/exclude.md","lastUpdated":1681915487000}'),n={name:"en/tsconfig-reference/options/exclude.md"},i=c('<p>Specifies an array of filenames or patterns that should be skipped when resolving <a href="#include"><code>include</code></a>.</p><p><strong>Important</strong>: <code>exclude</code> <em>only</em> changes which files are included as a result of the <a href="#include"><code>include</code></a> setting. A file specified by <code>exclude</code> can still become part of your codebase due to an <code>import</code> statement in your code, a <code>types</code> inclusion, a <code>/// &lt;reference</code> directive, or being specified in the <a href="#files"><code>files</code></a> list.</p><p>It is not a mechanism that <strong>prevents</strong> a file from being included in the codebase - it simply changes what the <a href="#include"><code>include</code></a> setting finds.</p>',3),s=[i];function d(a,r,l,p,f,u){return t(),o("div",null,s)}const m=e(n,[["render",d]]);export{h as __pageData,m as default};
