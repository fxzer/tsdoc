import{_ as s,o as n,c as a,V as l}from"./chunks/framework.ced88878.js";const C=JSON.parse('{"title":"TypeScript 2.9","description":"","frontmatter":{},"headers":[],"relativePath":"zh/release-notes/TypeScript[2.9].md","lastUpdated":1682668835000}'),o={name:"zh/release-notes/TypeScript[2.9].md"},p=l(`<h1 id="typescript-2-9" tabindex="-1">TypeScript 2.9 <a class="header-anchor" href="#typescript-2-9" aria-label="Permalink to &quot;TypeScript 2.9&quot;">​</a></h1><h2 id="keyof和映射类型支持用number和symbol命名的属性" tabindex="-1"><code>keyof</code>和映射类型支持用<code>number</code>和<code>symbol</code>命名的属性 <a class="header-anchor" href="#keyof和映射类型支持用number和symbol命名的属性" aria-label="Permalink to &quot;\`keyof\`和映射类型支持用\`number\`和\`symbol\`命名的属性&quot;">​</a></h2><p>TypeScript 2.9增加了在索引类型和映射类型上支持用<code>number</code>和<code>symbol</code>命名属性。 在之前，<code>keyof</code>操作符和映射类型只支持<code>string</code>命名的属性。</p><p>改动包括：</p><ul><li>对某些类型<code>T</code>，索引类型<code>keyof T</code>是<code>string | number | symbol</code>的子类型。</li><li>映射类型<code>{ [P in K]: XXX }</code>，其中<code>K</code>允许是可以赋值给<code>string | number | symbol</code>的任何值。</li><li>针对泛型<code>T</code>的对象的<code>for...in</code>语句，迭代变量推断类型之前为<code>keyof T</code>，现在是<code>Extract&lt;keyof T, string&gt;</code>。（换句话说，是<code>keyof T</code>的子集，它仅包含类字符串的值。）</li></ul><p>对于对象类型<code>X</code>，<code>keyof X</code>将按以下方式解析：</p><ul><li>如果<code>X</code>带有字符串索引签名，则<code>keyof X</code>为<code>string</code>，<code>number</code>和表示symbol-like属性的字面量类型的联合，否则</li><li>如果<code>X</code>带有数字索引签名，则<code>keyof X</code>为<code>number</code>和表示string-like和symbol-like属性的字面量类型的联合，否则</li><li><code>keyof X</code>为表示string-like，number-like和symbol-like属性的字面量类型的联合。</li></ul><p>在何处：</p><ul><li>对象类型的string-like属性，是那些使用标识符，字符串字面量或计算后值为字符串字面量类型的属性名所声明的。</li><li>对象类型的number-like属性是那些使用数字字面量或计算后值为数字字面量类型的属性名所声明的。</li><li>对象类型的symbol-like属性是那些使用计算后值为symbol字面量类型的属性名所声明的。</li></ul><p>对于映射类型<code>{ [P in K]: XXX }</code>，<code>K</code>的每个字符串字面量类型都会引入一个名字为字符串的属性，<code>K</code>的每个数字字面量类型都会引入一个名字为数字的属性，<code>K</code>的每个symbol字面量类型都会引入一个名字为symbol的属性。 并且，如果<code>K</code>包含<code>string</code>类型，那个同时也会引入字符串索引类型，如果<code>K</code>包含<code>number</code>类型，那个同时也会引入数字索引类型。</p><h3 id="例子" tabindex="-1">例子 <a class="header-anchor" href="#例子" aria-label="Permalink to &quot;例子&quot;">​</a></h3><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> c </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">c</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> d </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> e </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Symbol</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">enum</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">E1</span><span style="color:#F6F6F4;"> { A, B, C }</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">enum</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">E2</span><span style="color:#F6F6F4;"> { A </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">A</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, B </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">B</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, C </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">C</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Foo</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    a</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">;       </span><span style="color:#7B7F8B;">// String-like name</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;">5</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">;       </span><span style="color:#7B7F8B;">// Number-like name</span></span>
<span class="line"><span style="color:#F6F6F4;">    [c]</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">;     </span><span style="color:#7B7F8B;">// String-like name</span></span>
<span class="line"><span style="color:#F6F6F4;">    [d]</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">;     </span><span style="color:#7B7F8B;">// Number-like name</span></span>
<span class="line"><span style="color:#F6F6F4;">    [e]</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">;     </span><span style="color:#7B7F8B;">// Symbol-like name</span></span>
<span class="line"><span style="color:#F6F6F4;">    [</span><span style="color:#BF9EEE;">E1</span><span style="color:#F6F6F4;">.</span><span style="color:#BF9EEE;">A</span><span style="color:#F6F6F4;">]</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">;  </span><span style="color:#7B7F8B;">// Number-like name</span></span>
<span class="line"><span style="color:#F6F6F4;">    [</span><span style="color:#BF9EEE;">E2</span><span style="color:#F6F6F4;">.</span><span style="color:#BF9EEE;">A</span><span style="color:#F6F6F4;">]</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">;  </span><span style="color:#7B7F8B;">// String-like name</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">K1</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">keyof</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Foo</span><span style="color:#F6F6F4;">;  </span><span style="color:#7B7F8B;">// &quot;a&quot; | 5 | &quot;c&quot; | 10 | typeof e | E1.A | E2.A</span></span>
<span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">K2</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Extract</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">keyof</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">Foo</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">&gt;;  </span><span style="color:#7B7F8B;">// &quot;a&quot; | &quot;c&quot; | E2.A</span></span>
<span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">K3</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Extract</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">keyof</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">Foo</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">&gt;;  </span><span style="color:#7B7F8B;">// 5 | 10 | E1.A</span></span>
<span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">K4</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Extract</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">keyof</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">Foo</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">symbol</span><span style="color:#F6F6F4;">&gt;;  </span><span style="color:#7B7F8B;">// typeof e</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">c</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;c&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">d</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">e</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">E1</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">A</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">B</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">C</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">E2</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">A</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;A&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">B</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;B&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">C</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;C&quot;</span><span style="color:#24292E;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Foo</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">a</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">;       </span><span style="color:#6A737D;">// String-like name</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">5</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">;       </span><span style="color:#6A737D;">// Number-like name</span></span>
<span class="line"><span style="color:#24292E;">    [c]</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">;     </span><span style="color:#6A737D;">// String-like name</span></span>
<span class="line"><span style="color:#24292E;">    [d]</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">;     </span><span style="color:#6A737D;">// Number-like name</span></span>
<span class="line"><span style="color:#24292E;">    [e]</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">;     </span><span style="color:#6A737D;">// Symbol-like name</span></span>
<span class="line"><span style="color:#24292E;">    [</span><span style="color:#005CC5;">E1</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">A</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">;  </span><span style="color:#6A737D;">// Number-like name</span></span>
<span class="line"><span style="color:#24292E;">    [</span><span style="color:#005CC5;">E2</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">A</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">;  </span><span style="color:#6A737D;">// String-like name</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">K1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">keyof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Foo</span><span style="color:#24292E;">;  </span><span style="color:#6A737D;">// &quot;a&quot; | 5 | &quot;c&quot; | 10 | typeof e | E1.A | E2.A</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">K2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Extract</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">keyof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Foo</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">&gt;;  </span><span style="color:#6A737D;">// &quot;a&quot; | &quot;c&quot; | E2.A</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">K3</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Extract</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">keyof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Foo</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">&gt;;  </span><span style="color:#6A737D;">// 5 | 10 | E1.A</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">K4</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Extract</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">keyof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Foo</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">symbol</span><span style="color:#24292E;">&gt;;  </span><span style="color:#6A737D;">// typeof e</span></span></code></pre></div><p>现在通过在键值类型里包含<code>number</code>类型，<code>keyof</code>就能反映出数字索引签名的存在，因此像<code>Partial&lt;T&gt;</code>和<code>Readonly&lt;T&gt;</code>的映射类型能够正确地处理带数字索引签名的对象类型：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Arrayish</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F6F6F4;">&gt; </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    length</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    [</span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">]</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ReadonlyArrayish</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F6F6F4;">&gt; </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Readonly</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">Arrayish</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F6F6F4;">&gt;&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">declare</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> map</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ReadonlyArrayish</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">&gt;;</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> n </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> map.length;</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> map[</span><span style="color:#BF9EEE;">123</span><span style="color:#F6F6F4;">];  </span><span style="color:#7B7F8B;">// Previously of type any (or an error with --noImplicitAny)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Arrayish</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">length</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    [</span><span style="color:#E36209;">x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReadonlyArrayish</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Readonly</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Arrayish</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">&gt;&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">declare</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">map</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReadonlyArrayish</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">&gt;;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> map.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> map[</span><span style="color:#005CC5;">123</span><span style="color:#24292E;">];  </span><span style="color:#6A737D;">// Previously of type any (or an error with --noImplicitAny)</span></span></code></pre></div><p>此外，由于<code>keyof</code>支持用<code>number</code>和<code>symbol</code>命名的键值，现在可以对对象的数字字面量（如数字枚举类型）和唯一的symbol属性的访问进行抽象。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">enum</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Enum</span><span style="color:#F6F6F4;"> { A, B, C }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> enumToStringMap </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    [Enum.</span><span style="color:#BF9EEE;">A</span><span style="color:#F6F6F4;">]</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Name A</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">    [Enum.</span><span style="color:#BF9EEE;">B</span><span style="color:#F6F6F4;">]</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Name B</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">    [Enum.</span><span style="color:#BF9EEE;">C</span><span style="color:#F6F6F4;">]</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Name C</span><span style="color:#DEE492;">&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> sym1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Symbol</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> sym2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Symbol</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> sym3 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Symbol</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> symbolToNumberMap </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    [sym1]</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">    [sym2]</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">    [sym3]</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">3</span></span>
<span class="line"><span style="color:#F6F6F4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">KE</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">keyof</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">typeof</span><span style="color:#F6F6F4;"> enumToStringMap;     </span><span style="color:#7B7F8B;">// Enum (i.e. Enum.A | Enum.B | Enum.C)</span></span>
<span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">KS</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">keyof</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">typeof</span><span style="color:#F6F6F4;"> symbolToNumberMap;   </span><span style="color:#7B7F8B;">// typeof sym1 | typeof sym2 | typeof sym3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getValue</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">K</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">keyof</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F6F6F4;">&gt;(</span><span style="color:#FFB86C;font-style:italic;">obj</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">K</span><span style="color:#F6F6F4;">)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;">[</span><span style="color:#97E1F1;font-style:italic;">K</span><span style="color:#F6F6F4;">] {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> obj[key];</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> x1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getValue</span><span style="color:#F6F6F4;">(enumToStringMap, Enum.</span><span style="color:#BF9EEE;">C</span><span style="color:#F6F6F4;">);  </span><span style="color:#7B7F8B;">// Returns &quot;Name C&quot;</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> x2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getValue</span><span style="color:#F6F6F4;">(symbolToNumberMap, sym3);  </span><span style="color:#7B7F8B;">// Returns 3</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Enum</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">A</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">B</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">C</span><span style="color:#24292E;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">enumToStringMap</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    [Enum.</span><span style="color:#005CC5;">A</span><span style="color:#24292E;">]: </span><span style="color:#032F62;">&quot;Name A&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    [Enum.</span><span style="color:#005CC5;">B</span><span style="color:#24292E;">]: </span><span style="color:#032F62;">&quot;Name B&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    [Enum.</span><span style="color:#005CC5;">C</span><span style="color:#24292E;">]: </span><span style="color:#032F62;">&quot;Name C&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">sym1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">sym2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">sym3</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">symbolToNumberMap</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    [sym1]: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    [sym2]: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    [sym3]: </span><span style="color:#005CC5;">3</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">KE</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">keyof</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> enumToStringMap;     </span><span style="color:#6A737D;">// Enum (i.e. Enum.A | Enum.B | Enum.C)</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">KS</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">keyof</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> symbolToNumberMap;   </span><span style="color:#6A737D;">// typeof sym1 | typeof sym2 | typeof sym3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">K</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">keyof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">&gt;(</span><span style="color:#E36209;">obj</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">, </span><span style="color:#E36209;">key</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">K</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">[</span><span style="color:#6F42C1;">K</span><span style="color:#24292E;">] {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> obj[key];</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> x1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">(enumToStringMap, Enum.</span><span style="color:#005CC5;">C</span><span style="color:#24292E;">);  </span><span style="color:#6A737D;">// Returns &quot;Name C&quot;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> x2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">(symbolToNumberMap, sym3);  </span><span style="color:#6A737D;">// Returns 3</span></span></code></pre></div><p>这是一个破坏性改动；之前，<code>keyof</code>操作符和映射类型只支持<code>string</code>命名的属性。 那些把总是把<code>keyof T</code>的类型当做<code>string</code>的代码现在会报错。</p><h3 id="例子-1" tabindex="-1">例子 <a class="header-anchor" href="#例子-1" aria-label="Permalink to &quot;例子&quot;">​</a></h3><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">useKey</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">K</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">keyof</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F6F6F4;">&gt;(</span><span style="color:#FFB86C;font-style:italic;">o</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">k</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">K</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> name</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> k;  </span><span style="color:#7B7F8B;">// 错误：keyof T不能赋值给字符串</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useKey</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">K</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">keyof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">&gt;(</span><span style="color:#E36209;">o</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">, </span><span style="color:#E36209;">k</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">K</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> k;  </span><span style="color:#6A737D;">// 错误：keyof T不能赋值给字符串</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="推荐" tabindex="-1">推荐 <a class="header-anchor" href="#推荐" aria-label="Permalink to &quot;推荐&quot;">​</a></h3><ul><li><p>如果函数只能处理字符串命名属性的键，在声明里使用<code>Extract&lt;keyof T, string&gt;</code>：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">useKey</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">K</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">Extract</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">keyof</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">&gt;&gt;(</span><span style="color:#FFB86C;font-style:italic;">o</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">k</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">K</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> name</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> k;  </span><span style="color:#7B7F8B;">// OK</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useKey</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">K</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Extract</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">keyof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">&gt;&gt;(</span><span style="color:#E36209;">o</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">, </span><span style="color:#E36209;">k</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">K</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> k;  </span><span style="color:#6A737D;">// OK</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></li><li><p>如果函数能处理任何属性的键，那么可以在下游进行改动：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">useKey</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">K</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">keyof</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F6F6F4;">&gt;(</span><span style="color:#FFB86C;font-style:italic;">o</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">k</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">K</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> name</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">symbol</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> k;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useKey</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">K</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">keyof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">&gt;(</span><span style="color:#E36209;">o</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">, </span><span style="color:#E36209;">k</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">K</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">symbol</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> k;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></li><li><p>否则，使用<code>--keyofStringsOnly</code>编译器选项来禁用新的行为。</p></li></ul><h2 id="jsx元素里的泛型参数" tabindex="-1">JSX元素里的泛型参数 <a class="header-anchor" href="#jsx元素里的泛型参数" aria-label="Permalink to &quot;JSX元素里的泛型参数&quot;">​</a></h2><p>JSX元素现在允许传入类型参数到泛型组件里。</p><h3 id="例子-2" tabindex="-1">例子 <a class="header-anchor" href="#例子-2" aria-label="Permalink to &quot;例子&quot;">​</a></h3><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">GenericComponent</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">P</span><span style="color:#F6F6F4;">&gt; </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">React</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">Component</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">P</span><span style="color:#F6F6F4;">&gt; {</span></span>
<span class="line"><span style="color:#F6F6F4;">    internalProp</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">P</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Props</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> { a</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">; b</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">; };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> &lt;</span><span style="color:#97E1F1;font-style:italic;">GenericComponent</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">Props</span><span style="color:#F6F6F4;">&gt; </span><span style="color:#97E1F1;font-style:italic;">a</span><span style="color:#F6F6F4;">={</span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">} </span><span style="color:#97E1F1;font-style:italic;">b</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hi</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">/&gt;; </span><span style="color:#7B7F8B;">// OK</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> y </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> &lt;</span><span style="color:#97E1F1;font-style:italic;">GenericComponent</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">Props</span><span style="color:#F6F6F4;">&gt; </span><span style="color:#97E1F1;font-style:italic;">a</span><span style="color:#F6F6F4;">={</span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">} </span><span style="color:#97E1F1;font-style:italic;">b</span><span style="color:#F6F6F4;">={</span><span style="color:#BF9EEE;">20</span><span style="color:#F6F6F4;">} /&gt;; </span><span style="color:#7B7F8B;">// Error</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GenericComponent</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">P</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">React</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Component</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">P</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">internalProp</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">P</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Props</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { </span><span style="color:#E36209;">a</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">; </span><span style="color:#E36209;">b</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">; };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">x</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> &lt;</span><span style="color:#6F42C1;">GenericComponent</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Props</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">a</span><span style="color:#24292E;">={</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">} </span><span style="color:#6F42C1;">b</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;hi&quot;</span><span style="color:#24292E;">/&gt;; </span><span style="color:#6A737D;">// OK</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">y</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> &lt;</span><span style="color:#6F42C1;">GenericComponent</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Props</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">a</span><span style="color:#24292E;">={</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">} </span><span style="color:#6F42C1;">b</span><span style="color:#24292E;">={</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">} /&gt;; </span><span style="color:#6A737D;">// Error</span></span></code></pre></div><h2 id="泛型标记模版里的泛型参数" tabindex="-1">泛型标记模版里的泛型参数 <a class="header-anchor" href="#泛型标记模版里的泛型参数" aria-label="Permalink to &quot;泛型标记模版里的泛型参数&quot;">​</a></h2><p>标记模版是ECMAScript 2015引入的一种调用形式。 类似调用表达式，可以在标记模版里使用泛型函数，TypeScript会推断使用的类型参数。</p><p>TypeScript 2.9允许传入泛型参数到标记模版字符串。</p><h3 id="例子-3" tabindex="-1">例子 <a class="header-anchor" href="#例子-3" aria-label="Permalink to &quot;例子&quot;">​</a></h3><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">declare</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">styledComponent</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">Props</span><span style="color:#F6F6F4;">&gt;(</span><span style="color:#FFB86C;font-style:italic;">strs</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">TemplateStringsArray</span><span style="color:#F6F6F4;">)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Component</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">Props</span><span style="color:#F6F6F4;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">MyProps</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  name</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  age</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">styledComponent</span><span style="color:#E7EE98;">&lt;</span><span style="color:#FFB86C;font-style:italic;">MyProps</span><span style="color:#E7EE98;">&gt; \`</span></span>
<span class="line"><span style="color:#E7EE98;">  font-size: 1.5em;</span></span>
<span class="line"><span style="color:#E7EE98;">  text-align: center;</span></span>
<span class="line"><span style="color:#E7EE98;">  color: palevioletred;</span></span>
<span class="line"><span style="color:#E7EE98;">\`</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">declare</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">tag</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F6F6F4;">&gt;(</span><span style="color:#FFB86C;font-style:italic;">strs</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">TemplateStringsArray</span><span style="color:#F6F6F4;">, </span><span style="color:#F286C4;">...</span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;">[])</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// inference fails because &#39;number&#39; and &#39;string&#39; are both candidates that conflict</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> a </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">tag</span><span style="color:#E7EE98;">&lt;</span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#E7EE98;"> </span><span style="color:#F286C4;">|</span><span style="color:#E7EE98;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#E7EE98;">&gt; \`</span><span style="color:#F286C4;">\${</span><span style="color:#BF9EEE;">100</span><span style="color:#F286C4;">}</span><span style="color:#E7EE98;"> </span><span style="color:#F286C4;">\${</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">}</span><span style="color:#E7EE98;">\`</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">declare</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">styledComponent</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Props</span><span style="color:#24292E;">&gt;(</span><span style="color:#E36209;">strs</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TemplateStringsArray</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Component</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Props</span><span style="color:#24292E;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyProps</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">age</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">styledComponent</span><span style="color:#032F62;">&lt;</span><span style="color:#6F42C1;">MyProps</span><span style="color:#032F62;">&gt; \`</span></span>
<span class="line"><span style="color:#032F62;">  font-size: 1.5em;</span></span>
<span class="line"><span style="color:#032F62;">  text-align: center;</span></span>
<span class="line"><span style="color:#032F62;">  color: palevioletred;</span></span>
<span class="line"><span style="color:#032F62;">\`</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">declare</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tag</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">&gt;(</span><span style="color:#E36209;">strs</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TemplateStringsArray</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">...</span><span style="color:#E36209;">args</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">[])</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// inference fails because &#39;number&#39; and &#39;string&#39; are both candidates that conflict</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tag</span><span style="color:#032F62;">&lt;</span><span style="color:#005CC5;">string</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">|</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">number</span><span style="color:#032F62;">&gt; \`\${</span><span style="color:#005CC5;">100</span><span style="color:#032F62;">} \${&quot;hello&quot;}\`</span><span style="color:#24292E;">;</span></span></code></pre></div><h2 id="import类型" tabindex="-1"><code>import</code>类型 <a class="header-anchor" href="#import类型" aria-label="Permalink to &quot;\`import\`类型&quot;">​</a></h2><p>模块可以导入在其它模块里声明的类型。但是非模块的全局脚本不能访问模块里声明的类型。这里，<code>import</code>类型登场了。</p><p>在类型注释的位置使用<code>import(&quot;mod&quot;)</code>，就可以访问一个模块和它导出的声明，而不必导入它。</p><h3 id="例子-4" tabindex="-1">例子 <a class="header-anchor" href="#例子-4" aria-label="Permalink to &quot;例子&quot;">​</a></h3><p>在一个模块文件里，有一个<code>Pet</code>类的声明：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// module.d.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">declare</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Pet</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">   name</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// module.d.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">declare</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Pet</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#E36209;">name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>它可以被用在非模块文件<code>global-script.ts</code>：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// global-script.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">adopt</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">p</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">./module</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">).</span><span style="color:#97E1F1;font-style:italic;">Pet</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#E7EE98;">\`Adopting </span><span style="color:#F286C4;">\${</span><span style="color:#F6F6F4;">p.name</span><span style="color:#F286C4;">}</span><span style="color:#E7EE98;">...\`</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// global-script.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">adopt</span><span style="color:#24292E;">(</span><span style="color:#E36209;">p</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./module&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">Pet</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`Adopting \${</span><span style="color:#24292E;">p</span><span style="color:#032F62;">.</span><span style="color:#24292E;">name</span><span style="color:#032F62;">}...\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>它也可以被放在<code>.js</code>文件的JSDoc注释里，来引用模块里的类型：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// a.js</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">p</span><span style="color:#7B7F8B;"> { import(&quot;./module&quot;).Pet }</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">walk</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">p</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#E7EE98;">\`Walking </span><span style="color:#F286C4;">\${</span><span style="color:#F6F6F4;">p.name</span><span style="color:#F286C4;">}</span><span style="color:#E7EE98;">...\`</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// a.js</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">p</span><span style="color:#6A737D;"> { import(&quot;./module&quot;).Pet }</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">walk</span><span style="color:#24292E;">(</span><span style="color:#E36209;">p</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`Walking \${</span><span style="color:#24292E;">p</span><span style="color:#032F62;">.</span><span style="color:#24292E;">name</span><span style="color:#032F62;">}...\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="放开声明生成时可见性规则" tabindex="-1">放开声明生成时可见性规则 <a class="header-anchor" href="#放开声明生成时可见性规则" aria-label="Permalink to &quot;放开声明生成时可见性规则&quot;">​</a></h2><p>随着<code>import</code>类型的到来，许多在声明文件生成阶段报的可见性错误可以被编译器正确地处理，而不需要改变输入。</p><p>例如：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { createHash } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">crypto</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> hash </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">createHash</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">sha256</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#7B7F8B;">//           ^^^^</span></span>
<span class="line"><span style="color:#7B7F8B;">// Exported variable &#39;hash&#39; has or is using name &#39;Hash&#39; from external module &quot;crypto&quot; but cannot be named.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { createHash } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;crypto&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">hash</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createHash</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;sha256&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">//           ^^^^</span></span>
<span class="line"><span style="color:#6A737D;">// Exported variable &#39;hash&#39; has or is using name &#39;Hash&#39; from external module &quot;crypto&quot; but cannot be named.</span></span></code></pre></div><p>TypeScript 2.9不会报错，生成文件如下：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">declare</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> hash</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">crypto</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">).</span><span style="color:#97E1F1;font-style:italic;">Hash</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">declare</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">hash</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;crypto&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">Hash</span><span style="color:#24292E;">;</span></span></code></pre></div><h2 id="支持import-meta" tabindex="-1">支持<code>i<wbr>mport.meta</code> <a class="header-anchor" href="#支持import-meta" aria-label="Permalink to &quot;支持\`i&lt;wbr&gt;mport.meta\`&quot;">​</a></h2><p>TypeScript 2.9引入对<code>i<wbr>mport.meta</code>的支持，它是当前<a href="https://github.com/tc39/proposal-import-meta" target="_blank" rel="noreferrer">TC39建议</a>里的一个元属性。</p><p><code>i<wbr>mport.meta</code>类型是全局的<code>ImportMeta</code>类型，它在<code>lib.es5.d.ts</code>里定义。 这个接口地使用十分有限。 添加众所周知的Node和浏览器属性需要进行接口合并，还有可能需要根据上下文来增加全局空间。</p><h3 id="例子-5" tabindex="-1">例子 <a class="header-anchor" href="#例子-5" aria-label="Permalink to &quot;例子&quot;">​</a></h3><p>假设<code>__dirname</code>永远存在于<code>i<wbr>mport.meta</code>，那么可以通过重新开放<code>ImportMeta</code>接口来进行声明：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// node.d.ts</span></span>
<span class="line"><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ImportMeta</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    __dirname</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// node.d.ts</span></span>
<span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ImportMeta</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">__dirname</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>用法如下：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;">.meta.__dirname </span><span style="color:#7B7F8B;">// Has type &#39;string&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">meta</span><span style="color:#24292E;">.__dirname </span><span style="color:#6A737D;">// Has type &#39;string&#39;</span></span></code></pre></div><p><code>i<wbr>mport.meta</code>仅在输出目标为<code>ESNext</code>模块和ECMAScript时才生效。</p><h2 id="新的-resolvejsonmodule" tabindex="-1">新的<code>--resolveJsonModule</code> <a class="header-anchor" href="#新的-resolvejsonmodule" aria-label="Permalink to &quot;新的\`--resolveJsonModule\`&quot;">​</a></h2><p>在Node.js应用里经常需要使用<code>.json</code>。TypeScript 2.9的<code>--resolveJsonModule</code>允许从<code>.json</code>文件里导入，获取类型。</p><h3 id="例子-6" tabindex="-1">例子 <a class="header-anchor" href="#例子-6" aria-label="Permalink to &quot;例子&quot;">​</a></h3><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// settings.json</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">repo</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">: </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">TypeScript</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">dry</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">: </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">debug</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">: </span><span style="color:#BF9EEE;">false</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// settings.json</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;repo&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;TypeScript&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;dry&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;debug&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// a.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> settings </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">./settings.json</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">settings.debug </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">;  </span><span style="color:#7B7F8B;">// OK</span></span>
<span class="line"><span style="color:#F6F6F4;">settings.dry </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">;  </span><span style="color:#7B7F8B;">// Error: Operator &#39;===&#39; cannot be applied boolean and number</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// a.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> settings </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./settings.json&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">settings.debug </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;  </span><span style="color:#6A737D;">// OK</span></span>
<span class="line"><span style="color:#24292E;">settings.dry </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;  </span><span style="color:#6A737D;">// Error: Operator &#39;===&#39; cannot be applied boolean and number</span></span></code></pre></div><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// tsconfig.json</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">compilerOptions</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">: {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">module</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">commonjs</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">resolveJsonModule</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">esModuleInterop</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// tsconfig.json</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;module&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;commonjs&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;resolveJsonModule&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;esModuleInterop&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="默认-pretty输出" tabindex="-1">默认<code>--pretty</code>输出 <a class="header-anchor" href="#默认-pretty输出" aria-label="Permalink to &quot;默认\`--pretty\`输出&quot;">​</a></h2><p>从TypeScript 2.9开始，如果应用支持彩色文字，那么错误输出时会默认应用<code>--pretty</code>。 TypeScript会检查输出流是否设置了<a href="https://nodejs.org/api/tty.html" target="_blank" rel="noreferrer"><code>isTty</code></a>属性。</p><p>使用<code>--pretty false</code>命令行选项或<code>tsconfig.json</code>里设置<code>&quot;pretty&quot;: false</code>来禁用<code>--pretty</code>输出。</p><h2 id="新的-declarationmap" tabindex="-1">新的<code>--declarationMap</code> <a class="header-anchor" href="#新的-declarationmap" aria-label="Permalink to &quot;新的\`--declarationMap\`&quot;">​</a></h2><p>随着<code>--declaration</code>一起启用<code>--declarationMap</code>，编译器在生成<code>.d.ts</code>的同时还会生成<code>.d.ts.map</code>。 语言服务现在也能够理解这些map文件，将声明文件映射到源码。</p><p>换句话说，在启用了<code>--declarationMap</code>后生成的<code>.d.ts</code>文件里点击go-to-definition，将会导航到源文件里的位置（<code>.ts</code>），而不是导航到<code>.d.ts</code>文件里。</p>`,67),e=[p];function t(c,r,y,F,i,E){return n(),a("div",null,e)}const u=s(o,[["render",t]]);export{C as __pageData,u as default};
