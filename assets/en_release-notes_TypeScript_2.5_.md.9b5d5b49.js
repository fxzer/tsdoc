import{_ as e,o as s,c as a,V as o}from"./chunks/framework.ced88878.js";const F=JSON.parse('{"title":"TypeScript 2.5","description":"","frontmatter":{"title":"TypeScript 2.5","layout":"docs","permalink":"/docs/handbook/release-notes/typescript-2-5.html","oneline":"TypeScript 2.5 Release Notes"},"headers":[],"relativePath":"en/release-notes/TypeScript[2.5].md","lastUpdated":1681915487000}'),n={name:"en/release-notes/TypeScript[2.5].md"},t=o('<h2 id="optional-catch-clause-variables" tabindex="-1">Optional <code>catch</code> clause variables <a class="header-anchor" href="#optional-catch-clause-variables" aria-label="Permalink to &quot;Optional `catch` clause variables&quot;">​</a></h2><p>Thanks to work done by <a href="https://github.com/tinganho" target="_blank" rel="noreferrer">@tinganho</a>, TypeScript 2.5 implements a new ECMAScript feature that allows users to omit the variable in <code>catch</code> clauses. For example, when using <code>JSON.parse</code> you may need to wrap calls to the function with a <code>try</code>/<code>catch</code>, but you may not end up using the <code>SyntaxError</code> that gets thrown when input is erroneous.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> input </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">...</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>\n<span class="line"><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>\n<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#BF9EEE;">JSON</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">parse</span><span style="color:#F6F6F4;">(input);</span></span>\n<span class="line"><span style="color:#F6F6F4;">} </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> {</span></span>\n<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// ^ Notice that our `catch` clause doesn&#39;t declare a variable.</span></span>\n<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Invalid JSON given</span><span style="color:#F286C4;">\\n\\n</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> input);</span></span>\n<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> input </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;...&quot;</span><span style="color:#24292E;">;</span></span>\n<span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(input);</span></span>\n<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> {</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ^ Notice that our `catch` clause doesn&#39;t declare a variable.</span></span>\n<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Invalid JSON given</span><span style="color:#005CC5;">\\n\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> input);</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="type-assertion-cast-syntax-in-checkjs-ts-check-mode" tabindex="-1">Type assertion/cast syntax in <code>checkJs</code>/<code>@ts-check</code> mode <a class="header-anchor" href="#type-assertion-cast-syntax-in-checkjs-ts-check-mode" aria-label="Permalink to &quot;Type assertion/cast syntax in `checkJs`/`@ts-check` mode&quot;">​</a></h2><p>TypeScript 2.5 introduces the ability to <a href="https://github.com/Microsoft/TypeScript/issues/5158" target="_blank" rel="noreferrer">assert the type of expressions when using plain JavaScript in your projects</a>. The syntax is an <code>/** @type {...} */</code> annotation comment followed by a parenthesized expression whose type needs to be re-evaluated. For example:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#7B7F8B;">/** </span><span style="color:#F286C4;">@type</span><span style="color:#7B7F8B;"> </span><span style="color:#97E1F1;font-style:italic;">{SomeType}</span><span style="color:#7B7F8B;"> */</span><span style="color:#F6F6F4;"> AnyParenthesizedExpression;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/** </span><span style="color:#D73A49;">@type</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{SomeType}</span><span style="color:#6A737D;"> */</span><span style="color:#24292E;"> AnyParenthesizedExpression;</span></span></code></pre></div><h2 id="deduplicated-and-redirected-packages" tabindex="-1">Deduplicated and redirected packages <a class="header-anchor" href="#deduplicated-and-redirected-packages" aria-label="Permalink to &quot;Deduplicated and redirected packages&quot;">​</a></h2><p>When importing using the <code>Node</code> module resolution strategy in TypeScript 2.5, the compiler will now check whether files originate from &quot;identical&quot; packages. If a file originates from a package with a <code>package.json</code> containing the same <code>name</code> and <code>version</code> fields as a previously encountered package, then TypeScript will redirect itself to the top-most package. This helps resolve problems where two packages might contain identical declarations of classes, but which contain <code>private</code> members that cause them to be structurally incompatible.</p><p>As a nice bonus, this can also reduce the memory and runtime footprint of the compiler and language service by avoiding loading <code>.d.ts</code> files from duplicate packages.</p><h2 id="the-preservesymlinks-compiler-flag" tabindex="-1">The <code>--preserveSymlinks</code> compiler flag <a class="header-anchor" href="#the-preservesymlinks-compiler-flag" aria-label="Permalink to &quot;The `--preserveSymlinks` compiler flag&quot;">​</a></h2><p>TypeScript 2.5 brings the <a href="/tsdoc-vitepress/tsconfig#preserveSymlinks"><code>preserveSymlinks</code></a> flag, which parallels the behavior of <a href="https://nodejs.org/api/cli.html#cli_preserve_symlinks" target="_blank" rel="noreferrer">the <code>--preserve-symlinks</code> flag in Node.js</a>. This flag also exhibits the opposite behavior to Webpack&#39;s <code>resolve.symlinks</code> option (i.e. setting TypeScript&#39;s <a href="/tsdoc-vitepress/tsconfig#preserveSymlinks"><code>preserveSymlinks</code></a> to <code>true</code> parallels setting Webpack&#39;s <code>resolve.symlinks</code> to <code>false</code>, and vice-versa).</p><p>In this mode, references to modules and packages (e.g. <code>import</code>s and <code>/// &lt;reference type=&quot;...&quot; /&gt;</code> directives) are all resolved relative to the location of the symbolic link file, rather than relative to the path that the symbolic link resolves to. For a more concrete example, we&#39;ll defer to <a href="https://nodejs.org/api/cli.html#cli_preserve_symlinks" target="_blank" rel="noreferrer">the documentation on the Node.js website</a>.</p>',12),l=[t];function p(c,r,i,d,y,h){return s(),a("div",null,l)}const m=e(n,[["render",p]]);export{F as __pageData,m as default};
