import{_ as s,o as a,c as n,V as o}from"./chunks/framework.ced88878.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"zh/handbooks/handbook-v2/Basics.md","lastUpdated":1682921420000}'),l={name:"zh/handbooks/handbook-v2/Basics.md"},p=o(`<p>JavaScript 中的每个值都有一组行为，您可以通过运行不同的操作观察到这些行为。 这听起来很抽象，但作为一个简单的例子，考虑我们可能对名为<code>message</code>的变量运行的一些操作。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// Accessing the property &#39;toLowerCase&#39;</span></span>
<span class="line"><span style="color:#7B7F8B;">// on &#39;message&#39; and then calling it</span></span>
<span class="line"><span style="color:#F6F6F4;">message.</span><span style="color:#62E884;">toLowerCase</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// Calling &#39;message&#39;</span></span>
<span class="line"><span style="color:#62E884;">message</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Accessing the property &#39;toLowerCase&#39;</span></span>
<span class="line"><span style="color:#6A737D;">// on &#39;message&#39; and then calling it</span></span>
<span class="line"><span style="color:#24292E;">message.</span><span style="color:#6F42C1;">toLowerCase</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Calling &#39;message&#39;</span></span>
<span class="line"><span style="color:#6F42C1;">message</span><span style="color:#24292E;">();</span></span></code></pre></div><p>如果我们将其分解，第一行可运行代码访问名为<code>toLowerCase的属性，然后调用它。 第二个尝试直接调用 </code>message\` 。</p><p>但是假设我们不知道 <code>message</code> 的值——这很常见——我们无法可靠地说出尝试运行任何这段代码会得到什么结果。 每个操作的行为完全取决于我们首先拥有的价值。</p><ul><li><code>message</code> 是可调用的吗？</li><li>它有一个名为 <code>toLowerCase</code> 的属性吗？</li><li>如果是，<code>toLowerCase</code> 是否可以调用？</li><li>如果这两个值都是可调用的，它们会返回什么？ 这些问题的答案通常是我们在编写 JavaScript 时记在脑子里的东西，我们必须希望所有细节都正确。</li></ul><p>假设 <code>message</code> 是按以下方式定义的。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> message </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Hello World!</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">message</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Hello World!&quot;</span><span style="color:#24292E;">;</span></span></code></pre></div><p>正如您可能猜到的那样，如果我们尝试运行 <code>message.toLowerCase()</code>，我们只会得到小写的相同字符串。</p><p>那第二行代码呢？ 如果您熟悉 JavaScript，就会知道这会失败并出现异常：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">TypeError: message is not a function</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">TypeError: message is not a function</span></span></code></pre></div><p>It&#39;d be great if we could avoid mistakes like this.</p><p>如果我们能避免这样的错误就太好了。</p><p>当我们运行我们的代码时，我们的 JavaScript 运行时选择做什么的方式是通过确定值的 <em>type</em> - 它具有什么样的行为和功能。 这是 <code>TypeError</code> 所暗示的部分内容 - 它表示字符串<code>&quot;Hello World!&quot;</code> 不能作为函数调用。</p><p>对于某些值，例如原语<code>string</code>和<code>number</code>，我们可以在运行时使用<code>typeof</code>运算符识别它们的类型。 但是对于函数之类的其他东西，没有相应的运行时机制来识别它们的类型。 例如，考虑这个函数：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">fn</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> x.</span><span style="color:#62E884;">flip</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">(</span><span style="color:#E36209;">x</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> x.</span><span style="color:#6F42C1;">flip</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们可以通过阅读代码观察到，只有给定一个具有可调用<code>flip</code> 属性的对象，此函数才会起作用，但 JavaScript 不会以我们可以在代码运行时检查的方式显示此信息。 在纯 JavaScript 中判断 <code>fn</code> 对特定值的作用的唯一方法是调用它并查看会发生什么。 这种行为使得很难预测代码在运行之前将做什么，这意味着在编写代码时更难知道代码将做什么。</p><p>这样看来，<em>type</em> 是描述哪些值可以传递给 <code>fn</code> 以及哪些值会崩溃的概念。 JavaScript 只真正提供了_dynamic_ 类型——运行代码看看会发生什么。</p><p>另一种方法是使用_static_类型系统来预测_在它运行之前_需要什么代码。</p><h2 id="静态类型检查" tabindex="-1">静态类型检查 <a class="header-anchor" href="#静态类型检查" aria-label="Permalink to &quot;静态类型检查&quot;">​</a></h2><p>回想一下我们之前尝试将<code>string</code>作为函数调用时遇到的<code>TypeError</code>。 <em>大多数人</em> 不喜欢在运行他们的代码时出现任何类型的错误——那些被认为是错误！ 当我们编写新代码时，我们会尽力避免引入新的错误。</p><p>如果我们只添加一点代码，保存我们的文件，重新运行代码，并立即看到错误，我们可能能够快速隔离问题； 但情况并非总是如此。 我们可能没有对该功能进行足够彻底的测试，因此我们可能永远不会真正遇到会抛出的潜在错误！ 或者，如果我们有幸目睹了错误，我们可能最终会进行大量重构并添加许多我们被迫挖掘的不同代码。</p><p>理想情况下，我们可以拥有一个工具来帮助我们在代码运行之前找到这些错误。 这就是像 TypeScript 这样的静态类型检查器所做的。 <em>静态类型系统</em> 描述了我们运行程序时我们的价值观的形状和行为。 像 TypeScript 这样的类型检查器使用该信息并告诉我们什么时候事情可能会偏离轨道。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// @errors: 2349</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> message </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hello!</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">message</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// @errors: 2349</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">message</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello!&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">message</span><span style="color:#24292E;">();</span></span></code></pre></div><p>使用 TypeScript 运行最后一个示例将在我们首先运行代码之前给我们一条错误消息。</p><h2 id="不期待错误" tabindex="-1">不期待错误 <a class="header-anchor" href="#不期待错误" aria-label="Permalink to &quot;不期待错误&quot;">​</a></h2><p>到目前为止，我们一直在讨论某些事情，比如运行时错误——JavaScript 运行时告诉我们它认为某些事情是荒谬的情况。 出现这些情况是因为 <a href="https://tc39.github.io/ecma262/" target="_blank" rel="noreferrer">ECMAScript 规范</a> 对语言在遇到意外情况时应如何表现有明确的说明。</p><p>例如，规范说尝试调用不可调用的东西应该抛出错误。 也许这听起来像是“显而易见的行为”，但您可以想象访问对象上不存在的属性也应该引发错误。 相反，JavaScript 给了我们不同的行为并返回值<code>undefined</code>:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> user </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  name</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Daniel</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  age</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">26</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">user.location; </span><span style="color:#7B7F8B;">// returns undefined</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">user</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  name: </span><span style="color:#032F62;">&quot;Daniel&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  age: </span><span style="color:#005CC5;">26</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">user.location; </span><span style="color:#6A737D;">// returns undefined</span></span></code></pre></div><p>最终，静态类型系统必须调用哪些代码应该在其系统中标记为错误，即使它是不会立即抛出错误的“有效”JavaScript。 在 TypeScript 中，以下代码会产生有关未定义 <code>location</code>的错误：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// @errors: 2339</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> user </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  name</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Daniel</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  age</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">26</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">user.location;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// @errors: 2339</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">user</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  name: </span><span style="color:#032F62;">&quot;Daniel&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  age: </span><span style="color:#005CC5;">26</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">user.location;</span></span></code></pre></div><p>For example: typos, 虽然有时这意味着在您可以表达的内容上进行权衡，但目的是在我们的程序中捕获合法的错误。 TypeScript 捕获了 <em>很多</em> 合法的错误。</p><p>例如：错别字，</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// @noErrors</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> announcement </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Hello World!</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// How quickly can you spot the typos?</span></span>
<span class="line"><span style="color:#F6F6F4;">announcement.</span><span style="color:#62E884;">toLocaleLowercase</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">announcement.</span><span style="color:#62E884;">toLocalLowerCase</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// We probably meant to write this...</span></span>
<span class="line"><span style="color:#F6F6F4;">announcement.</span><span style="color:#62E884;">toLocaleLowerCase</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// @noErrors</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">announcement</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Hello World!&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// How quickly can you spot the typos?</span></span>
<span class="line"><span style="color:#24292E;">announcement.</span><span style="color:#6F42C1;">toLocaleLowercase</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">announcement.</span><span style="color:#6F42C1;">toLocalLowerCase</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// We probably meant to write this...</span></span>
<span class="line"><span style="color:#24292E;">announcement.</span><span style="color:#6F42C1;">toLocaleLowerCase</span><span style="color:#24292E;">();</span></span></code></pre></div><p>uncalled functions,</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// @noUnusedLocals</span></span>
<span class="line"><span style="color:#7B7F8B;">// @errors: 2365</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">flipCoin</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// Meant to be Math.random()</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> Math.random </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0.5</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// @noUnusedLocals</span></span>
<span class="line"><span style="color:#6A737D;">// @errors: 2365</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">flipCoin</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Meant to be Math.random()</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Math.random </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.5</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>or basic logic errors.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// @errors: 2367</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> value </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Math.</span><span style="color:#62E884;">random</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0.5</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">?</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">a</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">b</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (value </span><span style="color:#F286C4;">!==</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">a</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// ...</span></span>
<span class="line"><span style="color:#F6F6F4;">} </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (value </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">b</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// Oops, unreachable</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// @errors: 2367</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">random</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.5</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;b&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (value </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (value </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;b&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Oops, unreachable</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="工具类型" tabindex="-1">工具类型 <a class="header-anchor" href="#工具类型" aria-label="Permalink to &quot;工具类型&quot;">​</a></h2><p>当我们在代码中出错时，TypeScript 可以捕获错误。 这很好，但 TypeScript 也可以防止我们一开始就犯这些错误。</p><p>类型检查器具有检查诸如我们是否正在访问变量和其他属性的正确属性之类的信息。 一旦获得该信息，它还可以开始 <em>建议</em> 您可能想要使用哪些属性。</p><p>这意味着 TypeScript 也可以用于编辑代码，核心类型检查器可以在您在编辑器中键入时提供错误消息和代码完成。 这是人们在谈论 TypeScript 中的工具时经常提到的部分内容。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// @noErrors</span></span>
<span class="line"><span style="color:#7B7F8B;">// @esModuleInterop</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> express </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">express</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> app </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">express</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">app.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">req</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">res</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  res.sen</span></span>
<span class="line"><span style="color:#7B7F8B;">//       ^|</span></span>
<span class="line"><span style="color:#F6F6F4;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">app.</span><span style="color:#62E884;">listen</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">3000</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// @noErrors</span></span>
<span class="line"><span style="color:#6A737D;">// @esModuleInterop</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> express </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;express&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">app</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">express</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">req</span><span style="color:#24292E;">, </span><span style="color:#E36209;">res</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  res.sen</span></span>
<span class="line"><span style="color:#6A737D;">//       ^|</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">listen</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3000</span><span style="color:#24292E;">);</span></span></code></pre></div><p>TypeScript 非常重视工具，这不仅仅是您键入时的完成和错误。 支持 TypeScript 的编辑器可以提供“快速修复”以自动修复错误、重构以轻松重新组织代码，以及用于跳转到变量定义或查找对给定变量的所有引用的有用导航功能。 所有这些都建立在类型检查器之上并且是完全跨平台的，所以很可能 <a href="https://github.com/Microsoft/TypeScript/wiki/TypeScript-Editor-Support" target="_blank" rel="noreferrer">你最喜欢的编辑器支持可用的 TypeScript</a>。</p><h2 id="ts-编译器tsc" tabindex="-1">TS 编译器<code>tsc</code> <a class="header-anchor" href="#ts-编译器tsc" aria-label="Permalink to &quot;TS 编译器\`tsc\`&quot;">​</a></h2><p>我们一直在谈论类型检查，但我们还没有使用我们的<em>类型检查器</em>。 让我们认识一下我们的新朋友 <code>tsc</code>，TypeScript 编译器。 首先，我们需要通过 npm 获取它。</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">npm </span><span style="color:#E7EE98;">install</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">-g</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">typescript</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-g</span><span style="color:#24292E;"> </span><span style="color:#032F62;">typescript</span></span></code></pre></div><blockquote><p>这将全局安装 TypeScript 编译器 <code>tsc</code>。 如果您更愿意从本地 <code>node_modules</code> 包运行 <code>tsc</code>，则可以使用 <code>npx</code> 或类似工具。</p></blockquote><p>现在让我们转到一个空文件夹并尝试编写我们的第一个 TypeScript 程序：<code>hello.ts</code>：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// Greets the world.</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Hello world!</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Greets the world.</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hello world!&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>请注意这里没有多余的装饰； 这个“hello world”程序看起来与您用 JavaScript 编写的“hello world”程序完全相同。 现在让我们通过运行由 <code>typescript</code> 包为我们安装的命令 <code>tsc</code> 来对其进行类型检查。</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">tsc </span><span style="color:#E7EE98;">hello.ts</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">tsc</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hello.ts</span></span></code></pre></div><p>我们运行了 <code>tsc</code> 却没有任何反应！ 好吧，没有类型错误，所以我们没有在控制台中得到任何输出，因为没有什么可报告的。</p><p>但再次检查 - 我们得到了一些 <em>file</em> 输出。 如果我们查看当前目录，我们会在 <code>hello.ts</code> 旁边看到一个 <code>hello.js</code> 文件。 这是我们的 <code>hello.ts</code> 文件在 <code>tsc</code> <em>compiles</em> 或 <em>transforms</em> 到纯 JavaScript 文件后的输出。 如果我们检查内容，我们将看到 TypeScript 在处理 <code>.ts</code>文件后吐出的内容：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// Greets the world.</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Hello world!</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Greets the world.</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hello world!&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>在这种情况下，TypeScript 几乎没有什么可以转换的，所以它看起来和我们写的一样。 编译器试图发出干净可读的代码，看起来像一个人会写的东西。 虽然这并不总是那么容易，但 TypeScript 始终如一地缩进，注意我们的代码何时跨越不同的代码行，并尝试保留注释。</p><p>如果我们 <em>确实</em> 引入了类型检查错误怎么办？ 让我们重写<code>hello.ts</code>：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// @noErrors</span></span>
<span class="line"><span style="color:#7B7F8B;">// This is an industrial-grade general-purpose greeter function:</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">greet</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">person</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">date</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#E7EE98;">\`Hello </span><span style="color:#F286C4;">\${</span><span style="color:#F6F6F4;">person</span><span style="color:#F286C4;">}</span><span style="color:#E7EE98;">, today is </span><span style="color:#F286C4;">\${</span><span style="color:#F6F6F4;">date</span><span style="color:#F286C4;">}</span><span style="color:#E7EE98;">!\`</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">greet</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Brendan</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// @noErrors</span></span>
<span class="line"><span style="color:#6A737D;">// This is an industrial-grade general-purpose greeter function:</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">greet</span><span style="color:#24292E;">(</span><span style="color:#E36209;">person</span><span style="color:#24292E;">, </span><span style="color:#E36209;">date</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`Hello \${</span><span style="color:#24292E;">person</span><span style="color:#032F62;">}, today is \${</span><span style="color:#24292E;">date</span><span style="color:#032F62;">}!\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">greet</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Brendan&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>如果我们再次运行 <code>tsc hello.ts</code>，请注意我们在命令行上收到错误！</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">Expected 2 arguments, but got 1.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Expected 2 arguments, but got 1.</span></span></code></pre></div><p>如果我们再次运行 <code>tsc hello.ts</code>，请注意我们在命令行上收到错误！TypeScript 告诉我们忘记将参数传递给 <code>greet</code> 函数，这是正确的。 到目前为止，我们只编写了标准的 JavaScript，但类型检查仍然能够发现我们代码的问题。 感谢打字稿！</p><h2 id="触发错误" tabindex="-1">触发错误 <a class="header-anchor" href="#触发错误" aria-label="Permalink to &quot;触发错误&quot;">​</a></h2><p>在上一个示例中，您可能没有注意到的一件事是我们的 <code>hello.js</code> 文件再次更改。 如果我们打开那个文件，那么我们会看到内容基本上仍然与我们的输入文件相同。 考虑到 <code>tsc</code> 报告了有关我们代码的错误，这可能有点令人惊讶，但这是基于 TypeScript 的核心价值之一：很多时候，<em>你</em> 比 TypeScript 更清楚。</p><p>重申一下，类型检查代码限制了您可以运行的程序种类，因此需要权衡类型检查器认为可接受的东西种类。 大多数情况下这没问题，但在某些情况下这些检查会妨碍您。 例如，想象一下您将 JavaScript 代码迁移到 TypeScript 并引入了类型检查错误。 最终您会为类型检查器清理一些东西，但是原始的 JavaScript 代码已经可以工作了！ 为什么要将它转换为 TypeScript 才能阻止你运行它？</p><p>所以 TypeScript 不会妨碍您。 当然，随着时间的推移，您可能希望对错误采取更多的防御措施，并让 TypeScript 的行为更加严格。 在这种情况下，您可以使用 <a href="/tsdoc-vitepress/tsconfig#noEmitOnError"><code>noEmitOnError</code></a> 编译器选项。 尝试更改您的“hello.ts”文件并使用该标志运行“tsc”：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">tsc </span><span style="color:#BF9EEE;">--noEmitOnError</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">hello.ts</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">tsc</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--noEmitOnError</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hello.ts</span></span></code></pre></div><p>你会注意到 <code>hello.js</code> 永远不会更新。</p><h2 id="显式类型" tabindex="-1">显式类型 <a class="header-anchor" href="#显式类型" aria-label="Permalink to &quot;显式类型&quot;">​</a></h2><p>到目前为止，我们还没有告诉 TypeScript <code>person</code> 或 <code>date</code> 是什么。 让我们编辑代码以告诉 TypeScript <code>person</code> 是一个 <code>string</code>，而 <code>date</code> 应该是一个 <code>Date</code> 对象。 我们还将在 <code>date</code> 上使用 <code>toDateString()</code> 方法。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">greet</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">person</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">date</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Date</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#E7EE98;">\`Hello </span><span style="color:#F286C4;">\${</span><span style="color:#F6F6F4;">person</span><span style="color:#F286C4;">}</span><span style="color:#E7EE98;">, today is </span><span style="color:#F286C4;">\${</span><span style="color:#F6F6F4;">date.</span><span style="color:#62E884;">toDateString</span><span style="color:#F6F6F4;">()</span><span style="color:#F286C4;">}</span><span style="color:#E7EE98;">!\`</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">greet</span><span style="color:#24292E;">(</span><span style="color:#E36209;">person</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">, </span><span style="color:#E36209;">date</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`Hello \${</span><span style="color:#24292E;">person</span><span style="color:#032F62;">}, today is \${</span><span style="color:#24292E;">date</span><span style="color:#032F62;">.</span><span style="color:#6F42C1;">toDateString</span><span style="color:#032F62;">()</span><span style="color:#032F62;">}!\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们所做的是在 <code>person</code> 和 <code>date</code> 上添加 <em>类型注解</em> 来描述可以调用哪些类型的值 <code>greet</code>。 您可以将该签名解读为“<code>greet</code> 接受类型为 <code>string</code> 的 <code>person</code> 和类型为 <code>Date</code> 的 <code>date</code>。</p><p>有了这个，TypeScript 可以告诉我们 <code>greet</code> 可能被错误调用的其他情况。 例如...</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// @errors: 2345</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">greet</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">person</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">date</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Date</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#E7EE98;">\`Hello </span><span style="color:#F286C4;">\${</span><span style="color:#F6F6F4;">person</span><span style="color:#F286C4;">}</span><span style="color:#E7EE98;">, today is </span><span style="color:#F286C4;">\${</span><span style="color:#F6F6F4;">date.</span><span style="color:#62E884;">toDateString</span><span style="color:#F6F6F4;">()</span><span style="color:#F286C4;">}</span><span style="color:#E7EE98;">!\`</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">greet</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Maddison</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#62E884;">Date</span><span style="color:#F6F6F4;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// @errors: 2345</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">greet</span><span style="color:#24292E;">(</span><span style="color:#E36209;">person</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">, </span><span style="color:#E36209;">date</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`Hello \${</span><span style="color:#24292E;">person</span><span style="color:#032F62;">}, today is \${</span><span style="color:#24292E;">date</span><span style="color:#032F62;">.</span><span style="color:#6F42C1;">toDateString</span><span style="color:#032F62;">()</span><span style="color:#032F62;">}!\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">greet</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Maddison&quot;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">());</span></span></code></pre></div><p>嗯？ TypeScript 在我们的第二个参数上报告了错误，但为什么呢？</p><p>也许令人惊讶的是，在 JavaScript 中调用 <code>Date()</code>会返回一个<code>string</code>。 另一方面，用 <code>new Date()</code> 构造一个 <code>Date</code> 实际上符合我们预期的结果。</p><p>无论如何，我们可以快速修复错误：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">greet</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">person</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">date</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Date</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#E7EE98;">\`Hello </span><span style="color:#F286C4;">\${</span><span style="color:#F6F6F4;">person</span><span style="color:#F286C4;">}</span><span style="color:#E7EE98;">, today is </span><span style="color:#F286C4;">\${</span><span style="color:#F6F6F4;">date.</span><span style="color:#62E884;">toDateString</span><span style="color:#F6F6F4;">()</span><span style="color:#F286C4;">}</span><span style="color:#E7EE98;">!\`</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line highlighted"><wbr></span>
<span class="line"><span style="color:#62E884;">greet</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Maddison</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Date</span><span style="color:#F6F6F4;">());</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">greet</span><span style="color:#24292E;">(</span><span style="color:#E36209;">person</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">, </span><span style="color:#E36209;">date</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`Hello \${</span><span style="color:#24292E;">person</span><span style="color:#032F62;">}, today is \${</span><span style="color:#24292E;">date</span><span style="color:#032F62;">.</span><span style="color:#6F42C1;">toDateString</span><span style="color:#032F62;">()</span><span style="color:#032F62;">}!\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line highlighted"><wbr></span>
<span class="line"><span style="color:#6F42C1;">greet</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Maddison&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">());</span></span></code></pre></div><p>请记住，我们不必总是编写显式类型注释。 在许多情况下，TypeScript 甚至可以为我们 <em>推断</em>（或“弄清楚”）类型，即使我们忽略它们也是如此。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> msg </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hello there!</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#7B7F8B;">//  ^?</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> msg </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello there!&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">//  ^?</span></span></code></pre></div><p>即使我们没有告诉 TypeScript <code>msg</code> 的类型是 <code>string</code>，它也能识别出来。 这是一个特性，最好不要在类型系统最终会推断出相同类型时添加注释。</p><blockquote><p>注意：前面代码示例中的消息气泡是您将鼠标悬停在该词上时编辑器将显示的内容。</p></blockquote><h2 id="擦除类型" tabindex="-1">擦除类型 <a class="header-anchor" href="#擦除类型" aria-label="Permalink to &quot;擦除类型&quot;">​</a></h2><p>让我们看看当我们用<code>tsc</code> 编译上面的函数 <code>greet</code> 输出 JavaScript 时会发生什么：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// @showEmit</span></span>
<span class="line"><span style="color:#7B7F8B;">// @target: es5</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">greet</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">person</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">date</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Date</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#E7EE98;">\`Hello </span><span style="color:#F286C4;">\${</span><span style="color:#F6F6F4;">person</span><span style="color:#F286C4;">}</span><span style="color:#E7EE98;">, today is </span><span style="color:#F286C4;">\${</span><span style="color:#F6F6F4;">date.</span><span style="color:#62E884;">toDateString</span><span style="color:#F6F6F4;">()</span><span style="color:#F286C4;">}</span><span style="color:#E7EE98;">!\`</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">greet</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Maddison</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Date</span><span style="color:#F6F6F4;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// @showEmit</span></span>
<span class="line"><span style="color:#6A737D;">// @target: es5</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">greet</span><span style="color:#24292E;">(</span><span style="color:#E36209;">person</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">, </span><span style="color:#E36209;">date</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`Hello \${</span><span style="color:#24292E;">person</span><span style="color:#032F62;">}, today is \${</span><span style="color:#24292E;">date</span><span style="color:#032F62;">.</span><span style="color:#6F42C1;">toDateString</span><span style="color:#032F62;">()</span><span style="color:#032F62;">}!\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">greet</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Maddison&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">());</span></span></code></pre></div><p>这里注意两件事：</p><ol><li>我们的 <code>person</code> 和 <code>date</code> 参数不再有类型注释。</li><li>我们的“模板字符串”——使用反引号（<code>\`</code> 字符）的字符串被转换为带有连接的普通字符串。</li></ol><p>稍后会详细介绍第二点，但现在让我们关注第一点。 类型注释不是 JavaScript 的一部分（或 ECMAScript 是迂腐的），因此实际上没有任何浏览器或其他运行时可以不加修改地运行 TypeScript。 这就是为什么 TypeScript 首先需要一个编译器——它需要某种方法来剥离或转换任何特定于 TypeScript 的代码，以便您可以运行它。 大多数特定于 TypeScript 的代码都被删除了，同样，这里我们的类型注释也被完全删除了。</p><blockquote><p><strong>切记</strong>：类型注解永远不会改变程序的运行时行为。</p></blockquote><h2 id="降级处理" tabindex="-1">降级处理 <a class="header-anchor" href="#降级处理" aria-label="Permalink to &quot;降级处理&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#E7EE98;">\`Hello </span><span style="color:#F286C4;">\${</span><span style="color:#F6F6F4;">person</span><span style="color:#F286C4;">}</span><span style="color:#E7EE98;">, today is </span><span style="color:#F286C4;">\${</span><span style="color:#F6F6F4;">date.</span><span style="color:#62E884;">toDateString</span><span style="color:#F6F6F4;">()</span><span style="color:#F286C4;">}</span><span style="color:#E7EE98;">!\`</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">\`Hello \${</span><span style="color:#24292E;">person</span><span style="color:#032F62;">}, today is \${</span><span style="color:#24292E;">date</span><span style="color:#032F62;">.</span><span style="color:#6F42C1;">toDateString</span><span style="color:#032F62;">()</span><span style="color:#032F62;">}!\`</span><span style="color:#24292E;">;</span></span></code></pre></div><p>to</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Hello </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> person </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">, today is </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> date.</span><span style="color:#62E884;">toDateString</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">!</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;Hello &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> person </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;, today is &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> date.</span><span style="color:#6F42C1;">toDateString</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;!&quot;</span><span style="color:#24292E;">;</span></span></code></pre></div><p>为什么会这样？</p><p>模板字符串是 ECMAScript 版本 ECMAScript 2015（又名 ECMAScript 6、ES2015、ES6 等 - <em>别问</em>）的一项功能。 TypeScript 能够将代码从新版本的 ECMAScript 重写到旧版本，例如 ECMAScript 3 或 ECMAScript 5（又名 ES3 和 ES5）。 从较新或“更高”版本的 ECMAScript 向下移动到较旧或“较低”版本的过程有时称为_downleveling_。</p><p>默认情况下，TypeScript 以 ES3 为目标，这是 ECMAScript 的一个非常旧的版本。 我们可以使用 <code>target</code> 选项选择更新一些的东西。 使用“--target es2015”运行会将 TypeScript 更改为目标 ECMAScript 2015，这意味着代码应该能够在支持 ECMAScript 2015 的任何地方运行。 所以运行 <code>tsc --target es2015 hello.ts</code> 给我们以下输出：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">greet</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">person</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">date</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#E7EE98;">\`Hello </span><span style="color:#F286C4;">\${</span><span style="color:#F6F6F4;">person</span><span style="color:#F286C4;">}</span><span style="color:#E7EE98;">, today is </span><span style="color:#F286C4;">\${</span><span style="color:#F6F6F4;">date.</span><span style="color:#62E884;">toDateString</span><span style="color:#F6F6F4;">()</span><span style="color:#F286C4;">}</span><span style="color:#E7EE98;">!\`</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#62E884;">greet</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Maddison</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Date</span><span style="color:#F6F6F4;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">greet</span><span style="color:#24292E;">(</span><span style="color:#E36209;">person</span><span style="color:#24292E;">, </span><span style="color:#E36209;">date</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`Hello \${</span><span style="color:#24292E;">person</span><span style="color:#032F62;">}, today is \${</span><span style="color:#24292E;">date</span><span style="color:#032F62;">.</span><span style="color:#6F42C1;">toDateString</span><span style="color:#032F62;">()</span><span style="color:#032F62;">}!\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">greet</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Maddison&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">());</span></span></code></pre></div><blockquote><p>虽然默认目标是 ES3，但当前绝大多数浏览器都支持 ES2015。 因此，大多数开发人员可以安全地将 ES2015 或更高版本指定为目标，除非与某些旧版浏览器的兼容性很重要。</p></blockquote><h2 id="严格模式" tabindex="-1">严格模式 <a class="header-anchor" href="#严格模式" aria-label="Permalink to &quot;严格模式&quot;">​</a></h2><p>不同的用户使用 TypeScript 在类型检查器中寻找不同的东西。 有些人正在寻找一种更宽松的选择加入体验，它可以帮助仅验证他们程序的某些部分，并且仍然拥有不错的工具。 这是 TypeScript 的默认体验，其中类型是可选的，推理采用最宽松的类型，并且不检查潜在的<code>null</code>/<code>undefined</code>值。 就像 <code>tsc</code> 在遇到错误时发出的方式一样，这些默认设置已准备就绪，不会妨碍您。 如果您正在迁移现有的 JavaScript，那么这可能是理想的第一步。</p><p>相比之下，许多用户更喜欢让 TypeScript 尽可能多地立即验证，这就是该语言也提供严格设置的原因。 这些严格设置将静态类型检查从一个开关（无论您的代码是否被检查）变成更接近拨号盘的东西。 你把这个拨盘调得越高，TypeScript 就会为你检查越多。 这可能需要一些额外的工作，但总的来说，从长远来看它是值得的，并且可以进行更彻底的检查和更准确的工具。 如果可能，新代码库应始终启用这些严格检查。</p><p>TypeScript 有几个可以打开或关闭的类型检查严格性标志，除非另有说明，否则我们的所有示例都将启用所有这些标志。 CLI 中的 <a href="/tsdoc-vitepress/tsconfig#strict"><code>strict</code></a> 标志，或 [<code>tsconfig.json</code>](<a href="https://www.typescriptlang.org/docs/handbook/tsconfig" target="_blank" rel="noreferrer">https://www.typescriptlang.org/docs/handbook/tsconfig</a> -json.html) 同时打开它们，但我们可以单独选择退出它们。 您应该了解的两个最大的是 <a href="/tsdoc-vitepress/tsconfig#noImplicitAny"><code>noImplicitAny</code></a> 和 <a href="/tsdoc-vitepress/tsconfig#strictNullChecks"><code>strictNullChecks</code></a>。</p><h2 id="禁止隐式any" tabindex="-1">禁止隐式any <a class="header-anchor" href="#禁止隐式any" aria-label="Permalink to &quot;禁止隐式any&quot;">​</a></h2><p>回想一下，在某些地方，TypeScript 不会尝试为我们推断类型，而是回退到最宽松的类型：<code>any</code>。 这不是可能发生的最糟糕的事情——毕竟，回退到 <code>any</code> 只是普通的 JavaScript 体验。</p><p>然而，使用 <code>any</code> 通常会违背使用 TypeScript 的初衷。 您的程序类型越多，您获得的验证和工具就越多，这意味着您在编写代码时遇到的错误会更少。 打开 <a href="/tsdoc-vitepress/tsconfig#noImplicitAny"><code>noImplicitAny</code></a> 标志将对类型被隐式推断为 any 的任何变量发出错误。</p><h2 id="严格空值检查" tabindex="-1">严格空值检查 <a class="header-anchor" href="#严格空值检查" aria-label="Permalink to &quot;严格空值检查&quot;">​</a></h2><p>默认情况下，像 <code>null</code> 和 <code>undefined</code> 这样的值可以分配给任何其他类型。 这可以使编写一些代码更容易，但忘记处理 <code>null</code> 和 <code>undefined</code> 是世界上无数错误的原因——有些人认为这是一个 <a href="https://www.youtube.com/watch?v=ybrQvs4x0Ps" target="_blank" rel="noreferrer">十亿美元的错误</a>！ <code>strictNullChecks</code> 标志使处理 <code>null</code> 和 <code>undefined</code> 更加明确，并且_spares_ 我们不必担心我们是否_忘记_处理 <code>null</code> 和 <code>undefined</code>。</p>`,105),e=[p];function t(c,r,y,F,i,d){return a(),n("div",null,e)}const g=s(l,[["render",t]]);export{u as __pageData,g as default};
