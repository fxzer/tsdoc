import{_ as s,o as n,c as a,V as e}from"./chunks/framework.ced88878.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"zh/tutorials/DOM Manipulation.md","lastUpdated":1682670826000}'),l={name:"zh/tutorials/DOM Manipulation.md"},o=e(`<h2 id="dom-manipulation" tabindex="-1">DOM Manipulation <a class="header-anchor" href="#dom-manipulation" aria-label="Permalink to &quot;DOM Manipulation&quot;">​</a></h2><h3 id="an-exploration-into-the-htmlelement-type" tabindex="-1"><em>An exploration into the <code>HTMLElement</code> type</em> <a class="header-anchor" href="#an-exploration-into-the-htmlelement-type" aria-label="Permalink to &quot;_An exploration into the \`HTMLElement\` type_&quot;">​</a></h3><p>自标准化以来的 20 多年里，JavaScript 取得了长足的进步。虽然在 2020 年，JavaScript 可以用于服务器、数据科学甚至物联网设备，但重要的是要记住它最流行的用例：网络浏览器。</p><p>网站由 HTML 和/或 XML 文档组成。这些文件是静态的，它们不会改变。 <em>文档对象模型 (DOM)</em> 是由浏览器实现的编程接口，目的是使静态网站发挥作用。 DOM API 可用于更改文档结构、样式和内容。该 API 非常强大，以至于围绕它开发了无数前端框架（jQuery、React、Angular 等），以使动态网站更易于开发。</p><p>TypeScript 是 JavaScript 的类型化超集，它为 DOM API 提供了类型定义。 这些定义在任何默认的 TypeScript 项目中都很容易获得。 在 <em>lib.dom.d.ts</em> 的 20,000 多行定义中，有一个脱颖而出：<code>HTMLElement</code>。 这种类型是使用 TypeScript 进行 DOM 操作的支柱。</p><blockquote><p>You can explore the source code for the <a href="https://github.com/microsoft/TypeScript/blob/main/lib/lib.dom.d.ts" target="_blank" rel="noreferrer">DOM type definitions</a></p></blockquote><h2 id="basic-example" tabindex="-1">Basic Example <a class="header-anchor" href="#basic-example" aria-label="Permalink to &quot;Basic Example&quot;">​</a></h2><p>Given a simplified <em>index.html</em> file:</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">&lt;!</span><span style="color:#F286C4;">DOCTYPE</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">html</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">html</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">lang</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">en</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">  &lt;</span><span style="color:#F286C4;">head</span><span style="color:#F6F6F4;">&gt;&lt;</span><span style="color:#F286C4;">title</span><span style="color:#F6F6F4;">&gt;TypeScript Dom Manipulation&lt;/</span><span style="color:#F286C4;">title</span><span style="color:#F6F6F4;">&gt;&lt;/</span><span style="color:#F286C4;">head</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">  &lt;</span><span style="color:#F286C4;">body</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">div</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">id</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">app</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;&lt;/</span><span style="color:#F286C4;">div</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">&lt;!-- Assume index.js is the compiled output of index.ts --&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">script</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">src</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">index.js</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;&lt;/</span><span style="color:#F286C4;">script</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">  &lt;/</span><span style="color:#F286C4;">body</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">html</span><span style="color:#F6F6F4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;!</span><span style="color:#22863A;">DOCTYPE</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">html</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">html</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">lang</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;en&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">head</span><span style="color:#24292E;">&gt;&lt;</span><span style="color:#22863A;">title</span><span style="color:#24292E;">&gt;TypeScript Dom Manipulation&lt;/</span><span style="color:#22863A;">title</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">head</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;app&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">&lt;!-- Assume index.js is the compiled output of index.ts --&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;index.js&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">html</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>Let&#39;s explore a TypeScript script that adds a <code>&lt;p&gt;Hello, World!&lt;/p&gt;</code> element to the <code>#app</code> element.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 1. Select the div element using the id property</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> app </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> document.</span><span style="color:#62E884;">getElementById</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">app</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 2. Create a new &lt;p&gt;&lt;/p&gt; element programmatically</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> p </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> document.</span><span style="color:#62E884;">createElement</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">p</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 3. Add the text content</span></span>
<span class="line"><span style="color:#F6F6F4;">p.textContent </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Hello, World!</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 4. Append the p element to the div element</span></span>
<span class="line"><span style="color:#F6F6F4;">app?.</span><span style="color:#62E884;">appendChild</span><span style="color:#F6F6F4;">(p);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 1. Select the div element using the id property</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">app</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;app&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 2. Create a new &lt;p&gt;&lt;/p&gt; element programmatically</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">p</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;p&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 3. Add the text content</span></span>
<span class="line"><span style="color:#24292E;">p.textContent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Hello, World!&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 4. Append the p element to the div element</span></span>
<span class="line"><span style="color:#24292E;">app?.</span><span style="color:#6F42C1;">appendChild</span><span style="color:#24292E;">(p);</span></span></code></pre></div><p>After compiling and running the <em>index.html</em> page, the resulting HTML will be:</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">div</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">id</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">app</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">  &lt;</span><span style="color:#F286C4;">p</span><span style="color:#F6F6F4;">&gt;Hello, World!&lt;/</span><span style="color:#F286C4;">p</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">div</span><span style="color:#F6F6F4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;app&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;Hello, World!&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h2 id="the-document-interface" tabindex="-1">The <code>Document</code> Interface <a class="header-anchor" href="#the-document-interface" aria-label="Permalink to &quot;The \`Document\` Interface&quot;">​</a></h2><p>The first line of the TypeScript code uses a global variable <code>document</code>. Inspecting the variable shows it is defined by the <code>Document</code> interface from the <em>lib.dom.d.ts</em> file. The code snippet contains calls to two methods, <code>getElementById</code> and <code>createElement</code>.</p><h3 id="document-getelementbyid" tabindex="-1"><code>Document.getElementById</code> <a class="header-anchor" href="#document-getelementbyid" aria-label="Permalink to &quot;\`Document.getElementById\`&quot;">​</a></h3><p>The definition for this method is as follows:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">getElementById</span><span style="color:#F6F6F4;">(elementId: string): HTMLElement </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(elementId: string): HTMLElement </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span></code></pre></div><p>Pass it an element id string and it will return either <code>HTMLElement</code> or <code>null</code> . This method introduces one of the most important types, <code>HTMLElement</code>. It serves as the base interface for every other element interface. For example, the <code>p</code> variable in the code example is of type <code>HTMLParagraphElement</code>. Also take note that this method can return <code>null</code>. This is because the method can&#39;t be certain pre-runtime if it will be able to actually find the specified element or not. In the last line of the code snippet, the new <em>optional chaining</em> operator is used in order to call <code>appendChild</code>.</p><h3 id="document-createelement" tabindex="-1"><code>Document.createElement</code> <a class="header-anchor" href="#document-createelement" aria-label="Permalink to &quot;\`Document.createElement\`&quot;">​</a></h3><p>The definition for this method is (I have omitted the <em>deprecated</em> definition):</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">createElement&lt;</span><span style="color:#FFB86C;font-style:italic;">K</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">keyof</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">HTMLElementTagNameMap</span><span style="color:#F6F6F4;">&gt;(</span><span style="color:#FFB86C;font-style:italic;">tagName</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">K</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">options</span><span style="color:#F286C4;">?:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ElementCreationOptions</span><span style="color:#F6F6F4;">)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">HTMLElementTagNameMap</span><span style="color:#F6F6F4;">[</span><span style="color:#97E1F1;font-style:italic;">K</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">createElement</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">tagName</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">options</span><span style="color:#F286C4;">?:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ElementCreationOptions</span><span style="color:#F6F6F4;">)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">HTMLElement</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">createElement&lt;</span><span style="color:#6F42C1;">K</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">keyof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HTMLElementTagNameMap</span><span style="color:#24292E;">&gt;(</span><span style="color:#E36209;">tagName</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">K</span><span style="color:#24292E;">, </span><span style="color:#E36209;">options</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ElementCreationOptions</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HTMLElementTagNameMap</span><span style="color:#24292E;">[</span><span style="color:#6F42C1;">K</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(</span><span style="color:#E36209;">tagName</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">, </span><span style="color:#E36209;">options</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ElementCreationOptions</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HTMLElement</span><span style="color:#24292E;">;</span></span></code></pre></div><p>This is an overloaded function definition. The second overload is simplest and works a lot like the <code>getElementById</code> method does. Pass it any <code>string</code> and it will return a standard HTMLElement. This definition is what enables developers to create unique HTML element tags.</p><p>For example <code>document.createElement(&#39;xyz&#39;)</code> returns a <code>&lt;xyz&gt;&lt;/xyz&gt;</code> element, clearly not an element that is specified by the HTML specification.</p><blockquote><p>For those interested, you can interact with custom tag elements using the <code>document.getElementsByTagName</code></p></blockquote><p>For the first definition of <code>createElement</code>, it is using some advanced generic patterns. It is best understood broken down into chunks, starting with the generic expression: <code>&lt;K extends keyof HTMLElementTagNameMap&gt;</code>. This expression defines a generic parameter <code>K</code> that is <em>constrained</em> to the keys of the interface <code>HTMLElementTagNameMap</code>. The map interface contains every specified HTML tag name and its corresponding type interface. For example here are the first 5 mapped values:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">HTMLElementTagNameMap</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">a</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">HTMLAnchorElement</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">abbr</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">HTMLElement</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">address</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">HTMLElement</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">applet</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">HTMLAppletElement</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">area</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">HTMLAreaElement</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">...</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HTMLElementTagNameMap</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HTMLAnchorElement</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;abbr&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HTMLElement</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;address&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HTMLElement</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;applet&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HTMLAppletElement</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;area&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HTMLAreaElement</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Some elements do not exhibit unique properties and so they just return <code>HTMLElement</code>, but other types do have unique properties and methods so they return their specific interface (which will extend from or implement <code>HTMLElement</code>).</p><p>Now, for the remainder of the <code>createElement</code> definition: <code>(tagName: K, options?: ElementCreationOptions): HTMLElementTagNameMap[K]</code>. The first argument <code>tagName</code> is defined as the generic parameter <code>K</code> . The TypeScript interpreter is smart enough to <em>infer</em> the generic parameter from this argument. This means that the developer does not actually have to specify the generic parameter when using the method; whatever value is passed to the <code>tagName</code> argument will be inferred as <code>K</code> and thus can be used throughout the remainder of the definition. Which is exactly what happens; the return value <code>HTMLElementTagNameMap[K]</code> takes the <code>tagName</code> argument and uses it to return the corresponding type. This definition is how the <code>p</code> variable from the code snippet gets a type of <code>HTMLParagraphElement</code>. And if the code was <code>document.createElement(&#39;a&#39;)</code>, then it would be an element of type <code>HTMLAnchorElement</code>.</p><h2 id="the-node-interface" tabindex="-1">The <code>Node</code> interface <a class="header-anchor" href="#the-node-interface" aria-label="Permalink to &quot;The \`Node\` interface&quot;">​</a></h2><p>The <code>document.getElementById</code> function returns an <code>HTMLElement</code>. <code>HTMLElement</code> interface extends the <code>Element</code> interface which extends the <code>Node</code> interface. This prototypal extension allows for all <code>HTMLElements</code> to utilize a subset of standard methods. In the code snippet, we use a property defined on the <code>Node</code> interface to append the new <code>p</code> element to the website.</p><h3 id="node-appendchild" tabindex="-1"><code>Node.appendChild</code> <a class="header-anchor" href="#node-appendchild" aria-label="Permalink to &quot;\`Node.appendChild\`&quot;">​</a></h3><p>The last line of the code snippet is <code>app?.appendChild(p)</code>. The previous, <code>document.getElementById</code> , section detailed that the <em>optional chaining</em> operator is used here because <code>app</code> can potentially be null at runtime. The <code>appendChild</code> method is defined by:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">appendChild&lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">Node</span><span style="color:#F6F6F4;">&gt;(</span><span style="color:#FFB86C;font-style:italic;">newChild</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;">)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">appendChild&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Node</span><span style="color:#24292E;">&gt;(</span><span style="color:#E36209;">newChild</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">;</span></span></code></pre></div><p>This method works similarly to the <code>createElement</code> method as the generic parameter <code>T</code> is inferred from the <code>newChild</code> argument. <code>T</code> is <em>constrained</em> to another base interface <code>Node</code>.</p><h2 id="difference-between-children-and-childnodes" tabindex="-1">Difference between <code>children</code> and <code>childNodes</code> <a class="header-anchor" href="#difference-between-children-and-childnodes" aria-label="Permalink to &quot;Difference between \`children\` and \`childNodes\`&quot;">​</a></h2><p>Previously, this document details the <code>HTMLElement</code> interface extends from <code>Element</code> which extends from <code>Node</code>. In the DOM API there is a concept of <em>children</em> elements. For example in the following HTML, the <code>p</code> tags are children of the <code>div</code> element</p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">div</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">  &lt;</span><span style="color:#F286C4;">p</span><span style="color:#F6F6F4;">&gt;Hello, World&lt;/</span><span style="color:#F286C4;">p</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">  &lt;</span><span style="color:#F286C4;">p</span><span style="color:#F6F6F4;">&gt;TypeScript!&lt;/</span><span style="color:#F286C4;">p</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">div</span><span style="color:#F6F6F4;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> div </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> document.</span><span style="color:#62E884;">getElementsByTagName</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">div</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)[</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">div.children;</span></span>
<span class="line"><span style="color:#7B7F8B;">// HTMLCollection(2) [p, p]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">div.childNodes;</span></span>
<span class="line"><span style="color:#7B7F8B;">// NodeList(2) [p, p]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;Hello, World&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;TypeScript!&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">div</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementsByTagName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;div&quot;</span><span style="color:#24292E;">)[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">div.children;</span></span>
<span class="line"><span style="color:#6A737D;">// HTMLCollection(2) [p, p]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">div.childNodes;</span></span>
<span class="line"><span style="color:#6A737D;">// NodeList(2) [p, p]</span></span></code></pre></div><p>After capturing the <code>div</code> element, the <code>children</code> prop will return a <code>HTMLCollection</code> list containing the <code>HTMLParagraphElements</code>. The <code>childNodes</code> property will return a similar <code>NodeList</code> list of nodes. Each <code>p</code> tag will still be of type <code>HTMLParagraphElements</code>, but the <code>NodeList</code> can contain additional <em>HTML nodes</em> that the <code>HTMLCollection</code> list cannot.</p><p>Modify the html by removing one of the <code>p</code> tags, but keep the text.</p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">div</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">  &lt;</span><span style="color:#F286C4;">p</span><span style="color:#F6F6F4;">&gt;Hello, World&lt;/</span><span style="color:#F286C4;">p</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">  TypeScript!</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">div</span><span style="color:#F6F6F4;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> div </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> document.</span><span style="color:#62E884;">getElementsByTagName</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">div</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)[</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">div.children;</span></span>
<span class="line"><span style="color:#7B7F8B;">// HTMLCollection(1) [p]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">div.childNodes;</span></span>
<span class="line"><span style="color:#7B7F8B;">// NodeList(2) [p, text]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;Hello, World&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  TypeScript!</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">div</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementsByTagName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;div&quot;</span><span style="color:#24292E;">)[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">div.children;</span></span>
<span class="line"><span style="color:#6A737D;">// HTMLCollection(1) [p]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">div.childNodes;</span></span>
<span class="line"><span style="color:#6A737D;">// NodeList(2) [p, text]</span></span></code></pre></div><p>See how both lists change. <code>children</code> now only contains the <code>&lt;p&gt;Hello, World&lt;/p&gt;</code> element, and the <code>childNodes</code> contains a <code>text</code> node rather than two <code>p</code> nodes. The <code>text</code> part of the <code>NodeList</code> is the literal <code>Node</code> containing the text <code>TypeScript!</code>. The <code>children</code> list does not contain this <code>Node</code> because it is not considered an <code>HTMLElement</code>.</p><h2 id="the-queryselector-and-queryselectorall-methods" tabindex="-1">The <code>querySelector</code> and <code>querySelectorAll</code> methods <a class="header-anchor" href="#the-queryselector-and-queryselectorall-methods" aria-label="Permalink to &quot;The \`querySelector\` and \`querySelectorAll\` methods&quot;">​</a></h2><p>Both of these methods are great tools for getting lists of dom elements that fit a more unique set of constraints. They are defined in <em>lib.dom.d.ts</em> as:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * Returns the first element that is a descendant of node that matches selectors.</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F6F6F4;">querySelector&lt;</span><span style="color:#FFB86C;font-style:italic;">K</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">keyof</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">HTMLElementTagNameMap</span><span style="color:#F6F6F4;">&gt;(</span><span style="color:#FFB86C;font-style:italic;">selectors</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">K</span><span style="color:#F6F6F4;">)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">HTMLElementTagNameMap</span><span style="color:#F6F6F4;">[</span><span style="color:#97E1F1;font-style:italic;">K</span><span style="color:#F6F6F4;">] </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">null</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">querySelector</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">K</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">keyof</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">SVGElementTagNameMap</span><span style="color:#F6F6F4;">&gt;(</span><span style="color:#FFB86C;font-style:italic;">selectors</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">K</span><span style="color:#F6F6F4;">)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">SVGElementTagNameMap</span><span style="color:#F6F6F4;">[</span><span style="color:#FFB86C;font-style:italic;">K</span><span style="color:#F6F6F4;">] </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">null</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">querySelector</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">E</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">Element</span><span style="color:#F6F6F4;"> = </span><span style="color:#FFB86C;font-style:italic;">Element</span><span style="color:#F6F6F4;">&gt;(</span><span style="color:#FFB86C;font-style:italic;">selectors</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">E</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">null</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * Returns all element descendants of node that match selectors.</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">querySelectorAll</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">K</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">keyof</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">HTMLElementTagNameMap</span><span style="color:#F6F6F4;">&gt;(</span><span style="color:#FFB86C;font-style:italic;">selectors</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">K</span><span style="color:#F6F6F4;">)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">NodeListOf</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">HTMLElementTagNameMap</span><span style="color:#F6F6F4;">[</span><span style="color:#FFB86C;font-style:italic;">K</span><span style="color:#F6F6F4;">]&gt;;</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">querySelectorAll</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">K</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">keyof</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">SVGElementTagNameMap</span><span style="color:#F6F6F4;">&gt;(</span><span style="color:#FFB86C;font-style:italic;">selectors</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">K</span><span style="color:#F6F6F4;">)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">NodeListOf</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">SVGElementTagNameMap</span><span style="color:#F6F6F4;">[</span><span style="color:#FFB86C;font-style:italic;">K</span><span style="color:#F6F6F4;">]&gt;;</span></span>
<span class="line"><span style="color:#FFB86C;font-style:italic;">querySelectorAll</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">E</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">Element</span><span style="color:#F6F6F4;"> = </span><span style="color:#FFB86C;font-style:italic;">Element</span><span style="color:#F6F6F4;">&gt;(</span><span style="color:#FFB86C;font-style:italic;">selectors</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">NodeListOf</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">E</span><span style="color:#F6F6F4;">&gt;;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Returns the first element that is a descendant of node that matches selectors.</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#24292E;">querySelector&lt;</span><span style="color:#6F42C1;">K</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">keyof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HTMLElementTagNameMap</span><span style="color:#24292E;">&gt;(</span><span style="color:#E36209;">selectors</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">K</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HTMLElementTagNameMap</span><span style="color:#24292E;">[</span><span style="color:#6F42C1;">K</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6F42C1;">querySelector</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">K</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">keyof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SVGElementTagNameMap</span><span style="color:#24292E;">&gt;(</span><span style="color:#E36209;">selectors</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">K</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SVGElementTagNameMap</span><span style="color:#24292E;">[</span><span style="color:#6F42C1;">K</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6F42C1;">querySelector</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">E</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Element</span><span style="color:#24292E;"> = </span><span style="color:#6F42C1;">Element</span><span style="color:#24292E;">&gt;(</span><span style="color:#E36209;">selectors</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">E</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Returns all element descendants of node that match selectors.</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#6F42C1;">querySelectorAll</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">K</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">keyof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HTMLElementTagNameMap</span><span style="color:#24292E;">&gt;(</span><span style="color:#E36209;">selectors</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">K</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NodeListOf</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">HTMLElementTagNameMap</span><span style="color:#24292E;">[</span><span style="color:#6F42C1;">K</span><span style="color:#24292E;">]&gt;;</span></span>
<span class="line"><span style="color:#6F42C1;">querySelectorAll</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">K</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">keyof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SVGElementTagNameMap</span><span style="color:#24292E;">&gt;(</span><span style="color:#E36209;">selectors</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">K</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NodeListOf</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">SVGElementTagNameMap</span><span style="color:#24292E;">[</span><span style="color:#6F42C1;">K</span><span style="color:#24292E;">]&gt;;</span></span>
<span class="line"><span style="color:#6F42C1;">querySelectorAll</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">E</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Element</span><span style="color:#24292E;"> = </span><span style="color:#6F42C1;">Element</span><span style="color:#24292E;">&gt;(</span><span style="color:#E36209;">selectors</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NodeListOf</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">E</span><span style="color:#24292E;">&gt;;</span></span></code></pre></div><p>The <code>querySelectorAll</code> definition is similar to <code>getElementsByTagName</code>, except it returns a new type: <code>NodeListOf</code>. This return type is essentially a custom implementation of the standard JavaScript list element. Arguably, replacing <code>NodeListOf&lt;E&gt;</code> with <code>E[]</code> would result in a very similar user experience. <code>NodeListOf</code> only implements the following properties and methods: <code>length</code> , <code>item(index)</code>, <code>forEach((value, key, parent) =&gt; void)</code> , and numeric indexing. Additionally, this method returns a list of <em>elements</em>, not <em>nodes</em>, which is what <code>NodeList</code> was returning from the <code>.childNodes</code> method. While this may appear as a discrepancy, take note that interface <code>Element</code> extends from <code>Node</code>.</p><p>To see these methods in action modify the existing code to:</p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">ul</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">  &lt;</span><span style="color:#F286C4;">li</span><span style="color:#F6F6F4;">&gt;First :)&lt;/</span><span style="color:#F286C4;">li</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">  &lt;</span><span style="color:#F286C4;">li</span><span style="color:#F6F6F4;">&gt;Second!&lt;/</span><span style="color:#F286C4;">li</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">  &lt;</span><span style="color:#F286C4;">li</span><span style="color:#F6F6F4;">&gt;Third times a charm.&lt;/</span><span style="color:#F286C4;">li</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">ul</span><span style="color:#F6F6F4;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> first </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> document.</span><span style="color:#62E884;">querySelector</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">li</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">// returns the first li element</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> all </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> document.</span><span style="color:#62E884;">querySelectorAll</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">li</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">// returns the list of all li elements</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">ul</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">li</span><span style="color:#24292E;">&gt;First :)&lt;/</span><span style="color:#22863A;">li</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">li</span><span style="color:#24292E;">&gt;Second!&lt;/</span><span style="color:#22863A;">li</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">li</span><span style="color:#24292E;">&gt;Third times a charm.&lt;/</span><span style="color:#22863A;">li</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">ul</span><span style="color:#24292E;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">first</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">querySelector</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;li&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// returns the first li element</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">all</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">querySelectorAll</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;li&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// returns the list of all li elements</span></span></code></pre></div><h2 id="interested-in-learning-more" tabindex="-1">Interested in learning more? <a class="header-anchor" href="#interested-in-learning-more" aria-label="Permalink to &quot;Interested in learning more?&quot;">​</a></h2><p>The best part about the <em>lib.dom.d.ts</em> type definitions is that they are reflective of the types annotated in the Mozilla Developer Network (MDN) documentation site. For example, the <code>HTMLElement</code> interface is documented by this <a href="https://developer.mozilla.org/docs/Web/API/HTMLElement" target="_blank" rel="noreferrer">HTMLElement page</a> on MDN. These pages list all available properties, methods, and sometimes even examples. Another great aspect of the pages is that they provide links to the corresponding standard documents. Here is the link to the <a href="https://www.w3.org/TR/html52/dom.html#htmlelement" target="_blank" rel="noreferrer">W3C Recommendation for HTMLElement</a>.</p><p>Sources:</p><ul><li><a href="http://www.ecma-international.org/ecma-262/10.0/index.html" target="_blank" rel="noreferrer">ECMA-262 Standard</a></li><li><a href="https://developer.mozilla.org/docs/Web/API/Document_Object_Model/Introduction" target="_blank" rel="noreferrer">Introduction to the DOM</a></li></ul>`,52),t=[o];function p(c,r,y,i,F,d){return n(),a("div",null,t)}const m=s(l,[["render",p]]);export{h as __pageData,m as default};
