import{_ as s,o as a,c as n,V as o}from"./chunks/framework.ced88878.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{"display":"Downlevel Iteration","oneline":"Emit more compliant, but verbose and less performant JavaScript for iteration."},"headers":[],"relativePath":"zh/tsconfig-reference/options/downlevelIteration.md","lastUpdated":1682921420000}'),l={name:"zh/tsconfig-reference/options/downlevelIteration.md"},p=o(`<p>Downleveling is TypeScript&#39;s term for transpiling to an older version of JavaScript. This flag is to enable support for a more accurate implementation of how modern JavaScript iterates through new concepts in older JavaScript runtimes.</p><p>ECMAScript 6 added several new iteration primitives: the <code>for / of</code> loop (<code>for (el of arr)</code>), Array spread (<code>[a, ...b]</code>), argument spread (<code>fn(...args)</code>), and <code>Symbol.iterator</code>. <code>downlevelIteration</code> allows for these iteration primitives to be used more accurately in ES5 environments if a <code>Symbol.iterator</code> implementation is present.</p><h4 id="example-effects-on-for-of" tabindex="-1">Example: Effects on <code>for / of</code> <a class="header-anchor" href="#example-effects-on-for-of" aria-label="Permalink to &quot;Example: Effects on \`for / of\`&quot;">â€‹</a></h4><p>With this TypeScript code:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> str </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Hello!</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> s </span><span style="color:#F286C4;">of</span><span style="color:#F6F6F4;"> str) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(s);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Hello!&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">s</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> str) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(s);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Without <code>downlevelIteration</code> enabled, a <code>for / of</code> loop on any object is downleveled to a traditional <code>for</code> loop:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// @target: ES5</span></span>
<span class="line"><span style="color:#7B7F8B;">// @showEmit</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> str </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Hello!</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> s </span><span style="color:#F286C4;">of</span><span style="color:#F6F6F4;"> str) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(s);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// @target: ES5</span></span>
<span class="line"><span style="color:#6A737D;">// @showEmit</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Hello!&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">s</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> str) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(s);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>This is often what people expect, but it&#39;s not 100% compliant with ECMAScript iteration protocol. Certain strings, such as emoji (ðŸ˜œ), have a <code>.length</code> of 2 (or even more!), but should iterate as 1 unit in a <code>for-of</code> loop. See <a href="https://blog.jonnew.com/posts/poo-dot-length-equals-two" target="_blank" rel="noreferrer">this blog post by Jonathan New</a> for a longer explanation.</p><p>When <code>downlevelIteration</code> is enabled, TypeScript will use a helper function that checks for a <code>Symbol.iterator</code> implementation (either native or polyfill). If this implementation is missing, you&#39;ll fall back to index-based iteration.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// @target: ES5</span></span>
<span class="line"><span style="color:#7B7F8B;">// @downlevelIteration</span></span>
<span class="line"><span style="color:#7B7F8B;">// @showEmit</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> str </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Hello!</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> s </span><span style="color:#F286C4;">of</span><span style="color:#F6F6F4;"> str) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(s);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// @target: ES5</span></span>
<span class="line"><span style="color:#6A737D;">// @downlevelIteration</span></span>
<span class="line"><span style="color:#6A737D;">// @showEmit</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Hello!&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">s</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> str) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(s);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>You can use <a href="https://www.npmjs.com/package/tslib" target="_blank" rel="noreferrer">tslib</a> via <a href="#importHelpers"><code>importHelpers</code></a> to reduce the amount of inline JavaScript too:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// @target: ES5</span></span>
<span class="line"><span style="color:#7B7F8B;">// @downlevelIteration</span></span>
<span class="line"><span style="color:#7B7F8B;">// @importHelpers</span></span>
<span class="line"><span style="color:#7B7F8B;">// @showEmit</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> str </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Hello!</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> s </span><span style="color:#F286C4;">of</span><span style="color:#F6F6F4;"> str) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(s);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// @target: ES5</span></span>
<span class="line"><span style="color:#6A737D;">// @downlevelIteration</span></span>
<span class="line"><span style="color:#6A737D;">// @importHelpers</span></span>
<span class="line"><span style="color:#6A737D;">// @showEmit</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Hello!&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">s</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> str) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(s);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>Note:</strong> enabling <code>downlevelIteration</code> does not improve compliance if <code>Symbol.iterator</code> is not present in the runtime.</p><h4 id="example-effects-on-array-spreads" tabindex="-1">Example: Effects on Array Spreads <a class="header-anchor" href="#example-effects-on-array-spreads" aria-label="Permalink to &quot;Example: Effects on Array Spreads&quot;">â€‹</a></h4><p>This is an array spread:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// Make a new array who elements are 1 followed by the elements of arr2</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> arr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#F286C4;">...</span><span style="color:#F6F6F4;">arr2];</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Make a new array who elements are 1 followed by the elements of arr2</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">arr</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">arr2];</span></span></code></pre></div><p>Based on the description, it sounds easy to downlevel to ES5:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// The same, right?</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> arr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">].</span><span style="color:#62E884;">concat</span><span style="color:#F6F6F4;">(arr2);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// The same, right?</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">arr</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">].</span><span style="color:#6F42C1;">concat</span><span style="color:#24292E;">(arr2);</span></span></code></pre></div><p>However, this is observably different in certain rare cases. For example, if an array has a &quot;hole&quot; in it, the missing index will create an <em>own</em> property if spreaded, but will not if built using <code>concat</code>:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// Make an array where the &#39;1&#39; element is missing</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> missing </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, , </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> spreaded </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#F286C4;">...</span><span style="color:#F6F6F4;">missing];</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> concated </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [].</span><span style="color:#62E884;">concat</span><span style="color:#F6F6F4;">(missing);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// true</span></span>
<span class="line"><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">1</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">in</span><span style="color:#F6F6F4;"> spreaded;</span></span>
<span class="line"><span style="color:#7B7F8B;">// false</span></span>
<span class="line"><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">1</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">in</span><span style="color:#F6F6F4;"> concated;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Make an array where the &#39;1&#39; element is missing</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> missing </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, , </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> spreaded </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">missing];</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> concated </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [].</span><span style="color:#6F42C1;">concat</span><span style="color:#24292E;">(missing);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#032F62;">&quot;1&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> spreaded;</span></span>
<span class="line"><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#032F62;">&quot;1&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> concated;</span></span></code></pre></div><p>Just as with <code>for / of</code>, <code>downlevelIteration</code> will use <code>Symbol.iterator</code> (if present) to more accurately emulate ES 6 behavior.</p>`,21),e=[p];function t(c,r,i,y,F,d){return a(),n("div",null,e)}const f=s(l,[["render",t]]);export{h as __pageData,f as default};
