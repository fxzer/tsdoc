import{_ as s,o as a,c as n,V as o}from"./chunks/framework.ced88878.js";const E=JSON.parse('{"title":"","description":"","frontmatter":{"display":"Root Dirs","oneline":"Allow multiple folders to be treated as one when resolving modules."},"headers":[],"relativePath":"zh/tsconfig-reference/options/rootDirs.md","lastUpdated":1682921420000}'),p={name:"zh/tsconfig-reference/options/rootDirs.md"},l=o(`<p>Using <code>rootDirs</code>, you can inform the compiler that there are many &quot;virtual&quot; directories acting as a single root. This allows the compiler to resolve relative module imports within these &quot;virtual&quot; directories, as if they were merged in to one directory.</p><p>For example:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">src</span></span>
<span class="line"><span style="color:#f6f6f4;"> └── views</span></span>
<span class="line"><span style="color:#f6f6f4;">     └── view1.ts (can import &quot;./template1&quot;, &quot;./view2\`)</span></span>
<span class="line"><span style="color:#f6f6f4;">     └── view2.ts (can import &quot;./template1&quot;, &quot;./view1\`)</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;"> generated</span></span>
<span class="line"><span style="color:#f6f6f4;"> └── templates</span></span>
<span class="line"><span style="color:#f6f6f4;">         └── views</span></span>
<span class="line"><span style="color:#f6f6f4;">             └── template1.ts (can import &quot;./view1&quot;, &quot;./view2&quot;)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">src</span></span>
<span class="line"><span style="color:#24292e;"> └── views</span></span>
<span class="line"><span style="color:#24292e;">     └── view1.ts (can import &quot;./template1&quot;, &quot;./view2\`)</span></span>
<span class="line"><span style="color:#24292e;">     └── view2.ts (can import &quot;./template1&quot;, &quot;./view1\`)</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;"> generated</span></span>
<span class="line"><span style="color:#24292e;"> └── templates</span></span>
<span class="line"><span style="color:#24292e;">         └── views</span></span>
<span class="line"><span style="color:#24292e;">             └── template1.ts (can import &quot;./view1&quot;, &quot;./view2&quot;)</span></span></code></pre></div><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">compilerOptions</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">rootDirs</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">src/views</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">generated/templates/views</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">]</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;rootDirs&quot;</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;src/views&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;generated/templates/views&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>This does not affect how TypeScript emits JavaScript, it only emulates the assumption that they will be able to work via those relative paths at runtime.</p><p><code>rootDirs</code> can be used to provide a separate &quot;type layer&quot; to files that are not TypeScript or JavaScript by providing a home for generated <code>.d.ts</code> files in another folder. This technique is useful for bundled applications where you use <code>import</code> of files that aren&#39;t necessarily code:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">src</span></span>
<span class="line"><span style="color:#F6F6F4;"> └── </span><span style="color:#E7EE98;">index.ts</span></span>
<span class="line"><span style="color:#F6F6F4;"> └── </span><span style="color:#E7EE98;">css</span></span>
<span class="line"><span style="color:#F6F6F4;">     └── </span><span style="color:#E7EE98;">main.css</span></span>
<span class="line"><span style="color:#F6F6F4;">     └── </span><span style="color:#E7EE98;">navigation.css</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;"> generated</span></span>
<span class="line"><span style="color:#F6F6F4;"> └── </span><span style="color:#E7EE98;">css</span></span>
<span class="line"><span style="color:#F6F6F4;">     └── </span><span style="color:#E7EE98;">main.css.d.ts</span></span>
<span class="line"><span style="color:#F6F6F4;">     └── </span><span style="color:#E7EE98;">navigation.css.d.ts</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">src</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">└──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">index.ts</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">└──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">css</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6F42C1;">└──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">main.css</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6F42C1;">└──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">navigation.css</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">generated</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">└──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">css</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6F42C1;">└──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">main.css.d.ts</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6F42C1;">└──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">navigation.css.d.ts</span></span></code></pre></div><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">compilerOptions</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">rootDirs</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">src</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">generated</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">]</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;rootDirs&quot;</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;src&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;generated&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>This technique lets you generate types ahead of time for the non-code source files. Imports then work naturally based off the source file&#39;s location. For example <code>./src/index.ts</code> can import the file <code>./src/css/main.css</code> and TypeScript will be aware of the bundler&#39;s behavior for that filetype via the corresponding generated declaration file.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// @filename: main.css.d.ts</span></span>
<span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> appClass </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">mainClassF3EC2</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#7B7F8B;">// ---cut---</span></span>
<span class="line"><span style="color:#7B7F8B;">// @filename: index.ts</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { appClass } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">./main.css</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// @filename: main.css.d.ts</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">appClass</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;mainClassF3EC2&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// ---cut---</span></span>
<span class="line"><span style="color:#6A737D;">// @filename: index.ts</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { appClass } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./main.css&quot;</span><span style="color:#24292E;">;</span></span></code></pre></div>`,10),e=[l];function t(c,r,i,y,F,d){return a(),n("div",null,e)}const f=s(p,[["render",t]]);export{E as __pageData,f as default};
